{
prompt: """How to create a sequence and access it?""" 

solution: """1 >> sequence ; create a sequence with first element
2 >> sequence  
s | Take(0) ; access element at index 0 in a sequence
Assert.Is(1)
Log("result")
"""

explicit: """Sequence(Name: sequence) ; ; create empty sequence
1 | Push(Name: sequence Clear: false)          
2 | Push(Name: sequence Clear: false) 
sequence | Take(0) ; access element at index 0 in the sequence
Assert.Is(Value: 1)
Log(Prefix: "result" Level: LogLevel::Info)
"""

explanation: """Sequence creates an empty sequence when the Key: parameter is not set. If a key is passed via this parameter Sequence creates an empty table instead (behaving like the Table shard). The created sequence name is defined in the Name: parameter.
This shard can control the scope of the created sequence variable. A true value for the Global: parameter makes the scope of the sequence global (available to all wires on the mesh), and a false value makes the scope local (available only to the wire its defined in).
By default a sequence created with this shard would be cleared (emptied) every time the wire is executed (since Clear: is true by default). To retain the sequence values across wire iterations set the Clear: parameter to false.
This shard can also define the sequence's inner data types via the Types: parameter. More than one data type may be set.
Any input to this shard is ignored and instead passed through as its output..
"""

tag: "  #General"
}