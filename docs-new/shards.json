{
  "IsAnyMoreEqual": {
    "help": "Checks if any element in a sequence is greater than or equal to a value.",
    "inputHelp": "A sequence and a value to compare each element against.",
    "outputHelp": "A boolean indicating if any element is greater than or equal to the value.",
    "Value": "The value to compare each element in the sequence against."
  },
  "IsAllMoreEqual": {
    "help": "Checks if all elements in a sequence are greater than or equal to a value.",
    "inputHelp": "A sequence and a value to compare each element against.",
    "outputHelp": "A boolean indicating if all elements are greater than or equal to the value.",
    "Value": "The value to compare each element in the sequence against."
  },
  "IsAllMore": {
    "help": "Checks if all elements in a sequence are greater than a value.",
    "inputHelp": "A sequence and a value to compare each element against.",
    "outputHelp": "A boolean indicating if all elements are greater than the value.",
    "Value": "The value to compare each element in the sequence against."
  },
  "IsAnyMore": {
    "help": "Checks if any element in a sequence is greater than a value.",
    "inputHelp": "A sequence and a value to compare each element against.",
    "outputHelp": "A boolean indicating if any element is greater than the value.",
    "Value": "The value to compare each element in the sequence against."
  },
  "IsAll": {
    "help": "Checks if all elements in a sequence match a value.",
    "inputHelp": "A sequence to compare each element against.",
    "outputHelp": "A boolean indicating if all elements match the value.",
    "Value": "The value to compare each element in the sequence against."
  },
  "IsAny": {
    "help": "Checks if any element in a sequence matches a value.",
    "inputHelp": "A sequence to compare each element against.",
    "outputHelp": "A boolean indicating if any element matches the value.",
    "Value": "The value to compare each element in the sequence against."
  },
  "IsAnyNot": {
    "help": "Checks if any element in a sequence does not match a value.",
    "inputHelp": "A sequence and a value to compare each element against.",
    "outputHelp": "A boolean indicating if any element does not match the value.",
    "Value": "The value to compare each element in the sequence against."
  },
  "ToFloat": {
    "help": "Converts the input to a float.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a float."
  },
  "ToFloat2": {
    "help": "Converts the input to a vector of 2 floats.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a vector of 2 floats."
  },
  "ToFloat3": {
    "help": "Converts the input to a vector of 3 floats.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a vector of 3 floats."
  },
  "ToFloat4": {
    "help": "Converts the input to a vector of 4 floats.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a vector of 4 floats."
  },
  "ToInt2": {
    "help": "Converts the input to a vector of 2 integers.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a vector of 2 integers."
  },
  "ToInt3": {
    "help": "Converts the input to a vector of 3 integers.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a vector of 3 integers."
  },
  "ToInt4": {
    "help": "Converts the input to a vector of 4 integers.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a vector of 4 integers."
  },
  "ToInt8": {
    "help": "Converts the input to a vector of 8 integers.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a vector of 8 integers."
  },
  "ToInt16": {
    "help": "Converts the input to a vector of 16 integers.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a vector of 16 integers."
  },
  "ToColor": {
    "help": "Converts the input to a color.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Input converted to a color."
  },
  "ExpectSeq": {
    "help": "Checks if the input matches a sequence type and outputs the input unchanged. Throws error if mismatch.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Unchanged if it matches the expected sequence type."
  },
  "ExpectColorSeq": {
    "help": "Checks if the input matches a color sequence type and outputs the input unchanged. Throws error if mismatch.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Outputs the input unchanged if it matches a color sequence type."
  },
  "ExpectTable": {
    "help": "Checks if the input is a table and outputs the input unchanged. Throws error if not a table.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Outputs the input unchanged if it is a table."
  },
  "ExpectWire": {
    "help": "Checks if the input is a wire and outputs the input unchanged. Throws error if not a wire.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Outputs the input unchanged if it is a wire."
  },
  "ExpectColor": {
    "help": "Checks if the input is a color and outputs the input unchanged. Throws error if not a color.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Outputs the input unchanged if it is a color."
  },
  "ExpectBytes": {
    "help": "Checks if the input is bytes and outputs the input unchanged. Throws error if not bytes.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Unchanged if it is bytes."
  },
  "ExpectFloat4": {
    "help": "Checks if the input is a 4 component float vector and outputs the input unchanged. Throws error if mismatch.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Unchanged if it is a vector of 4 floating point values."
  },
  "ExpectInt": {
    "help": "Checks if the input is an integer and outputs the input unchanged. Throws error if mismatch.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Outputs the input unchanged if it is an integer."
  },
  "ExpectInt3": {
    "help": "Checks if the input is a vector of 3 integers and outputs the input unchanged. Throws error if mismatch.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Outputs the input unchanged if it is a vector of 3 integers."
  },
  "ExpectInt4": {
    "help": "Checks if the input is a vector of 4 integers and outputs the input unchanged. Throws error if mismatch.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Outputs the input unchanged if it is a vector of 4 integers."
  },
  "ExpectInt8": {
    "help": "Checks if the input is a vector of 8 integers and outputs the input unchanged. Throws error if mismatch.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Outputs the input unchanged if it is a vector of 8 integers."
  },
  "ExpectAudio": {
    "help": "Checks if the input is audio and outputs the input unchanged. Throws error if not audio.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "Outputs the input unchanged if it is audio."
  },
  "IsFloat3": {
    "help": "Checks if the input is a 3 component float vector and outputs true or false.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "A boolean indicating if the input was a vector of 3 floating point numbers."
  },
  "IsFloat4": {
    "help": "Checks if the input is a 4 component float vector and outputs true or false.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "A boolean indicating if the input was a vector of 4 floating point numbers."
  },
  "IsInt": {
    "help": "Checks if the input is an integer and outputs true or false.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "A boolean indicating if the input was an integer."
  },
  "IsInt2": {
    "help": "Checks if the input is a 2 component integer vector and outputs true or false.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "A boolean indicating if the input was a vector of 2 integers."
  },
  "IsInt3": {
    "help": "Checks if the input is a 3 component integer vector and outputs true or false.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "A boolean indicating if the input was a vector of 3 integers."
  },
  "IsInt4": {
    "help": "Checks if the input is a 4 component integer vector and outputs true or false.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "A boolean indicating if the input was a vector of 4 integers."
  },
  "IsImage": {
    "help": "Checks if the input is an image and outputs true or false.",
    "inputHelp": "Accepts input of any type.",
    "outputHelp": "A boolean indicating if the input was an image."
  },
  "ToJson": {
    "help": "Converts the input shards data to a JSON string representation.",
    "inputHelp": "Can be of any type.",
    "outputHelp": "A JSON string representation of the input value.",
    "Pure": "If the input string is generic pure json rather than shards flavored json.",
    "Indent": "How many spaces to use as json prettify indent."
  },
  "Wasm.run": {
    "help": "Executes WebAssembly modules by loading the provided wasm file, configuring the runtime, linking libraries, finding the entrypoint, calling it with provided arguments, and outputting the stdout/stderr output.",
    "inputHelp": "A string that will be passed to stdin of the wasm module.",
    "outputHelp": "A string containing the content written by the wasm module to stdout.",
    "Module": "The path to the WebAssembly (.wasm) file to load and run.",
    "Arguments": "The arguments to pass to the entrypoint function of the loaded WebAssembly module.",
    "EntryPoint": "The name of the function that will be looked up and called as the entrypoint into the WebAssembly module. Defaults to _start.",
    "StackSize": "The size in kilobytes to configure the stack of the wasm runtime to. Defaults to 1024 KB.",
    "ResetRuntime": "Whether to reset/reload the runtime on every activation. Defaults to true. Can be set to false for performance reasons if there are no issues with multiple runs.",
    "CallConstructors": "Whether to explicitly call the __wasm_call_ctors function if it exists to force calling constructors. Defaults to false, but some wasm modules produced by Rust/WASI may need this."
  },
  "DB.Query": {
    "help": "Executes a SQL query against a SQLite database every time it is activated, and outputs the result.",
    "inputHelp": "Accepts a string containing the SQLite query to execute.",
    "outputHelp": "A table containing the result set of the query. If the query outputted no rows, outputs an empty table.",
    "Query": "The SQLite query to execute each activation. This parameter specifies the actual SQL query string.",
    "Database": "Specifies the SQLite database filename."
  },
  "DB.RawQuery": {
    "help": "Executes a raw SQL query string against a SQLite database.",
    "inputHelp": "A string containing the full SQL query statement to execute.",
    "outputHelp": "The input string unchanged.",
    "Database": "The filename of the sqlite database to connect to. Defaults to 'shards.db' if not provided."
  },
  "Unpack": {
    "help": "Unpacks the input bytes into a sequence based on the struct definition string.",
    "inputHelp": "A bytes array containing the binary data to unpack.",
    "outputHelp": "A sequence containing the unpacked data. The sequence order and types will match the struct definition string.",
    "Definition": "A string defining the struct layout e.g. 'i32 f32 b i8[256]' which defines the types and order of members that will be unpacked."
  },
  "Reflect.Name": {
    "help": "Retrieves the name of a shard.",
    "inputHelp": "Takes in a shard. This is the shard whose name will be retrieved.",
    "outputHelp": "A string containing the name of the input shard."
  },
  "RandomBytes": {
    "help": "Generates Bytes with random values.",
    "inputHelp": "Ignored.",
    "outputHelp": "Random Bytes.",
    "Size": "The number of bytes that the shard will output. Type is Int and has a default value of 32 bytes."
  },
  "RandomInt": {
    "help": "Generates a random integer value.",
    "inputHelp": "Ignored.",
    "outputHelp": "Random integer.",
    "Size": "The maximum value to output as an integer literal or variable."
  },
  "Physics.CastRay": {
    "help": "Casts a ray into the physics simulation and outputs any rigid bodies that were hit by the ray.",
    "inputHelp": "A float3 representing the starting point of the ray, and a second float3 representing the direction and length of the ray. This defines the ray to be cast into the physics simulation.",
    "outputHelp": "A sequence containing any rigid bodies that were hit by the ray, in order from closest to furthest hit point."
  },
  "Physics.KinematicBody": {
    "help": "Creates a kinematic rigid body that can be moved by setting its position and rotation parameters every frame.",
    "inputHelp": "Ignored.",
    "outputHelp": "A 4x4 transform matrix representing the interpolated position and rotation of the kinematic rigid body for the current frame.",
    "Shapes": "The shape(s) that represent the collision volume of the rigid body.",
    "Position": "A position that can be set every frame to move the kinematic rigid body.",
    "Rotation": "A rotation that can be set every frame to orient the kinematic rigid body. Can be axis-angle or quaternion.",
    "Name": "The optional variable name to expose the kinematic rigid body to the graph."
  },
  "Physics.StaticBody": {
    "help": "Creates a static rigid body that does not move and has infinite mass.",
    "inputHelp": "Ignored.",
    "outputHelp": "Outputs the input unchanged.",
    "Shapes": "The shape(s) that represent the collision volume of the static rigid body.",
    "Position": "The initial position of the static rigid body. This cannot be changed after creation.",
    "Rotation": "The initial rotation of the static rigid body. This cannot be changed after creation.",
    "Name": "The optional variable name to expose the static rigid body to the graph."
  },
  "Physics.Ball": {
    "help": "Creates a ball rigid body that can be added to a physics simulation.",
    "inputHelp": "Ignored.",
    "outputHelp": "Rigid ball body object that can be added to a physics simulation.",
    "Position": "The position of the ball relative to the body it is attached to in the simulation. It is a 3D vector.",
    "Rotation": "The rotation of the shape.",
    "Radius": "Specifies the radius of the ball. It is a float value."
  },
  "ONNX.Activate": {
    "help": "Activates an ONNX model by running inference on the input data.",
    "inputHelp": "A sequence of float values representing the input data to run through the ONNX model.",
    "outputHelp": "A sequence of float values representing the output from running the input through the ONNX model.",
    "Model": "A variable containing the ONNX model object to use for inference."
  },
  "WS.WriteString": {
    "help": "Sends a string message to the connected WebSocket client.",
    "inputHelp": "The string message to send to the WebSocket client.",
    "outputHelp": "The input string unchanged.",
    "Client": "A variable containing a WebSocket client object instance."
  },
  "Network.Server": {
    "help": "A reliable, low-latency UDP server for Shards using IKCP and Boost Asio UDP server.",
    "inputHelp": "Ignored.",
    "outputHelp": "Outputs the input unchanged.",
    "Address": "The local IP address to bind the UDP server to.",
    "Port": "The local port number to bind the UDP server to.",
    "Handler": "An optional wire shard to spawn for each new client connection.",
    "Timeout": "The number of seconds of inactivity after which a connection is considered timed out and closed."
  },
  "Network.Send": {
    "help": "Sends the input variable over the network to a peer.",
    "inputHelp": "The value to serialize and send over the network.",
    "outputHelp": "Same as the input, unchanged.",
    "Peer": "The peer to send packets to."
  },
  "Network.Client": {
    "help": "Creates a client connection to a network server.",
    "inputHelp": "Ignored.",
    "outputHelp": "Outputs a peer object representing the client connection to the network server.",
    "Address": "The IP address of the network server to connect to.",
    "Port": "The port number on the network server to connect to.",
    "Handler": "The flow of shard(s) that will be activated when a network packet is received."
  },
  "Network.Peer": {
    "help": "Outputs the peer object representing the current client network connection.",
    "inputHelp": "Ignored.",
    "outputHelp": "The peer object from the wire context."
  },
  "Network.PeerID": {
    "help": "Retrieves the unique ID associated with provided peer.",
    "inputHelp": "Ignored.",
    "outputHelp": "An integer representing the unique ID of the peer provided.",
    "Peer": "Allows specifying the peer to extract the ID from."
  },
  "Network.Broadcast": {
    "help": "Sends the input data to all peers connected to the Network.Server server.",
    "inputHelp": "A value to broadcast to all peers.",
    "outputHelp": "Same as the input, unchanged."
  },
  "Physics.Cuboid": {
    "help": "Creates a cuboid collision shape that can be attached to a rigid body.",
    "inputHelp": "Ignored.",
    "outputHelp": "A physics object representing the created cuboid shape.",
    "Position": "The position of the cuboid relative to the body.",
    "Rotation": "The rotation of the cuboid.",
    "HalfExtents": "The half-extents of the cuboid along its local axes."
  },
  "Inputs.GetContext": {
    "help": "Retrieves the WindowContext variable from the execution context.",
    "inputHelp": "None.",
    "outputHelp": "The WindowContext variable.",
    "_context": "The required WindowContext variable."
  },
  "Inputs.KeyUp": {
    "help": "Detects keyboard key release events.",
    "inputHelp": "Ignored.",
    "outputHelp": "Outputs the input unchanged.",
    "Key": "The key to detect release events for.",
    "Action": "The Shards to run when the key is released.",
    "Repeat": "Whether to trigger on repeated key release events."
  },
  "Inputs.KeyDown": {
    "help": "Detects keyboard key press events.",
    "inputHelp": "Ignored.",
    "outputHelp": "Outputs the input unchanged.",
    "Key": "The key to detect press events for.",
    "Action": "The Shard or sequence of shards to run when the key is pressed.",
    "Repeat": "Whether to trigger on repeated key press events."
  },
  "Inputs.MouseUp": {
    "help": "Detects mouse button release events.",
    "inputHelp": "Ignored.",
    "outputHelp": "Outputs the input unchanged.",
    "Left": "The shards to run when the left mouse button is released.",
    "Right": "The shards to run when the right mouse button is released.",
    "Middle": "The shards to run when the middle mouse button is released."
  },
  "Inputs.HandleURL": {
    "help": "Handles URL/file drop events on the application window.",
    "inputHelp": "Ignored.",
    "outputHelp": "Outputs the input value unchanged.",
    "Action": "The Shards to execute when a URL/file is dropped."
  },
  "Inputs.IsKeyDown": {
    "help": "Checks if a specific keyboard key is currently held down.",
    "inputHelp": "Ignored.",
    "outputHelp": "Outputs true if the specified key is currently held down, false otherwise.",
    "Key": "The key to check the state of."
  }
}