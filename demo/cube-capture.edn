; NOTE: Because of our coordinate space with the camera viewing -Z direction
;       The Y rotation for the Z axis is revesed
(def cube-rotations [(Float3 0 -90.0 0) ; X+
                     (Float3 0 90.0 0) ; X-
                     (Float3 90.0 0 0) ; Y+
                     (Float3 -90.0 0 0) ; Y-
                     (Float3 0 0 0) ; Z+
                     (Float3 0 180 0) ; Z-
                     ])
(defshards xyz-to-mat []
  (| (Take 0) >= .x) (| (Take 1) >= .y) (| (Take 2) >= .z)
  .x (Math.DegreesToRadians) (Math.AxisAngleX) (Math.Rotation) >= .rx
  .y (Math.DegreesToRadians) (Math.AxisAngleY) (Math.Rotation) >= .ry
  .z (Math.DegreesToRadians) (Math.AxisAngleZ) (Math.Rotation) >= .rz
  .rz (Math.MatMul .ry) (Math.MatMul .rx))

(defshards render-cubemap-section [steps cube-tex mip-index]
  90.0 (Math.DegreesToRadians) >= .fov
  (map
   (fn* [n] (->
             cube-rotations (Take n)
             (xyz-to-mat) >= .tmp-rot
             (Float3 0 10 0) (Math.Translation) >= .tmp-tsl
             .tmp-tsl (Math.MatMul .tmp-rot) (Math.Inverse) >= (ContextVar (str "view-transform-" n))
             (GFX.View :View (ContextVar (str "view-transform-" n)) :Fov .fov) >= (ContextVar (str "capture-view-" n))
             (GFX.RenderInto :Textures {:color {:Texture cube-tex :Face n :Mip mip-index}}
                             :Size (Int2 512) ; Controls cubemap dimensions
                             :Contents (->
                                        (GFX.Render :Steps steps :View (ContextVar (str "capture-view-" n)))));
             ))
   (range 0 5));
  )

(defshards render-cubemap [steps cube-tex]
  (render-cubemap-section steps cube-tex 0))
