(load-file "atmosphere.edn")
(load-file "cube-capture.edn")

(Setup
 {:Position (Float3 40.0 5.5 40.0) :Target (Float3 0.0)} (Math.LookAt) >= .view-transform
 (GFX.View .view-transform) >= .view

 (Float3 0.0) (Math.Translation) >= .transform
 -90.0 (Math.DegreesToRadians) (Math.AxisAngleX) (Math.Rotation) >= .tmp-rot
 (Float3 30.0 30.0 1.0) (Math.Scaling) >= .tmp-scale
 .transform (Math.MatMul .tmp-rot) (Math.MatMul .tmp-scale) >= .plane-transform

 (Float3 0.0 0.0 0.0) (Math.Translation) > .transform
 45.0 (Math.DegreesToRadians) (Math.AxisAngleY) (Math.Rotation) > .tmp-rot
 (Float3 2.0) (Math.Scaling) > .tmp-scale
 .transform (Math.MatMul .tmp-rot) (Math.MatMul .tmp-scale) >= .transform-0

 (Float3 1.0 0.5 0.0) (Math.Translation) > .transform
 45.0 (Math.DegreesToRadians) (Math.AxisAngleY) (Math.Rotation) > .tmp-rot
 (Float3 1.4) (Math.Scaling) > .tmp-scale
 .transform (Math.MatMul .tmp-rot) (Math.MatMul .tmp-scale) >= .transform-1

;;  (GFX.BuiltinMesh :Type BuiltinMeshType.Plane) >= .plane-mesh
;;  {:Mesh .plane-mesh :Params {:baseColor (Float4 0.4 0.4 0.94 1.0)}} (GFX.Drawable :Transform .plane-transform) >> .drawables

 (GFX.BuiltinMesh :Type BuiltinMeshType.Sphere) >= .sphere-mesh
 {:Mesh .sphere-mesh :Params {:baseColor (Float4 0.12 0.7 0.2 1.0)}} (GFX.Drawable :Transform .transform-0) >> .drawables

 (Float3 10.0 0.0 0.0) (Math.Translation) >= .tmp-tsl
 (Float3 1.5) (Math.Scaling) > .tmp-scale
 .tmp-tsl (Math.MatMul .tmp-scale) >= .tmp-transform
 {:Mesh .sphere-mesh :Params {:baseColor (Float4 1.0 0.0 0.0 1.0)} :Transform .tmp-transform} (GFX.Drawable) >> .drawables-1

 (Float3 0.0 10.0 0.0) (Math.Translation) > .tmp-tsl
 (Float3 1.5) (Math.Scaling) > .tmp-scale
 .tmp-tsl (Math.MatMul .tmp-scale) > .tmp-transform
 {:Mesh .sphere-mesh :Params {:baseColor (Float4 0.0 1.0 0.0 1.0)} :Transform .tmp-transform} (GFX.Drawable) >> .drawables-1

 (Float3 0.0 0.0 10.0) (Math.Translation) > .tmp-tsl
 (Float3 1.5) (Math.Scaling) > .tmp-scale
 .tmp-tsl (Math.MatMul .tmp-scale) > .tmp-transform
 {:Mesh .sphere-mesh :Params {:baseColor (Float4 0.0 0.0 1.0 1.0)} :Transform .tmp-transform} (GFX.Drawable) >> .drawables-1

 (GFX.BuiltinFeature :Id BuiltinFeatureId.Transform) >> .features-1
 (GFX.BuiltinFeature :Id BuiltinFeatureId.BaseColor) >> .features-1
 (GFX.DrawQueue) >= .queue-1
 .drawables-1 (GFX.Draw .queue-1)
 {:Features .features-1 :Queue .queue-1} (GFX.DrawablePass) >= .debug-shapes-step

 (setup-skybox-pass .skybox-pass)
 .skybox-pass (Push "env-included-steps" :Global true)
 .debug-shapes-step (Push "env-included-steps" :Global true)

 (GFX.BuiltinFeature :Id BuiltinFeatureId.Transform) >> .features
 (GFX.BuiltinFeature :Id BuiltinFeatureId.BaseColor) >> .features
 (setup-reflection-feature .refl-feature .env-included-steps) >> .features

 .skybox-pass >> .render-steps
 {:Features .features} (GFX.DrawablePass) >> .render-steps ;
 .debug-shapes-step >> .render-steps ;
 )

; Update view transform
.view-transform (FreeCamera :FlySpeed 10.0) > .view-transform

.drawables (GFX.Draw)
(GFX.Render :Steps .render-steps :View .view)
