(load-file "cubemap-utils.edn")
(load-file "atmosphere.edn")
(load-file "pbr.edn")

(defshards setup-ui []
  (GFX.DrawQueue) >= .ui-queue
  (GFX.UIPass .ui-queue))
(defshards render-ui []
  .ui-queue (GFX.ClearQueue)
  (UI
   .ui-queue
   (->
    (Int 1)
    ;; (UI.Window
    ;;  :Contents
    ;;  (->
    ;;   (compute-specular-lut .lut-tex)
    ;;   "Precomputed" (UI.Label);
    ;;   .lut-tex (UI.Image :Scale (Float2 4.0))));
    )))

(Setup
 ; Sets up a queue (.sky-sphere-queue) that just draws a sphere
 (setup-shared-sky-sphere-queue)
 
 {:Position (Float3 -7.0 2.5 15.0) :Target (Float3 0.0 0.7 0.0)} (Math.LookAt)
;;  -90.0 (Math.DegreesToRadians) (Math.AxisAngleY) (Math.Rotation) >= .tmp-mat0
;;  (Float3 -50 0 0) (Math.Translation) >= .tmp-mat1
;;  .tmp-mat1 (Math.MatMul .tmp-mat0) (Math.Inverse) 
 >= .view-transform
 (GFX.View .view-transform) >= .view

 (Float3 0.0) (Math.Translation) >= .transform
 -90.0 (Math.DegreesToRadians) (Math.AxisAngleX) (Math.Rotation) >= .tmp-rot
 (Float3 30.0 30.0 1.0) (Math.Scaling) >= .tmp-scale
 .transform (Math.MatMul .tmp-rot) (Math.MatMul .tmp-scale) >= .plane-transform

 (Float3 1.0 0.5 0.0) (Math.Translation) > .transform
 45.0 (Math.DegreesToRadians) (Math.AxisAngleY) (Math.Rotation) > .tmp-rot
 (Float3 1.4) (Math.Scaling) > .tmp-scale
 .transform (Math.MatMul .tmp-rot) (Math.MatMul .tmp-scale) >= .transform-1

 (GFX.BuiltinMesh :Type BuiltinMeshType.Plane) >= .plane-mesh
 {:Mesh .plane-mesh :Params {:baseColor (Float4 0.4 0.4 0.94 1.0)}} (GFX.Drawable :Transform .plane-transform) >= .floor
 .floor >> .drawables

 (GFX.BuiltinMesh :Type BuiltinMeshType.Sphere) >= .sphere-mesh
 (Float3 -1.5 0.8 0.0) (Math.Translation) > .transform
 45.0 (Math.DegreesToRadians) (Math.AxisAngleY) (Math.Rotation) > .tmp-rot
 (Float3 1.6) (Math.Scaling) > .tmp-scale
 .transform (Math.MatMul .tmp-rot) (Math.MatMul .tmp-scale) >= .transform-0
 {:Mesh .sphere-mesh :Params {:baseColor (Float4 0.12 0.7 0.2 1.0)} :Transform .transform-0} (GFX.Drawable) >> .drawables

 (Float3 1.5 1.2 0.0) (Math.Translation) > .transform
 180.0 (Math.DegreesToRadians) (Math.AxisAngleY) (Math.Rotation) > .tmp-rot
 (Float3 4.0) (Math.Scaling) > .tmp-scale
 .transform (Math.MatMul .tmp-rot) (Math.MatMul .tmp-scale) > .transform-0
 {:Transform .transform-0} (GFX.glTF :Path "assets/mascot.glb") >> .drawables

 (GFX.DrawQueue) >= .main-queue
 .drawables (GFX.Draw .main-queue)

 ; Include floor in captured probe
 (GFX.BuiltinFeature :Id BuiltinFeatureId.Transform) >> .features-1
 (GFX.BuiltinFeature :Id BuiltinFeatureId.BaseColor) >> .features-1
 .floor >> .drawables-2
 (GFX.DrawQueue) >= .floor-queue
 .drawables-2 (GFX.Draw .floor-queue)
 {:Features .features-1 :Queue .floor-queue} (GFX.DrawablePass) >= .base-pass-no-refl

 (setup-skybox-pass) >= .skybox-pass

 .base-pass-no-refl (Push "env-included-steps" :Global true)
 .skybox-pass >> .env-included-steps

 (GFX.BuiltinFeature :Id BuiltinFeatureId.Transform)  >> .features-3
 (GFX.BuiltinFeature :Id BuiltinFeatureId.BaseColor) >> .features-3
 (setup-pbr-feature .env-included-steps) >> .features-3
 {:Features .features-3 :Queue .main-queue} (GFX.DrawablePass) >= .base-pass

 .base-pass >> .render-steps ;
 .skybox-pass >> .render-steps ;
 (setup-ui) >> .render-steps)

; Update view transform
.view-transform (FreeCamera :FlySpeed 10.0 :PanSpeed 6.0) > .view-transform

(render-ui)
(GFX.Render :Steps .render-steps :View .view)
