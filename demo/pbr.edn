(defshards shader-integrate [texture sampler base-dir body num-samples args]
  (Shader.Literal :Type ShaderLiteralType.Header :Source ["fn integrate(args: vec4<f32>, baseDir: vec3<f32>, _texture: texture_cube<f32>, _sampler: sampler) -> vec3<f32> {
	let tbn = generateFrameFromZDirection(baseDir);
	var weight = 0.0;
	var result = vec3<f32>(0.0);" "
  var sampleIndex = 0;
  loop {
    if(sampleIndex >= " num-samples ") {
      break;
    }" "
    var mci: MonteCarloInput;
		mci.baseDirection = baseDir;
		mci.coord = hammersley2d(sampleIndex, MONTECARLO_NUM_SAMPLES);
		let mco = " body ";
		let lod = getWeightedLod(mco.pdf, " num-samples ", _texture);" "
    let direction = tbn * mco.localDirection;
		let s = sampleEnvironmentLod(_texture, _sampler, direction, lod);
		result = result + s * mco.sampleScale;
		weight = weight + mco.sampleWeight;" "
    sampleIndex = sampleIndex + 1;
	}
	return result / weight;
}"])
  (Shader.Literal ["integrate(" args "," base-dir "," texture "," sampler ")"] :OutputDimension 3))

(defshards compute-specular-lut [out-name]
  (Msg "Computing specular split-sum LUT")
  {:EntryPoint (->
                (Shader.Literal :Type ShaderLiteralType.Header :Source (slurp "shaders/pbr.wgsl"))
                (Shader.ReadInput "texCoord0") >= .uv
                (Shader.Literal :OutputDimension 2 :Source ["computeLUT(" .uv ")"])
                (ToFloat2) (Shader.WriteOutput "color") ; End shader
                )}
  (GFX.EffectPass) >> .lut-steps-1
  (GFX.Texture :Format TextureFormat.RG16Float) >= out-name
  (GFX.RenderInto :Textures {:color out-name}
                  :Size (Int2 64)
                  :Contents (->
                             (GFX.Render :Steps .lut-steps-1)))
  out-name;
  )

(defshards compute-irradiance-fs []
  (Shader.Literal :Type ShaderLiteralType.Header :Source (slurp "shaders/pbr.wgsl"))
  (Shader.ReadInput "worldNormal") >= .world-normal
  (Shader.RefTexture "source") = .source-texture
  (Shader.RefSampler "source") = .source-sampler
  ;; (Float3 0.4 0.2 -0.2)
  .world-normal (Math.Abs)
  ;; (Shader.Literal ["textureSampleLevel(" .source-texture "," .source-sampler",".world-normal", 0.0)"] :OutputDimension 4)
  (Shader.ReadBuffer "roughness") (ToFloat4) = .args
  (shader-integrate .source-texture .source-sampler .world-normal "ggx(args.x, mci)" "1024" .args)
  (ToFloat4) (Math.Add (Float4 0 0 0 1))
  (Shader.WriteOutput "color"))

(defshards calc-num-mips []
  (| (Take 0) >= .dim-x) (| (Take 1) >= .dim-y)
  .dim-x (Min .dim-y) >= .dim-min
  .dim-min (ToFloat) (Math.Log2) (Math.Floor) (ToInt) ; This is up until 2x2
  )

(defwire compute-irradiance-mip
  .current-mip (Log "Computing irradiance mip level")
  .num-mips (Math.Subtract 1) (ToFloat) = .div
  .current-mip (ToFloat) (Math.Divide .div) = .roughness
  .roughness (Log "Roughness")

  {:Params [{:Name "source" :Default .cube-tex}
            {:Name "roughness" :Default .roughness}]
   :Shaders [{:Stage ProgrammableGraphicsStage.Fragment
              :EntryPoint (-> {:something "value"} >= .table
                              (Log "Hello"))}]} (Log "My table")

  ;; {:Params [{:Name "source" :Default .cube-tex}
  ;;           {:Name "roughness" :Default .roughness}]
  ;;  :Shaders [{:Stage ProgrammableGraphicsStage.Fragment
  ;;             :EntryPoint (compute-irradiance-fs)}]} (GFX.Feature) >= .filter-feature
  ;; (filter-cubemap .filter-feature .cube-tex-1 .current-mip)
  ;; .current-mip (Log "Done")
  )

(defshards generate-probes [included-steps]
  (| (Take "Queue") >= .parent-queue)
  (| (Take "View") >= .parent-view)
  (Setup (->
          (Msg "Generating pre-rendered PBR textures")
          (GFX.Texture :Format TextureFormat.RGBA8UnormSrgb :Resolution (Int2 1024) :Dimension TextureDimension.Cube) >= .cube-tex
          (render-cubemap-0 included-steps .cube-tex)

          (Int2 512) >= .size
          (Log "Cubemap dimension")
          ;; (calc-num-mips) 
          2 >= .num-mips
          (Log "Number of mip levels")
          (GFX.Texture :Format TextureFormat.RGBA8UnormSrgb :Resolution .size :MipLevels .num-mips :Dimension TextureDimension.Cube) >= .cube-tex-1
          ;; (ForRange 1 .num-mips (->
                                ;;  (Math.Subtract 1)
          0 >= .current-mip
          (Spawn compute-irradiance-mip)
                                ;;  ))

          (compute-specular-lut .specular-lut-tex);
          ))
  {:env .cube-tex-1})

(defshards setup-pbr-feature [included-steps]
  {:Params [{:Name "roughness" :Default 1.0}
            {:Name "metalicness" :Default 0.0}]
   :Shaders
   [{:Stage ProgrammableGraphicsStage.Fragment
     :After ["writeColor"]
     :Before []
     :EntryPoint
     (->
      (Shader.ReadBuffer "invView" :BufferName "view") >= .camera-matrix
      (Shader.Literal [.camera-matrix "[3].xyz"] :OutputDimension 3) >= .eye-pos
      (Shader.ReadInput "worldNormal") >= .world-normal
      (Shader.ReadInput "worldPosition") >= .world-position
      .world-position (Math.Subtract .eye-pos) (Math.Normalize) >= .incident-dir
      (Shader.Literal ["reflect(" .incident-dir "," .world-normal ")"] :OutputDimension 3) >= .reflect-dir

      (Shader.ReadBuffer "roughness") >= .roughness
      (Shader.ReadBuffer "metalicness") >= .metalicness

      (Shader.ReadGlobal "color") >= .base-color

      (Shader.Literal :Type ShaderLiteralType.Header :Source (slurp "shaders/pbr.wgsl"))
      (Shader.RefTexture "env") = .env-texture
      (Shader.RefSampler "env") = .env-sampler
      (Shader.Literal ["textureSampleLevel(" .env-texture "," .env-sampler "," .reflect-dir ", 3.0)"] :OutputDimension 4) >= .refl-color

      ;; .world-normal (Math.Multiply (Float3 1 1 -1)) (Shader.SampleTextureCoord "env") >= .refl-color
      ;; .roughness (Math.Lerp  .refl-color .base-color)
      .refl-color
      ; NOTE: Because of our coordinate space with the camera viewing -Z direction
      ;       It needs to be flipped when sampling cubemaps
      (Math.Multiply (Float4 1 1 1 0)) (Math.Add (Float4 0 0 0 1))
      (Shader.WriteOutput "color"))}]}
  (GFX.Feature :ViewGenerators (-> (generate-probes included-steps))))
