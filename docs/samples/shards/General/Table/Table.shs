; ; without key, without types, local scope, using `Push` (puts sequence values)
; ; Table(:Name tableA)
; ; tableA | Log        ;; created a table => {A: []}
1 | Push(tableA "A")
tableA | Log ; ; updated table => {A: [1]}
2 | Push(tableA "A")
tableA | Log ; ; updated table => {A: [1, 2]}

; ; with key, single type, global scope, using `Set`
Table(tableB Key: "A" Global: true Type: @type({A: Type::Float}))
tableB | Log ; ; created a table => {A: {}}
10.2 | Set(tableB "A")
tableB | Log ; ; updated table => {A: 10.2}
20.1 | Set(tableB "A")
tableB | Log ; ; updated table => {A: 20.1}

; ; with key, multiple types, local scope, using `Set`
Table(tableC Key: "A" Type: @type({A: Type::Float B: Type::Int}))
tableC | Log ; ; created a table => {A: {}}
10.3 | Set(tableC "A")
tableC | Log ; ; updated table => {A: 10.3}
20 | Set(tableC "B")
tableC | Log ; ; updated table => {B: 20, A: 10.3}

; ; with key, single type, local scope, using `Push` (puts sequence values)
; ; Table(tableD Key: "A" Type:s Type.Int)
; ; tableD | Log        ;; created a table => {A: []}
10 | Push(tableD "A")
tableD | Log ; ; updated table => {A: [10]}
20 | Push(tableD "A")
tableD | Log