; create a mutable string variable and get its value
"Hello" | Set(svar)           ; set value
Get(Name: svar) >= gotSvar    ; get value and store it
gotSvar | Log("gotten value") ; => gotten value: Hello

; create an immutable numeric variable and get its value
100 | Ref(Name: nvar)         ; set value
Get(Name: nvar) >= gotNvar    ; modify numeric variable
gotNvar | Log("gotten value") ; => gotten value: 100

; create a mutable sequence and get it
[10 20 30] | Set(sequence)
Get(sequence) | Log           ; => [10, 20, 30]

; create an empty sequence and try reading it with the :Default failsafe
[] | Set(seqEmpty)
Get(seqEmpty Default: "Void") | Log  ; => Void

; create a table and get one of its key-values pairs
["a" "b"] | Set(table Key: "key1")
Get(table Key: "key1") | Log         ; => [a, b]

; create a table and try to get a non-existent key-value using the :Default parameter
["a" "b"] | Set(table Key: "key1")
Get(table Key: "key2" Default: "Key missing") | Log  ; => "Key missing"

; Using a `Get` alias
; `??` is `OR` hence alias for `Get(Default: ...)`
; try getting a non-existent key-value again
["a" "b"] | Set(tableA Key: "key1")
Get(tableA Key: "key2") ?? "Key still missing" | Log  ; => "Key still missing"

; create mutable local/global variables and get their values
"Local" | Set(str)                    ; create local variable
"Global" | Set(str Global: true)      ; create global variable
Get(str) | Log                        ; get local variable => "Local"
Get(str Global: true) | Log           ; get global variable => "Global"
