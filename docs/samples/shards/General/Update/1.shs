; update a mutable string variable (by default available only to current wire)
"Hello" | Set(Name: svar)
svar | Log(".svar")                 ; => .svar: Hello
"World" | Update(svar)              ; modify string variable
svar | Log("modified .svar")        ; => .svar: World

; update a mutable numeric variable (available to all wires because Global: true)
100 | Set(Name: nvar Global: true)
nvar | Log(".nvar")                 ; => .nvar: 100
200 | Update(Name: nvar Global: true)  ; modify numeric variable
nvar | Log("modified .nvar")        ; => modified .nvar: 200

; update a mutable sequence (will overwrite it completely)
[10 20 30] | Set(Name: sequence)
[100] | Update(Name: sequence)
sequence | Log(".sequence")         ; => .sequence: [100]

; update a mutable table: update existing key-value pair
["a" "b"] | Set(Name: "table1" Key: "key1")
table1 | Log(".table1")             ; => .table1: {key1: [a, b]}
["def"] | Update(table1 Key: "key1")
table1 | Log(".table1")             ; => .table1: {key1: [def]}

; Using an Update alias
; > is alias for Update(...): update an existing string variable
"Hello" | Set(Name: svarA)
svarA | Log(".svarA")               ; => .svar: Hello
"World" > svarA                     ; modify string variable
svarA | Log("modified .svar")       ; => .svar: World

; create and update local/global table variables
["a" "b"] | Set(Name: "table" Key: "key1")            ; create local table
["c" "d"] | Set(Name: "table" Key: "key1" Global: true)  ; create same-name global table
Get(table) | Log                    ; local table => {key1: [a, b]}
Get(table Global: true) | Log       ; same-name global table => {key1: [c, d]}
["X"] | Update(table Key: "key1")   ; update local table
["Y"] | Update(table Key: "key1" Global: true)  ; update same-name global table
Get(table) | Log                    ; updated local table => {key1: [X]}
Get(table Global: true) | Log       ; updated same-name global table => {key1: [Y]}
