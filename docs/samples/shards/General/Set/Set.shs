; ; create a mutable string variable, modify it (by default available only to current wire)
"Hello" | Set(Name: svar)
svar | Log("svar") ; ; => svar: Hello
"World" | Update(svar) ; ; modify string variable
svar | Log("modified svar") ; ; => svar: World

; ; create a mutable numeric variable, modify it (available to all wires because `Global: true`)
100 | Set(Name: nvar Global: true)
nvar | Log("nvar") ; ; => nvar: 100
200 | Update(nvar) ; ; modify numeric variable
nvar | Log("modified nvar") ; ; => modified nvar: 200

; ; create a mutable sequence
[10 20 30] | Set(Name: sequence)
sequence | Log("sequence") ; ; => sequence: [10, 20, 30]

; ; create a mutable table
Const(["a" "b"]) | Set(Name: table Key: "key1")
table | Log("table") ; ; => table: {key1: [a, b]}

; ; add a key-value pair to existing mutable table (will generate warnings)
"def" | Set(table Key: "key2") ; ; add new key
table | Log("modified table") ; ; => modified table: {key2: def, key1: [a, b]}

; ; Using `Set` aliases

; ; `>=` is alias for `| Set(Global: false)`: create a mutable string variable
"World" >= svarA
svarA | Log("svarA") ; ; => svarA: World

; ; create and update local/global variables
"Local" | Set(str) ; ; create local variable
"Global" | Set(str Global: true) ; ; create same-name global variable
Get(str) (Log) ; ; get updated local variable => "Local"
Get(str Global: true) (Log) ; ; get same-name updated global variable => "Global"
"LocalNew" | Set(str) ; ; create local variable
"GlobalNew" | Set(str Global: true) ; ; create same-name global variable
Get(str) (Log) ; ; get updated local variable => "LocalNew"
Get(str Global: true) (Log)