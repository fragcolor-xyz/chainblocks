(defshards spin-transform [t location]
  t
  (| (Math.Multiply 0.2) (Math.AxisAngleX) (Math.Rotation) >= .rotX)
  (| (Math.Multiply 0.7) (Math.AxisAngleY) (Math.Rotation) >= .rotY)
  (| (Math.Multiply 0.9) (Math.AxisAngleZ) (Math.Rotation) >= .rotZ)
  location (Math.Translation) (Math.MatMul .rotX) (Math.MatMul .rotY) (Math.MatMul .rotZ))

(def timestep (/ 1.0 120.0))
(defloop main-wire
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     ; Keep track of the time variable
     0.0 >= .time 
     
     ; Use the built-in cube mesh and setup a drawable using the mesh
     (GFX.BuiltinMesh :Type BuiltinMeshType.Cube) >= .mesh
     (Float3 0 0 0) (Math.Translation) >= .transform
     ; NOTE: The transform is passed as a parameter so it will be dynamic
     {:Mesh .mesh :Params {:baseColor (Float4 0 1 0 1)}} (GFX.Drawable :Transform .transform) >= .drawable

     ; The queue that will contain the draw commands (just the cube)
     (GFX.DrawQueue) >= .queue

     ; Define a pass that renders the cube, with the built-in color and camera transform behaviour
     (GFX.BuiltinFeature BuiltinFeatureId.Transform) >> .features
     (GFX.BuiltinFeature  BuiltinFeatureId.BaseColor) >> .features
     {:Features .features :Queue .queue} (GFX.DrawablePass) >> .render-steps

     ; Setup the camera
     {:Position (Float3 0 0 8) :Target (Float3 0 0 0)} (Math.LookAt) >= .view-transform
     (GFX.View :View .view-transform) >= .view)

    ; Clear the queue before rendering
    .queue (GFX.ClearQueue)

    ; Rotate the cube
    .time (Math.Add timestep) > .time
    (spin-transform .time (Float3 0.0 0 0)) > .transform

    ; Add draw command to the queue
    .drawable (GFX.Draw .queue)
    
    ; Render everyghing
    (GFX.Render :View .view :Steps .render-steps))))

(defmesh root)
(schedule root main-wire)
(run root timestep 200)
