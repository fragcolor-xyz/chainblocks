if(GFX_SHADERC_SHARED_LIBRARY)
  set(LINK_TYPE SHARED)
else()
  set(LINK_TYPE STATIC)
endif()

add_library(gfx-shaderc ${LINK_TYPE}
	shaderc_module.cpp
	shaderc.cpp
)

if(${LINK_TYPE} MATCHES "SHARED")
	target_compile_definitions(gfx-shaderc PRIVATE "SHADERC_STANDALONE=1")
endif()

target_include_directories(gfx-shaderc PUBLIC ${BGFX_DIR}/tools/shaderc)
target_compile_definitions(gfx-shaderc PRIVATE "-D_CRT_SECURE_NO_WARNINGS")
target_link_libraries(gfx-shaderc bx bimg bgfx-vertexlayout bgfx-shader fcpp webgpu)

set(SHADERC_UNIVERSAL_DEFAULT ON)
if(EMSCRIPTEN)
  set(SHADERC_UNIVERSAL_DEFAULT OFF)
endif()
option(SHADERC_UNIVERSAL "Set to true to enable shader compilation for all platforms" ${SHADERC_UNIVERSAL_DEFAULT})

if(SHADERC_UNIVERSAL)
	set(SHADERC_SPIRV OFF)
	set(SHADERC_GLSL ON)
	set(SHADERC_PSSL ON)
	set(SHADERC_METAL OFF)
	set(SHADERC_HLSL ON)
elseif(EMSCRIPTEN)
	set(SHADERC_GLSL ON)
elseif(WIN32)
  set(SHADERC_HLSL ON)
elseif(APPLE)
	set(SHADERC_METAL ON)
else()
  set(SHADERC_SPIRV ON)
	set(SHADERC_GLSL ON)
endif()

if(SHADERC_SPIRV)
	target_sources(gfx-shaderc PRIVATE shaderc_spirv.cpp)
	target_link_libraries(gfx-shaderc spirv-cross spirv-tools)
	target_compile_definitions(gfx-shaderc PRIVATE SHADERC_SPIRV=1)
endif()
if(SHADERC_GLSL)
	target_sources(gfx-shaderc PRIVATE shaderc_glsl.cpp)
	target_link_libraries(gfx-shaderc glsl-optimizer glslang)
	target_compile_definitions(gfx-shaderc PRIVATE SHADERC_GLSL=1)
endif()
if(SHADERC_HLSL)
	target_sources(gfx-shaderc PRIVATE shaderc_hlsl.cpp)
	target_compile_definitions(gfx-shaderc PRIVATE SHADERC_HLSL=1)
endif()
if(SHADERC_PSSL)
	target_sources(gfx-shaderc PRIVATE shaderc_pssl.cpp)
	target_compile_definitions(gfx-shaderc PRIVATE SHADERC_PSSL=1)
endif()
if(SHADERC_METAL)
	target_sources(gfx-shaderc PRIVATE shaderc_metal.cpp)
	target_link_libraries(gfx-shaderc spirv-cross spirv-tools)
	target_compile_definitions(gfx-shaderc PRIVATE SHADERC_METAL=1)
endif()
