(def cube-layout ["position"])
(def cube
  {"Vertices"
   [(Float3 -1.0  1.0  1.0)
    (Float3  1.0  1.0  1.0)
    (Float3 -1.0 -1.0  1.0)
    (Float3  1.0 -1.0  1.0)
    (Float3 -1.0  1.0 -1.0)
    (Float3  1.0  1.0 -1.0)
    (Float3 -1.0 -1.0 -1.0)
    (Float3  1.0 -1.0 -1.0)]
   "Indices"
   [0 1 2
    1 3 2
    4 6 5
    5 6 7
    0 2 4
    4 2 6
    1 5 3
    5 7 3
    0 4 1
    4 5 1
    2 3 6
    6 3 7]})

(def timestep (/ 1.0 120.0))
(def Root (Node))
(def test-chain
  (Chain
   "test-chain"
   :Looped
   (Setup
    0.0 >= .time
    cube (GFX.Mesh :Layout cube-layout :WindingOrder WindingOrder.CW) >= .mesh

    [{:Location (Float3 -3 0 -2) :Color (Float4 1 0 0 1)}
     {:Location (Float3 0 0 -2) :Color (Float4 0 1 0 1)}]
    (Map (->
          (| (Take "Location") (Math.Translation) >= .transform)
          (| (Take "Color") >= .color)
          {:Transform .transform :Mesh .mesh :Params {:baseColor .color}} (GFX.Drawable))) >= .drawables-0

    (Float3 3 0 -2) (Math.Translation) >= .transform
    (Float4 0.2 0.4 1 1) >= .color-var
    {:Transform .transform :Mesh .mesh} (GFX.Drawable :Params {:baseColor .color-var}) >> .drawables-0

    {:Params {:baseColor (Float4 1 0 1 1)}} (GFX.Material) >= .magenta-material

    [{:Location (Float3 -3 0 2)}
     {:Location (Float3 0 0 2)}
     {:Location (Float3 3 0 2)}]
    (Map (->
          (| (Take "Location") (Math.Translation) >= .transform)
          {:Transform .transform :Mesh .mesh :Material .magenta-material} (GFX.Drawable))) >= .drawables-1

    ; Create render steps
    (GFX.BuiltinFeature :Id BuiltinFeatureId.Transform) >> .features
    (GFX.BuiltinFeature :Id BuiltinFeatureId.BaseColor) >> .features
    (GFX.DrawablePass :Features .features) >> .render-steps

    ; Create view
    {:Position (Float3 0 15 10) :Target (Float3 0 0 0)} (Math.LookAt) >= .view-transform
    (GFX.View :View .view-transform) >= .view)
   (GFX.MainWindow
    :Title "SDL Window" :Width 1280 :Height 720 :Debug false
    :Contents
    (->
     .time (Math.Add timestep) >= .time
     .time (Math.Multiply 0.9) (Math.Add 0.0) (Math.FMod 1.0) (Push "c")
     .time (Math.Multiply 1.2) (Math.Add 0.3) (Math.FMod 1.0) (Push "c")
     .time (Math.Multiply 1.4) (Math.Add 0.6) (Math.FMod 1.0) (Push "c")
     1.0 (Push "c")
     .c (ToFloat4) >= .color-var
     .drawables-0 (GFX.Draw)
     .drawables-1 (GFX.Draw)
     (GFX.Render :Steps .render-steps :View .view)))))

(schedule Root test-chain)
(run Root timestep)