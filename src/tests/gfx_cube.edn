(def cube-layout ["position", "color"])
(def cube
  {"Vertices"
   [(Float3 -1.0  1.0  1.0) (Color 0x00 0x00 0x00 0xff)
    (Float3  1.0  1.0  1.0) (Color 0x00 0x00 0xff 0xff)
    (Float3 -1.0 -1.0  1.0) (Color 0x00 0xff 0x00 0xff)
    (Float3  1.0 -1.0  1.0) (Color 0x00 0xff 0xff 0xff)
    (Float3 -1.0  1.0 -1.0) (Color 0xff 0x00 0x00 0xff)
    (Float3  1.0  1.0 -1.0) (Color 0xff 0x00 0xff 0xff)
    (Float3 -1.0 -1.0 -1.0) (Color 0xff 0xff 0x00 0xff)
    (Float3  1.0 -1.0 -1.0) (Color 0xff 0xff 0xff 0xff)]
   "Indices"
   [0 1 2
    1 3 2
    4 6 5
    5 6 7
    0 2 4
    4 2 6
    1 5 3
    5 7 3
    0 4 1
    4 5 1
    2 3 6
    6 3 7]})

(defchain create-render-steps
  (GFX.BuiltinFeature :Id BuiltinFeatureId.Transform) >> .features
  (GFX.BuiltinFeature :Id BuiltinFeatureId.BaseColor) >> .features
  (GFX.DrawablePass :Features .features) >> .render-steps
  .render-steps)

(def timestep (/ 1.0 120.0))
(def Root (Node))
(def test-chain
  (Chain
   "test-chain"
   :Looped
   (Setup
    cube (GFX.Mesh :Layout cube-layout :WindingOrder WindingOrder.CW) >= .mesh
    (Float3 0 0 0) (Math.Translation) >= .transform
    0.0 >= .time
    (GFX.Drawable :Mesh .mesh :Transform .transform) >> .drawables

    (Float3 -3.0 0 0) (Math.Translation) >= .transform1
    (GFX.Drawable :Mesh .mesh :Transform .transform1) >> .drawables

    (Float3 3.0 0 0) (Math.Translation) >= .transform2
    (GFX.Drawable :Mesh .mesh :Transform .transform2) >> .drawables

    ; Create render steps
    (Do create-render-steps) >= .render-steps

    ; Create view
    {:Position (Float3 0 10 20) :Target (Float3 0 0 0)} (Math.LookAt) >= .view-transform
    (GFX.View :View .view-transform) >= .view)
   (GFX.MainWindow
    :Title "SDL Window" :Width 1280 :Height 720 :Debug false
    :Contents
    (->
     .time (Math.Add timestep) >= .time
     .time (Math.Multiply 0.2) (Math.AxisAngleX) (Math.Rotation) >= .rotX
     .time (Math.Multiply 0.7) (Math.AxisAngleY) (Math.Rotation) >= .rotY
     .time (Math.Multiply 0.9) (Math.AxisAngleZ) (Math.Rotation) >= .rotZ
     .rotX (Math.MatMul .rotY) (Math.MatMul .rotZ) >= .transform
     .drawables (GFX.Draw)
     (GFX.Render :Steps .render-steps :View .view)))))

(schedule Root test-chain)
(run Root timestep)