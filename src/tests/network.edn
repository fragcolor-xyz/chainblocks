; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2019 Fragcolor Pte. Ltd.

(defloop handler
  (Log "Server's Peer Received")
  (When (Is "The End") (-> "" (Stop)))
  "Ok" (Network.Send))

(def network-test-server
  (Wire "server" :Looped
        (Network.Server "127.0.0.1" 9191 handler)))

(def client-init
  (Wire "init"
        "Hey server"
        (Network.Send)
        2019
        (Network.Send)
        99.9
        (Network.Send)
        (Float4 3 2 1 0)
        (Network.Send)
        (Const [1 2 3 4 5])
        (Network.Send)
        "The End" (Network.Send .peer)))

(def network-test-client
  (Wire "client" :Looped
        (Network.Client
         "127.0.0.1" 9191
         (-> ; acting as callback when there is a new pkt
          (Log "Client received"))) = .peer
                                        ; test some sending
                                        ; will send to the client in context
                                        ; which is the above
                                        ; Network.RemoteEndpoint
                                        ; are the injected variables
        (Once (Do client-init))))

(defmesh main)
(schedule main network-test-server)
(schedule main network-test-client)
(run main 0.01 100)
(def network-test-server nil)
(def network-test-client nil)
(def main nil)
