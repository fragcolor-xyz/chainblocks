(def cube-layout ["position", "color"])
(def cube
  {"Vertices"
   [(Float3 -1.0  1.0  1.0) (Color 0xff 0x00 0x00 0x00)
    (Float3  1.0  1.0  1.0) (Color 0xff 0x00 0x00 0xff)
    (Float3 -1.0 -1.0  1.0) (Color 0xff 0x00 0xff 0x00)
    (Float3  1.0 -1.0  1.0) (Color 0xff 0x00 0xff 0xff)
    (Float3 -1.0  1.0 -1.0) (Color 0xff 0xff 0x00 0x00)
    (Float3  1.0  1.0 -1.0) (Color 0xff 0xff 0x00 0xff)
    (Float3 -1.0 -1.0 -1.0) (Color 0xff 0xff 0xff 0x00)
    (Float3  1.0 -1.0 -1.0) (Color 0xff 0xff 0xff 0xff)]
   "Indices"
   [0 1 2
    1 3 2
    4 6 5
    5 6 7
    0 2 4
    4 2 6
    1 5 3
    5 7 3
    0 4 1
    4 5 1
    2 3 6
    6 3 7]})

(def Root (Node))
(def test-chain
  (Chain
   "test-chain"
   :Looped
   (GFX.MainWindow
    :Title "SDL Window" :Width 1280 :Height 720 :Debug true
    :Contents
    (-> (Setup
         cube (GFX.Mesh :Layout cube-layout) >= .mesh
         (Float3 0 0 0) (Math.Translation) >= .transform
         (GFX.Drawable :Mesh .mesh :Transform .transform) >= .drawable
         (Log "Drawable"))
        (Log "Frame")))))

(schedule Root test-chain)
(run Root (/ 1.0 120.0) 1.0)