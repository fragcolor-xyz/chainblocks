(defmesh Root)

(if (hasShard? "Http.Post")
  (do
    (defwire upload-to-ipfs
      (let [boundary "----SH-IPFS-Upload-0xC0FFEE"
            gateways ["https://ipfs.infura.io:5001"
                      "https://ipfs.komputing.org"
                      "http://hasten-ipfs.local:5001"
                      "http://127.0.0.1:5001"]]
        (->
         >= .payload
         (str "--" boundary "\r\nContent-Disposition: form-data; name=\"path\"\r\nContent-Type: application/octet-stream\r\n\r\n")
         (PrependTo .payload)
         (str "\r\n--" boundary "--")
         (AppendTo .payload)
         gateways
         (TryMany (Wire "IPFS-Upload"
                        >= .gateway
                        "/api/v0/add?pin=true" (AppendTo .gateway)
                        .payload
                        (Http.Post .gateway
                                   :Headers {"Content-Type" (str "multipart/form-data; boundary=" boundary)}))
                  :Policy WaitUntil.SomeSuccess)
         (Take 0) (FromJson) (ExpectTable)
         (Take "Hash") (ExpectString)
         (Assert.Is "QmNRCQWfgze6AbBCaT1rkrkV5tJ2aP4oTNPb5JZcXYywve" true))))

    (defwire test-ipfs
      "Hello world" (Do upload-to-ipfs) (Log "ipfs hash"))

    (schedule Root test-ipfs)
    (if (run Root 0.1) nil (throw "Root tick failed"))))
