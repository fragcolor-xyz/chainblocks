; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2021 Fragcolor Pte. Ltd.

(defnode root)

;; path definitions
(def basePath "../../docs/")
(def blocksPath "docs/blocks/")
(def detailsPath "details/blocks/")
(def samplePath "samples/blocks/")

;; computes the filename from the block name
(defn getFilename [path extension]
  (Maybe
   (->
    (Regex.Match #"(\w+)\.(.*)")
    (| (Take 1) = .first)
    (| (Take 2) = .second)
    path >= .f
    .first (AppendTo .f)
    "/" (AppendTo .f)
    .second (AppendTo .f)
    extension (AppendTo .f)
    .f (ToString))
   (->
    >= .f
    (str path "General/") (PrependTo .f)
    extension (AppendTo .f)
    .f (ToString))
   true))

;; dumps the generated content to the final file
(defn dump [name]
  (Chain
   (str "dump-" name)
   (Setup
    (info name) = .record
    (Get .record "help") = .help
    (Get .record "inputTypes") = .inputTypes
    (Get .record "inputHelp") = .inputHelp
    (Get .record "outputTypes") = .outputTypes
    (Get .record "outputHelp") = .outputHelp
    (Get .record "properties" :Default {}) = .properties
    (Get .record "parameters") = .parameters
    name (getFilename (str basePath blocksPath) ".md") = .filename
    [""] >= .o)

   ; metadata (front matter)
   "---\r\n" >> .o
   "authors: Fragcolor & contributors\r\n" >> .o
   "license: CC-BY-SA-4.0\r\n" >> .o
   "---\r\n" >> .o
   "\r\n\r\n" >> .o

   ; title
   "# " >> .o name >> .o "\r\n\r\n" >> .o

   ; experimental warning
   (When
    (-> (Get .properties "experimental" :Default false))
    (-> "--8<-- \"includes/experimental.md\"\r\n\r\n" >> .o))

   ; basic syntax
   "```clojure\r\n" >> .o
   "(" >> .o name >> .o
   (When
    (-> (Count .parameters) (IsMore 0))
    (-> "\r\n" >> .o
        .parameters
        (ForEach
         (-> (ExpectTable)
             (| (Take "name") >= .p_name)
             (| (Take "types") >= .p_types)
             "  :" >> .o .p_name >> .o " " >> .o .p_types >> .o "\r\n" >> .o))))
   ")\r\n" >> .o
   "```\r\n" >> .o

   "\r\n\r\n" >> .o

   "## Definition\r\n\r\n" >> .o
   .help  >> .o "\r\n" >> .o

   "\r\n\r\n" >> .o

   (When
    (-> (Count .parameters) (IsMore 0))
    (-> "## Parameters\r\n\r\n" >> .o
        "| Name | Type | Default | Description |\r\n" >> .o
        "|------|------|---------|-------------|\r\n" >> .o

        .parameters
        (ForEach
         (-> (ExpectTable)
             (| (Take "name") >= .p_name)
             (| (Take "types") >= .p_types)
             (| (Take "help") >= .p_help)
             (| (Take "default") >= .p_default)
             "| " >> .o .p_name >> .o
             " | `" >> .o .p_types >> .o
             "` | `" >> .o .p_default >> .o
             "` | " >> .o .p_help >> .o
             " |\r\n" >> .o))
        "\r\n\r\n" >> .o))

   "## Input\r\n\r\n" >> .o
   "| Type | Description |\r\n" >> .o
   "|------|-------------|\r\n" >> .o
   "| `" >> .o .inputTypes >> .o "` | " >> .o .inputHelp >> .o " |\r\n" >> .o

   "\r\n\r\n" >> .o

   "## Output\r\n\r\n" >> .o
   "| Type | Description |\r\n" >> .o
   "|------|-------------|\r\n" >> .o
   "| `" >> .o .outputTypes >> .o "` | " >> .o .outputHelp >> .o " |\r\n" >> .o

   "\r\n\r\n" >> .o

   ;; details (optional)
   (When
    (-> name (getFilename (str basePath detailsPath) ".md") (FS.IsFile))
    (-> "## Details\r\n\r\n" >> .o
        "--8<-- \"" >> .o name (getFilename detailsPath ".md") >> .o "\"\r\n" >> .o
        "\r\n\r\n" >> .o))

   ;; examples (optional)
   (When
    (-> name (getFilename (str basePath samplePath) "") (FS.IsDirectory))
    (->
     "## Examples\r\n\r\n" >> .o

     name (getFilename (str basePath samplePath) "") (FS.Iterate)
     (ForEach
      (-> (When
           (-> (FS.Extension) (Is ".edn"))
           (-> (| "=== \"Code\"\r\n\r\n" >> .o
                  "    ```clojure linenums=\"1\"\r\n" >> .o
                  "    --8<-- \"" >> .o name (getFilename samplePath "/") >> .o)
               (| (FS.Filename) >> .o "\"\r\n" >> .o)
               (| "    ```\r\n\r\n" >> .o
                  "=== \"Output\"\r\n\r\n" >> .o
                  "    ```\r\n" >> .o
                  "    --8<-- \"" >> .o name (getFilename samplePath "/") >> .o)
               (| (FS.Filename) >> .o ".log\"\r\n" >> .o
                  "    ```\r\n" >> .o
                  "&nbsp;\r\n\r\n" >> .o)))))))

   "--8<-- \"includes/license.md\"\r\n" >> .o

   .o (String.Join) = .content
   .filename (FS.Write .content :Overwrite true)
   (Msg "done.")))

;; execution
; strings are compressed by default, need to unpack if we use info
(decompress-strings)
(map
 (fn* [name] (schedule root (dump name)))
 (blocks))
;; (schedule root (dump "Assoc"))
(run root)
