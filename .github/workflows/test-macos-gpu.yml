name: Test (MacOS/GPU)

on:
  workflow_dispatch:
    inputs:
      build-type:
        description: Build in Release or Debug?
        required: true
        default: Debug
        type: choice
        options:
          - Debug
          - Release
      clean-workspace:
        description: Remove the workspace folder before checking out?
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      build-type:
        required: true
        default: Debug
        type: string
      clean-workspace:
        required: false
        default: false
        type: boolean

jobs:
  #
  # Build shards for macos
  #
  MacOS:
    name: Test (${{ github.event.inputs.build-type || inputs.build-type }})
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - name: Setup
        id: setup
        run: |
          echo "build-type=${{ github.event.inputs.build-type || inputs.build-type }}" >> $GITHUB_OUTPUT
          echo "GFX_ANY_ADAPTER=1" >> $GITHUB_ENV
      - name: Clean workspace
        if: ${{ github.event.inputs.clean-workspace == 'true' || inputs.clean-workspace == 'true' }}
        run: |
          rm -rf $GITHUB_WORKSPACE
          mkdir $GITHUB_WORKSPACE
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 2
          submodules: recursive
      - name: Set up dependencies
        run: |
          ./bootstrap
      - name: Build
        run: |
          cmake -Bbuild -G Ninja -DUSE_UBSAN=1 -DCODE_COVERAGE=1 -DCMAKE_BUILD_TYPE=${{ steps.setup.outputs.build-type }}
          cmake --build build --target shards test-gfx
      - name: Checkout glTF-Sample-Assets
        uses: actions/checkout@v3
        with:
          repository: shards-lang/glTF-Sample-Assets
          path: external/glTF-Sample-Assets
          fetch-depth: 1
      - name: Test (GPU)
        env:
          RUST_BACKTRACE: full
        run: |
          set -e
          export DISPLAY=:1
          Xvfb "$DISPLAY" &

          export LOG_GFX=debug

          echo "Running graphics library tests"
          build/test-gfx -r JUnit --out test-gfx.xml

          echo "\n"
          echo "Running graphics test scripts"
          for i in $(find shards/tests -maxdepth 1 -name 'gfx*.shs');
          do
            echo "Running $i"
            build/shards new "$i"
          done
          for i in $(find shards/tests -maxdepth 1 -name 'gfx*.shs');
          do
            echo "Running $i"
            build/shards new "$i"
          done

          echo "\n"
          echo "Running graphics test scripts"
          for i in $(find shards/tests -maxdepth 1 -name 'gfx*.edn');
          do
            echo "Running $i"
            build/shards "$i"
          done

          echo "Running input test"
          build/shards new shards/tests/input.shs

          echo "Running UI"
          build/shards new shards/tests/ui-0.shs
          build/shards new shards/tests/ui-1.shs
          build/shards new shards/tests/ui-2.shs

          echo "Running UI (nested)"
          build/shards new shards/tests/ui-nested.shs

          echo "Running egui demo"
          build/shards new shards/tests/egui-demo.shs

          echo "Running egui plot"
          build/shards new shards/tests/egui-plot.shs

          echo "Running ui-drag-and-drop"
          build/shards new shards/tests/ui-drag-and-drop.shs

          echo "Running ui-selectable-drag"
          build/shards new shards/tests/ui-selectable-drag.shs

          echo "Running ml test"
          build/shards new shards/tests/ml.shs

          echo "Running Stack overflow test"
          LOG_shards=trace build/shards new shards/tests/fib.shs

          echo "Running ML embeddings test"
          build/shards new lib/ml/test.shs
      - name: Test Physics
        env:
          RUST_BACKTRACE: full
        run: |
          set -e
          export DISPLAY=:1
          Xvfb "$DISPLAY" &

          echo "Running physics"
          build/shards new shards/tests/physics.shs
      - name: Test doc samples (GFX)
        env:
          RUST_BACKTRACE: full
        run: |
          set -e
          export DISPLAY=:1
          Xvfb "$DISPLAY" &

          cd docs/samples
          for i in $(find shards -name '*.edn' \( -path '*UI*' -or -path '*GFX*' \));
          do
            echo "Running sample $i";
            ../../build/shards run-sample.edn --looped true --file "$i";
          done
          for i in $(find shards -name '*.shs' \( -path '*UI*' -or -path '*GFX*' \));
          do
            echo "Running sample $i";
            ../../build/shards new run-sample.shs file:"$i";
          done
      - name: Coverage (Debug)
        if: ${{ steps.setup.outputs.build-type == 'Debug' }}
        run: |
          mkdir coverage
          # capture
          lcov \
            --capture \
            --directory build/src \
            --directory build/modules \
            --output-file coverage/coverage.info \
            --ignore-errors inconsistent,gcov,range
          # remove external dependencies
          lcov \
            --remove coverage/coverage.info "*/c++/*" "*/boost/*" "*/usr/*" "*/deps/*" "*/shards/mal/*" \
            --output-file coverage/coverage-macos-gpu.info \
            --ignore-errors inconsistent,gcov,range
          # convert absolute path to relative path
          sed -i '' -e "s#${PWD}/#./#g" coverage/coverage-macos-gpu.info
      - name: Upload coverage (Debug)
        if: ${{ steps.setup.outputs.build-type == 'Debug' }}
        uses: actions/upload-artifact@v3
        with:
          name: shards-macos-gpu-coverage
          path: |
            coverage/coverage-macos-gpu.info
          if-no-files-found: error
          retention-days: 1
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: shards-macos-gpu rejected test data
          path: |
            test-gfx.xml
            shards/gfx/tests/data/default/rejected
          if-no-files-found: ignore
          retention-days: 1
