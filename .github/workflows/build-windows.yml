name: Build (Windows)

on:
  workflow_dispatch:
    inputs:
      bitness:
        description: Build for 32-bit or 64-bit?
        required: true
        default: 64bits
        type: choice
        options:
          - 32bits
          - 64bits
      build-type:
        description: Build in Release or Debug?
        required: true
        default: Debug
        type: choice
        options:
          - Debug
          - Release
      binary-type:
        description: Executable or dynamic library?
        required: false
        default: Exe
        type: choice
        options:
          - Exe
          - Library
      runtime-tests:
        description: Run the runtime tests (Debug only)?
        required: false
        default: false
        type: boolean
      run-tests:
        description: Run the tests?
        required: false
        default: false
        type: boolean
      rust-cache:
        description: Use existing rust cache?
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      bitness:
        required: true
        default: 64bits
        type: string
      build-type:
        required: true
        default: Debug
        type: string
      binary-type:
        required: false
        default: Exe
        type: string
      runtime-tests:
        required: false
        default: false
        type: boolean
      run-tests:
        required: false
        default: false
        type: boolean
      rust-cache:
        required: false
        default: true
        type: boolean

jobs:
  #
  # Build shards for Windows
  #
  Windows:
    name: Build (${{ github.event.inputs.binary-type || inputs.binary-type }}, ${{ github.event.inputs.build-type || inputs.build-type }}, ${{ github.event.inputs.bitness || inputs.bitness }})
    runs-on: windows-latest
    outputs:
      binary-type: ${{ steps.setup.outputs.binary-type }}
      run-tests: ${{ steps.setup.outputs.run-tests }}
    steps:
      - name: Setup
        id: setup
        shell: bash
        run: |
          echo "bitness=${{ github.event.inputs.bitness || inputs.bitness }}" >> $GITHUB_OUTPUT
          echo "build-type=${{ github.event.inputs.build-type || inputs.build-type }}" >> $GITHUB_OUTPUT
          echo "binary-type=${{ github.event.inputs.binary-type || inputs.binary-type }}" >> $GITHUB_OUTPUT
          echo "run-tests=${{ github.event.inputs.run-tests || inputs.run-tests }}" >> $GITHUB_OUTPUT
          echo "runtime-tests=${{ github.event.inputs.runtime-tests || inputs.runtime-tests }}" >> $GITHUB_OUTPUT
          echo "rust-cache=${{ github.event.inputs.rust-cache || inputs.rust-cache }}" >> $GITHUB_OUTPUT

          if [ "${{ github.event.inputs.binary-type || inputs.binary-type }}" == "Exe" ]
          then
            echo "build-target=shards" >> $GITHUB_OUTPUT
            echo "artifact-path=build/shards.exe" >> $GITHUB_OUTPUT
          else
            echo "build-target=shards-dll" >> $GITHUB_OUTPUT
            echo "artifact-path=build/libshards.dll" >> $GITHUB_OUTPUT
          fi

          if [ "${{ github.event.inputs.bitness || inputs.bitness }}" == "64bits" ]
          then
            echo "msystem=MINGW64" >> $GITHUB_OUTPUT
            echo "arch=x86_64" >> $GITHUB_OUTPUT
            if [ "${{ github.event.inputs.binary-type || inputs.binary-type }}" == "Exe" ]
            then
              echo "artifact=shards-win64" >> $GITHUB_OUTPUT
            else
              echo "artifact=libshards-win64" >> $GITHUB_OUTPUT
            fi
          else
            echo "msystem=MINGW32" >> $GITHUB_OUTPUT
            echo "arch=i686" >> $GITHUB_OUTPUT
            if [ "${{ github.event.inputs.binary-type || inputs.binary-type }}" == "Exe" ]
            then
              echo "artifact=shards-win32" >> $GITHUB_OUTPUT
            else
              echo "artifact=libshards-win32" >> $GITHUB_OUTPUT
            fi
          fi
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: recursive
      - name: Set up rust
        env:
          RUSTUP_USE_CURL: 1
        run: |
          rustup toolchain install --no-self-update nightly
          rustup +nightly target add ${{ steps.setup.outputs.arch }}-pc-windows-gnu
          rustup default nightly-${{ steps.setup.outputs.arch }}-pc-windows-gnu
      - name: Set up rust (32-bits)
        if: ${{ steps.setup.outputs.bitness == '32bits' }}
        env:
          RUSTUP_USE_CURL: 1
        shell: bash
        run: |
          # Native libClang required for rust bindgen
          # choco exit with code 1 after successful install
          choco install -y --force llvm || exit 0
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" >> $GITHUB_ENV
      - uses: Swatinem/rust-cache@v2
        if: ${{ steps.setup.outputs.rust-cache == 'true' }}
        with:
          key: ${{ steps.setup.outputs.build-type }}
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ steps.setup.outputs.msystem }}
          release: false
          path-type: inherit
          install: >-
            base-devel
            mingw-w64-${{ steps.setup.outputs.arch }}-toolchain
            mingw-w64-${{ steps.setup.outputs.arch }}-cmake
            mingw-w64-${{ steps.setup.outputs.arch }}-ninja
            mingw-w64-${{ steps.setup.outputs.arch }}-clang
            mingw-w64-${{ steps.setup.outputs.arch }}-lld
            wget
      - name: Build libtrace (64bits)
        if: ${{ steps.setup.outputs.bitness == '64bits' }}
        shell: msys2 {0}
        run: |
          cd deps/libbacktrace
          mkdir build
          ./configure --prefix=`pwd`/build
          make && make install
      - name: Build
        env:
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          ./bootstrap
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ steps.setup.outputs.build-type }} -DUSE_LIBBACKTRACE=${{ steps.setup.outputs.bitness == '64bits' }} ..
          ninja ${{ steps.setup.outputs.build-target }}
      - name: Test runtime (Debug)
        if: ${{ steps.setup.outputs.runtime-tests == 'true' && steps.setup.outputs.build-type == 'Debug' }}
        env:
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          cd build
          ninja test-runtime
          ./test-runtime
      - name: Checkout glTF-Sample-Models
        # Match with test step below
        if: ${{ steps.setup.outputs.runtime-tests == 'true' && steps.setup.outputs.build-type == 'Debug' && steps.setup.outputs.bitness == '64bits' }}
        uses: actions/checkout@v3
        with:
          repository: KhronosGroup/glTF-Sample-Models
          path: external/glTF-Sample-Models
          fetch-depth: 1
      - name: Test graphics (Debug)
        # NOTE: Graphics backend doesn't run on 32bits
        if: ${{ steps.setup.outputs.runtime-tests == 'true' && steps.setup.outputs.build-type == 'Debug' && steps.setup.outputs.bitness == '64bits' }}
        env:
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          cd build
          ninja test-gfx
          GFX_BACKEND=D3D12 ./test-gfx
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.setup.outputs.artifact }} ${{ steps.setup.outputs.build-type }}
          path: ${{ steps.setup.outputs.artifact-path }}
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ steps.setup.outputs.artifact }} rejected test data
          path: src/gfx/tests/data/default/rejected
          if-no-files-found: ignore

  #
  # Test shards for Windows
  #
  Windows-test:
    if: ${{ needs.Windows.outputs.run-tests == 'true' && needs.Windows.outputs.binary-type == 'Exe' }}
    needs: Windows
    name: Test
    runs-on: windows-latest
    steps:
      - name: Setup
        id: setup
        shell: bash
        run: |
          echo "bitness=${{ github.event.inputs.bitness || inputs.bitness }}" >> $GITHUB_OUTPUT
          echo "build-type=${{ github.event.inputs.build-type || inputs.build-type }}" >> $GITHUB_OUTPUT

          if [ "${{ github.event.inputs.bitness || inputs.bitness }}" == "64bits" ]
          then
            echo "msystem=MINGW64" >> $GITHUB_OUTPUT
            echo "arch=x86_64" >> $GITHUB_OUTPUT
            echo "artifact=shards-win64" >> $GITHUB_OUTPUT
          else
            echo "msystem=MINGW32" >> $GITHUB_OUTPUT
            echo "arch=i686" >> $GITHUB_OUTPUT
            echo "artifact=shards-win32" >> $GITHUB_OUTPUT
          fi
      - name: Change git line endings
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: true
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.setup.outputs.artifact }} ${{ steps.setup.outputs.build-type }}
          path: build
      - name: Set up MSYS2 (Release)
        if: ${{ steps.setup.outputs.build-type == 'Release' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ steps.setup.outputs.msystem }}
          release: false
          path-type: inherit
      - name: Set up MSYS2 (Debug)
        if: ${{ steps.setup.outputs.build-type == 'Debug' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ steps.setup.outputs.msystem }}
          release: false
          path-type: inherit
          install: >-
            base-devel
            mingw-w64-${{ steps.setup.outputs.arch }}-toolchain
      - name: Test
        env:
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          cd build
          echo "Running test: general"
          ./shards ../src/tests/general.edn
          echo "Running test: variables"
          ./shards ../src/tests/variables.clj
          echo "Running test: linalg"
          ./shards ../src/tests/linalg.clj
          echo "Running test: loader"
          ./shards ../src/tests/loader.clj
          echo "Running test: network"
          ./shards ../src/tests/network.clj
          echo "Running test: struct"
          ./shards ../src/tests/struct.clj
          echo "Running test: flows"
          ./shards ../src/tests/flows.edn
          echo "Running test: kdtree"
          ./shards ../src/tests/kdtree.clj
          echo "Running test: channels"
          ./shards ../src/tests/channels.clj
          echo "Running test: http"
          ./shards ../src/tests/http.clj
          echo "Running test: brotli"
          ./shards ../src/tests/brotli.clj
          echo "Running test: snappy"
          ./shards ../src/tests/snappy.clj
          # echo "Running test: ws"
          # ./shards ../src/tests/ws.edn
          echo "Running test: bigint"
          ./shards ../src/tests/bigint.clj
          echo "Running test: wasm"
          ./shards ../src/tests/wasm.clj
          echo "Running test: eth"
          ./shards ../src/tests/eth.edn
          echo "Running test: crypto"
          ./shards ../src/tests/crypto.edn
      - name: Test doc samples (non-UI)
        env:
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          cd docs/samples
          for i in $(find shards -name '*.edn' \( ! -path '*UI*' ! -path '*GFX*' \));
          do
            echo "Running sample $i";
            ../../build/shards.exe run-sample.edn --file "$i";
          done
      - name: Test doc samples (GFX)
        # NOTE: Graphics backend doesn't run on 32bits
        if: ${{ steps.setup.outputs.bitness == '64bits' }}
        env:
          GFX_BACKEND: D3D12
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          cd docs/samples
          for i in $(find shards -name '*.edn' \( -path '*UI*' -or -path '*GFX*' \));
          do
            echo "Running sample $i";
            ../../build/shards.exe run-sample.edn --looped true --file "$i";
          done
      - name: Graphics Test (64bits)
        # NOTE: Graphics backend doesn't run on 32bits
        if: ${{ steps.setup.outputs.bitness == '64bits' }}
        env:
          GFX_BACKEND: D3D12
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          cd build
          echo "Running test: gfx_window"
          ./shards ../src/tests/gfx-window.edn
          echo "Running test: gfx_cube"
          ./shards ../src/tests/gfx-cube.edn
          echo "Running test: gfx_materials"
          ./shards ../src/tests/gfx-materials.edn
          echo "Running test: ui"
          ./shards ../src/tests/ui-0.edn
          ./shards ../src/tests/ui-1.edn
          echo "Running test: egui_demo"
          ./shards ../src/tests/egui-demo.edn
          echo "Running test: egui-plot"
          ./shards ../src/tests/egui-plot.edn
      - name: Physics Test (64bits)
        # NOTE: Graphics backend doesn't run on 32bits
        if: ${{ steps.setup.outputs.bitness == '64bits' }}
        env:
          GFX_BACKEND: D3D12
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          cd build
          echo "Running test: physics"
          ./shards ../src/tests/physics.edn
      - name: Test (64bits)
        if: ${{ steps.setup.outputs.bitness == '64bits' }}
        env:
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          cd build
          echo "Running test: genetic"
          ./shards ../src/tests/genetic.clj
          echo "Running test: time"
          ./shards ../src/tests/time.edn
          echo "Running test: subwires"
          ./shards ../src/tests/subwires.clj
