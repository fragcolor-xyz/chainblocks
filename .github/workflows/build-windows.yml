name: Build (Windows 64-bit)

on:
  workflow_dispatch:
    inputs:
      build-type:
        description: Build in Release or Debug?
        required: true
        default: Debug
        type: choice
        options:
          - Debug
          - Release
          - Release optimized
      binary-type:
        description: Executable or dynamic library?
        required: false
        default: Exe
        type: choice
        options:
          - Exe
          - Library
      runtime-tests:
        description: Run the runtime tests (Debug only)?
        required: false
        default: false
        type: boolean
      run-tests:
        description: Run the tests?
        required: false
        default: false
        type: boolean
      rust-cache:
        description: Use existing rust cache?
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      build-type:
        required: true
        default: Debug
        type: string
      binary-type:
        required: false
        default: Exe
        type: string
      runtime-tests:
        required: false
        default: false
        type: boolean
      run-tests:
        required: false
        default: false
        type: boolean
      rust-cache:
        required: false
        default: true
        type: boolean

jobs:
  #
  # Build shards for Windows
  #
  Windows:
    name: Build (${{ github.event.inputs.binary-type || inputs.binary-type }}, ${{ github.event.inputs.build-type || inputs.build-type }}, 64-bit)
    runs-on: windows-latest
    outputs:
      binary-type: ${{ steps.setup.outputs.binary-type }}
      run-tests: ${{ steps.setup.outputs.run-tests }}
      artifact-name: ${{ steps.setup.outputs.artifact }} ${{ steps.setup.outputs.build-type }}
    steps:
      - name: Setup
        id: setup
        shell: bash
        run: |
          if [ "${{ github.event.inputs.build-type || inputs.build-type }}" == "Release optimized" ]
          then
            echo "build-type=Release" >> $GITHUB_OUTPUT
            echo "optimized=true" >> $GITHUB_OUTPUT
          else
            echo "build-type=${{ github.event.inputs.build-type || inputs.build-type }}" >> $GITHUB_OUTPUT
            echo "optimized=false" >> $GITHUB_OUTPUT
          fi
          echo "binary-type=${{ github.event.inputs.binary-type || inputs.binary-type }}" >> $GITHUB_OUTPUT
          echo "run-tests=${{ github.event.inputs.run-tests || inputs.run-tests }}" >> $GITHUB_OUTPUT
          echo "runtime-tests=${{ github.event.inputs.runtime-tests || inputs.runtime-tests }}" >> $GITHUB_OUTPUT
          echo "rust-cache=${{ github.event.inputs.rust-cache || inputs.rust-cache }}" >> $GITHUB_OUTPUT

          if [ "${{ github.event.inputs.binary-type || inputs.binary-type }}" == "Exe" ]
          then
            echo "build-target=shards" >> $GITHUB_OUTPUT
            echo "artifact-path=build/shards.*" >> $GITHUB_OUTPUT
          else
            echo "build-target=shards-dll" >> $GITHUB_OUTPUT
            echo "artifact-path=build/libshards.*" >> $GITHUB_OUTPUT
          fi

          if [ "${{ github.event.inputs.binary-type || inputs.binary-type }}" == "Exe" ]
          then
            echo "artifact=shards-win64" >> $GITHUB_OUTPUT
          else
            echo "artifact=libshards-win64" >> $GITHUB_OUTPUT
          fi
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: recursive
      - name: Set up rust
        shell: bash
        env:
          RUSTUP_USE_CURL: 1
        run: |
          RUSTUP_TOOLCHAIN=`cat rust.version`-msvc
          echo "RUSTUP_TOOLCHAIN=$RUSTUP_TOOLCHAIN" >> $GITHUB_ENV
          rustup toolchain install $RUSTUP_TOOLCHAIN
      - uses: Swatinem/rust-cache@v2
        if: ${{ steps.setup.outputs.rust-cache == 'true' }}
        with:
          key: ${{ steps.setup.outputs.build-type }}
      - name: Set up dev dependencies
        shell: bash
        run: |
          choco install -y --force --version=18.1.6 llvm
          choco install -y cmake ninja
      - name: Build
        env:
          RUST_BACKTRACE: full
        shell: bash
        run: |
          ./bootstrap
          mkdir build
          cd build
          cmake -G Ninja \
            -DSKIP_HEAVY_INLINE=${{ steps.setup.outputs.optimized == 'false' }} \
            "-DCMAKE_C_COMPILER:FILEPATH=C:\Program Files\LLVM\bin\clang.exe" \
            "-DCMAKE_CXX_COMPILER:FILEPATH=C:\Program Files\LLVM\bin\clang++.exe" \
            "-DRUST_DEFAULT_TARGET_PATH=C:\shards-rust-target" \
            -DCMAKE_BUILD_TYPE=${{ steps.setup.outputs.build-type }} ..
          echo "Building shards"
          ninja ${{ steps.setup.outputs.build-target }}

          if [ "${{ steps.setup.outputs.runtime-tests }}" == "true" ]
          then
            echo "Building runtime tests"
            ninja test-runtime
            echo "Building graphics tests"
            ninja test-gfx
          fi
      # Minimize disk usage to prevent the next steps getting stuck on glTF models
      - name: Minimize disk usage
        env:
          RUST_BACKTRACE: full
        shell: bash
        run: |
          rm -rf build/src
          rm -rf build/modules
          rm -rf build/lib
          rm -rf build/deps
          rm -rf build/_deps
          rm -rf build/.cache
      - name: Test runtime (Debug)
        if: ${{ steps.setup.outputs.runtime-tests == 'true' && steps.setup.outputs.build-type == 'Debug' }}
        env:
          RUST_BACKTRACE: full
        shell: bash
        run: |
          cd build
          ./test-runtime
      - name: Checkout glTF-Sample-Assets
        # Match with test step below
        if: ${{ steps.setup.outputs.runtime-tests == 'true' && steps.setup.outputs.build-type == 'Debug' }}
        uses: actions/checkout@v3
        with:
          repository: shards-lang/glTF-Sample-Assets
          path: external/glTF-Sample-Assets
          fetch-depth: 1
      - name: Test graphics (Debug)
        if: ${{ steps.setup.outputs.runtime-tests == 'true' && steps.setup.outputs.build-type == 'Debug' }}
        env:
          RUST_BACKTRACE: full
        shell: bash
        run: |
          cd build
          SHARDS_GFX_BACKEND=D3D12 ./test-gfx
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.setup.outputs.artifact }} ${{ steps.setup.outputs.build-type }}
          path: ${{ steps.setup.outputs.artifact-path }}
          if-no-files-found: error
          retention-days: 1
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ steps.setup.outputs.artifact }} rejected test data
          path: shards/gfx/tests/data/default/rejected
          if-no-files-found: ignore
          retention-days: 1

  #
  # Test shards for Windows
  #
  Windows-test:
    if: ${{ needs.Windows.outputs.run-tests == 'true' && needs.Windows.outputs.binary-type == 'Exe' }}
    needs: Windows
    name: Test
    runs-on: windows-latest
    steps:
      - name: Setup
        id: setup
        shell: bash
        run: |
          echo "build-type=${{ github.event.inputs.build-type || inputs.build-type }}" >> $GITHUB_OUTPUT
      - name: Change git line endings
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: true
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.Windows.outputs.artifact-name }}
          path: build
      - name: Test
        env:
          RUST_BACKTRACE: full
        shell: bash
        run: |
          cd build
          ./shards new ../shards/tests/hello.shs
          echo "Running general"
          ./shards new ../shards/tests/general.shs
          echo "Running zip-map"
          ./shards new ../shards/tests/zip-map.shs
          echo "Running strings"
          ./shards new ../shards/tests/strings.shs
          echo "Running variables"
          ./shards new ../shards/tests/variables.shs
          echo "Running linalg"
          ./shards new ../shards/tests/linalg.shs
          echo "Running network"
          ./shards new ../shards/tests/network.shs
          echo "Running network-ws"
          ./shards new ../shards/tests/network-ws.shs
          echo "Running struct"
          ./shards new ../shards/tests/struct.shs
          echo "Running flows"
          ./shards new ../shards/tests/flows.shs
          echo "Running kdtree"
          ./shards new ../shards/tests/kdtree.shs
          echo "Running channels"
          ./shards new ../shards/tests/channels.shs
          echo "Running http"
          ./shards new ../shards/tests/http.shs
          echo "Running brotli"
          ./shards new ../shards/tests/brotli.shs
          echo "Running snappy"
          ./shards new ../shards/tests/snappy.shs
          echo "Running expect-like"
          ./shards new ../shards/tests/expect.shs
          # echo "Running ws"
          # ./shards ../shards/tests/ws.edn
          echo "Running bigint"
          ./shards new ../shards/tests/bigint.shs
          echo "Running wasm"
          ./shards new ../shards/tests/wasm.shs
          echo "Running crypto"
          ./shards new ../shards/tests/crypto.shs
          echo "Running complex-deserialize"
          ./shards new ../shards/tests/complex-deserialize.shs
          echo "Running suspend-resume"
          ./shards new ../shards/tests/suspend-resume.shs
          echo "Running help"
          ./shards new ../shards/tests/help.shs
          echo "Running when-done"
          ./shards new ../shards/tests/whendone.shs
          echo "Running table-seq-push"
          ./shards new ../shards/tests/table-seq-push.shs
          echo "Running traits"
          ./shards new ../shards/tests/traits.shs
      - name: Test doc samples (non-UI)
        env:
          RUST_BACKTRACE: full
        shell: bash
        run: |
          cd docs/samples
          for i in $(find shards -name '*.edn' \( ! -path '*UI*' ! -path '*GFX*' ! -path '*Dialog*' \));
          do
            echo "Running sample $i";
            ../../build/shards.exe run-sample.edn --file "$i";
          done
      - name: Test doc samples (GFX)
        env:
          SHARDS_GFX_BACKEND: D3D12
          RUST_BACKTRACE: full
        shell: bash
        run: |
          cd docs/samples
          for i in $(find shards -name '*.edn' \( -path '*UI*' -or -path '*GFX*' \));
          do
            echo "Running sample $i";
            ../../build/shards.exe run-sample.edn --looped true --file "$i";
          done
          for i in $(find shards -name '*.shs' \( -path '*UI*' -or -path '*GFX*' \));
          do
            echo "Running sample $i";
            ../../build/shards.exe new run-sample.shs file:"$i";
          done
      - name: Graphics Test
        env:
          SHARDS_GFX_BACKEND: D3D12
          RUST_BACKTRACE: full
        shell: bash
        run: |
          echo "Running test: gfx_window"
          build/shards new shards/tests/gfx-window.shs
          echo "Running test: gfx_cube"
          build/shards new shards/tests/gfx-cube.shs
          echo "Running test: gfx_materials"
          build/shards new shards/tests/gfx-materials.shs


          echo "Running input test"
          build/shards new shards/tests/input.shs

          echo "Running test: ui"
          build/shards new shards/tests/ui-0.shs
          build/shards new shards/tests/ui-1.shs
          build/shards new shards/tests/ui-2.shs

          echo "Running UI (nested)"
          build/shards new shards/tests/ui-nested.shs

          echo "Running egui_demo"
          build/shards new shards/tests/egui-demo.shs

          echo "Running egui-plot"
          build/shards new shards/tests/egui-plot.shs

          echo "Running ui-drag-and-drop"
          build/shards new shards/tests/ui-drag-and-drop.shs


          echo "Running ui-selectable-drag"
          build/shards new shards/tests/ui-selectable-drag.shs
      - name: Physics Test
        env:
          SHARDS_GFX_BACKEND: D3D12
          RUST_BACKTRACE: full
        shell: bash
        run: |
          echo "Running physics"
          build/shards new shards/tests/physics.shs
      - name: Test
        env:
          RUST_BACKTRACE: full
        shell: bash
        run: |
          cd build
          echo "Running genetic"
          SH_IGNORE_CONSISTENT_RESUMER= ./shards new ../shards/tests/genetic.shs
          echo "Running subwires"
          ./shards new ../shards/tests/subwires.shs
