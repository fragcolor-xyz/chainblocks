name: Build (Linux)

on:
  workflow_dispatch:
    inputs:
      build-type:
        description: Build in Release or Debug?
        required: true
        default: Debug
        type: choice
        options:
          - Debug
          - Release
      run-tests:
        description: Run the tests?
        required: false
        default: false
        type: boolean
      rust-cache:
        description: Use existing rust cache?
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      build-type:
        required: true
        default: Debug
        type: string
      run-tests:
        required: false
        default: false
        type: boolean
      rust-cache:
        required: false
        default: true
        type: boolean

# Required for <compare> and <=> support
env:
  CC: gcc-11
  CXX: g++-11

jobs:
  #
  # Build shards for linux
  #
  Linux:
    name: Build (${{ github.event.inputs.build-type || inputs.build-type }})
    runs-on: ubuntu-22.04
    outputs:
      build-type: ${{ steps.setup.outputs.build-type }}
      run-tests: ${{ steps.setup.outputs.run-tests }}
      rust-cache: ${{ steps.setup.outputs.rust-cache }}
    steps:
      - name: Setup
        id: setup
        run: |
          echo "build-type=${{ github.event.inputs.build-type || inputs.build-type }}" >> $GITHUB_OUTPUT
          echo "run-tests=${{ github.event.inputs.run-tests || inputs.run-tests }}" >> $GITHUB_OUTPUT
          echo "rust-cache=${{ github.event.inputs.rust-cache || inputs.rust-cache }}" >> $GITHUB_OUTPUT
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: recursive
      - name: Set up dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install build-essential git cmake wget clang ninja-build xorg-dev libdbus-1-dev libssl-dev mesa-utils
          ./bootstrap
          rustup toolchain install nightly
          rustup default nightly
      - uses: Swatinem/rust-cache@v2
        if: ${{ steps.setup.outputs.rust-cache == 'true' }}
        with:
          key: ${{ steps.setup.outputs.build-type }}
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ steps.setup.outputs.build-type }} ..
          ninja shards
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: shards-linux ${{ steps.setup.outputs.build-type }}
          path: build/shards
          if-no-files-found: error

  #
  # Test and coverage on linux
  #
  Linux-test:
    if: ${{ needs.Linux.outputs.run-tests == 'true' }}
    needs: Linux
    name: Test
    runs-on: ubuntu-22.04
    steps:
      - name: Setup
        id: setup
        run: |
          if [ "${{ needs.Linux.outputs.build-type }}" == "Debug" ]
          then
            echo "submodules=recursive" >> $GITHUB_OUTPUT
          else
            echo "submodules=false" >> $GITHUB_OUTPUT
          fi
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 2
          submodules: ${{ steps.setup.outputs.submodules }}
      - name: Download artifact (Release)
        if: ${{ needs.Linux.outputs.build-type == 'Release' }}
        uses: actions/download-artifact@v3
        with:
          name: shards-linux ${{ needs.Linux.outputs.build-type }}
          path: build
      - name: Set up dependencies (Debug)
        if: ${{ needs.Linux.outputs.build-type == 'Debug' }}
        run: |
          sudo apt-get -y update
          sudo apt-get -y install build-essential git cmake wget clang ninja-build xorg-dev libdbus-1-dev libssl-dev lcov mesa-utils
          ./bootstrap
          rustup toolchain install nightly
          rustup default nightly
      - uses: Swatinem/rust-cache@v2
        if: ${{ needs.Linux.outputs.rust-cache == 'true' && needs.Linux.outputs.build-type == 'Debug' }}
        with:
          key: ${{ needs.Linux.outputs.build-type }}
      - name: Build (Debug)
        if: ${{ needs.Linux.outputs.build-type == 'Debug' }}
        run: |
          if [ ! -d ./build ]
          then
            mkdir build
          fi
          cd build

          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=1 -DSHARDS_BUILD_TESTS=1 ..

          ninja shards
          ninja test-runtime
      - name: Test
        env:
          RUST_BACKTRACE: 1
        run: |
          cd build
          chmod +x shards
          ./shards ../src/tests/general.edn
          ./shards ../src/tests/variables.clj
          ./shards ../src/tests/subwires.clj
          ./shards ../src/tests/linalg.clj
          ./shards ../src/tests/loader.clj
          ./shards ../src/tests/network.clj
          ./shards ../src/tests/struct.clj
          ./shards ../src/tests/flows.edn
          ./shards ../src/tests/kdtree.clj
          ./shards ../src/tests/channels.clj
          ./shards ../src/tests/genetic.clj
          ./shards ../src/tests/imaging.clj
          ./shards ../src/tests/http.clj
          # ./shards ../src/tests/ws.edn
          ./shards ../src/tests/bigint.clj
          ./shards ../src/tests/brotli.clj
          ./shards ../src/tests/snappy.clj
          ./shards ../src/tests/failures.clj
          ./shards ../src/tests/wasm.clj
          ./shards ../src/tests/shell.clj
          ./shards ../src/tests/rust.clj
          ./shards ../src/tests/crypto.edn
          ./shards ../src/tests/wire-macro.edn
          ./shards ../src/tests/edn.edn
          ./shards ../src/tests/const-vars.edn
          ./shards ../src/tests/branch.edn
          ./shards ../src/tests/audio.edn
          ./shards ../src/tests/time.edn
          ./shards ../src/tests/eth.edn
          ./shards ../src/tests/take.edn
          ./shards ../src/tests/casting-numbers.edn
          ./shards ../src/tests/edn.edn
          ./shards ../src/tests/pure.edn
      - name: Test (Debug)
        # Test that only works in Debug build go there
        if: ${{ needs.Linux.outputs.build-type == 'Debug' }}
        env:
          RUST_BACKTRACE: 1
        run: |
          cd build
          ./shards ../src/tests/shards.clj
      - name: Test doc samples (non-UI)
        env:
          RUST_BACKTRACE: 1
        run: |
          cd docs/samples
          for i in $(find shards -name '*.edn' ! -path '*UI*');
          do
            echo "Running sample $i";
            ../../build/shards run-sample.edn --file "$i";
          done
      - name: Test runtime (Debug)
        if: ${{ needs.Linux.outputs.build-type == 'Debug' }}
        env:
          RUST_BACKTRACE: 1
        run: |
          cd build
          ./test-runtime
      - name: Collect coverage (Debug)
        if: ${{ needs.Linux.outputs.build-type == 'Debug' }}
        run: |
          mkdir coverage
          # capture
          lcov \
            --capture \
            --directory build/src \
            --output-file coverage/coverage.info
          # remove external dependencies
          lcov \
            --remove coverage/coverage.info "*/c++/*" "*/boost/*" "*/usr/*" "*/deps/*" "*/src/mal/*" \
            --output-file coverage/coverage.linux.info
          # convert absolute path to relative path
          sed -i s/${PWD////\\/}/./g coverage/coverage.linux.info
      - name: Upload coverage (Debug)
        if: ${{ needs.Linux.outputs.build-type == 'Debug' }}
        uses: actions/upload-artifact@v3
        with:
          name: shards-linux-coverage
          path: coverage/coverage.linux.info
          if-no-files-found: error
