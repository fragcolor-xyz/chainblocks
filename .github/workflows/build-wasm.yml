name: Build (Wasm)

on:
  workflow_dispatch:
  workflow_call:
jobs:
  wasm32-emscripten:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout shards
        uses: actions/checkout@v4
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: recursive
      - name: Checkout emsdk
        uses: actions/checkout@v4
        with:
          repository: emscripten-core/emsdk
          path: emsdk
          fetch-depth: 1
      # - name: Download shards artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: shards-linux Release
      #     path: build_host
      - name: Download shards
        run: |
          mkdir -p build_host
          wget -O build_host/shards https://develop.fragcolor.com/shards-linux-release
      - name: Make shards executable
        run: |
          # Shards interpreter
          chmod +x ./build_host/shards
          echo "shards=$(pwd)/build_host/shards" >> $GITHUB_ENV
      # If we ever need custom emscripten fork again
      # - name: Checkout emscripten fork
      #   uses: actions/checkout@v4
      #   with:
      #     repository: guusw/emscripten
      #     path: emscripten
      #     fetch-depth: 1
      #     ref: <branch_name>
      - name: Set up dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install build-essential git cmake wget ninja-build
          ./bootstrap
          RUSTUP_TOOLCHAIN=`cat rust.version`
          echo "RUSTUP_TOOLCHAIN=$RUSTUP_TOOLCHAIN" >> $GITHUB_ENV
          rustup toolchain install $RUSTUP_TOOLCHAIN
          rustup +$RUSTUP_TOOLCHAIN target add wasm32-unknown-emscripten

          which ninja

          # Use the prebuilt SDK tools/binaries (MAKE SURE VERSION IS COMPATIBLE)
          pushd emsdk
          ./emsdk install 4.0.1
          ./emsdk activate 4.0.1
          source ./emsdk_env.sh
          cat ./.emscripten
          export EM_CONFIG=$PWD/.emscripten
          echo "EM_CONFIG=$EM_CONFIG" >> $GITHUB_ENV
          popd

          which ninja

      # - name: Set up emscripten fork
      #   run: |
      #     # Use custom fork for js/scripts (this is picked up by the cmake script)
      #     # If we ever need custom emscripten fork again: UNCOMMENT THIS
      #     pushd emscripten
      #     # Needed for rust-cc
      #     echo "AR=$PWD/emar" >> $GITHUB_ENV
      #     echo "CC=$PWD/emcc" >> $GITHUB_ENV
      #     echo "EMSCRIPTEN_ROOT=$PWD" >> $GITHUB_ENV
      #     ./bootstrap
      #     popd
      - name: Set up rust
        run: |
          rustup +nightly component add rust-src
      - name: Build
        run: |
          which ninja

          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DSKIP_HEAVY_INLINE=1 -DUSE_LTO=0 -DRUST_USE_LTO=0 -DEMSCRIPTEN_PTHREADS=ON -DCMAKE_TOOLCHAIN_FILE=$EMSCRIPTEN_ROOT/cmake/Modules/Platform/Emscripten.cmake
          cmake --build shards --target shards

          echo "SHARDS_BUILD=$(pwd)/build" >> $GITHUB_ENV

          which ninja
      # Node LTS v16.15.0 freezes during exit on the st build, using version 18 works
      - uses: actions/setup-node@v3
        with:
          # Node 18.1.0 has a change in fetch() that causes it to fail loading the wasm module
          node-version: 18.0.0
      - name: Test
        run: |
          pushd shards/tests/web

          npm install
          npx puppeteer browsers install chrome@latest 

          # Spawn the test server
          ./run_server

          source shards/tests/web/shared

          function queue_test() {
            control action:run data:shards/tests/$1
          }
          queue_test gfx-cube.shs
          queue_test gfx-texture.shs
          queue_test gfx-gltf.shs
          queue_test gfx-gltf-anim.shs
          queue_test gfx-shader-translator-0.shs
          queue_test gfx-shader-translator-1.shs
          queue_test gfx-shader-translator-2.shs
          queue_test gfx-shader-translator-3.shs
          queue_test gfx-shader-translator-4.shs
          queue_test gfx-queue.shs
          queue_test gfx-read-texture.shs
          queue_test gfx-pbr.shs
          queue_test ui-1.shs
          queue_test general.shs
          control action:shutdown

          # Run the browser, it will automatically terminate on success
          node shards/tests/web/run_browser.js

      - name: Package build artifacts
        run: |
          # Copy distribution symbols
          pushd $SHARDS_BUILD
          mkdir dist
          cp shards-mt.wasm dist/
          cp shards-mt.js dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shards-wasm ${{ steps.setup.outputs.threading }}
          path: |
            build/dist/
          if-no-files-found: error
          retention-days: 1
