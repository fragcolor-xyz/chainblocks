name: Build (Wasm)

on:
  workflow_dispatch:
    inputs:
      threading:
        description: Single or multi-threading?
        required: true
        default: st
        type: choice
        options:
          - st
          - mt
      run-tests:
        description: Run the tests?
        required: false
        default: false
        type: boolean
      rust-cache:
        description: Use existing rust cache?
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      threading:
        required: true
        default: st
        type: string
      run-tests:
        required: false
        default: false
        type: boolean
      rust-cache:
        required: false
        default: true
        type: boolean

jobs:
  #
  # Build shards for emscripten
  #
  wasm32-emscripten:
    name: Build (${{ github.event.inputs.threading || inputs.threading }})
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        id: setup
        shell: bash
        run: |
          echo "threading=${{ github.event.inputs.threading || inputs.threading }}" >> $GITHUB_OUTPUT
          echo "run-tests=${{ github.event.inputs.run-tests || inputs.run-tests }}" >> $GITHUB_OUTPUT
          echo "rust-cache=${{ github.event.inputs.rust-cache || inputs.rust-cache }}" >> $GITHUB_OUTPUT
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: recursive
      - name: Checkout emsdk
        uses: actions/checkout@v3
        with:
          repository: emscripten-core/emsdk
          path: emsdk
          fetch-depth: 1
      - name: Set up dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install build-essential git cmake wget ninja-build
          ./bootstrap
          RUSTUP_TOOLCHAIN=`cat rust.version`
          echo "RUSTUP_TOOLCHAIN=$RUSTUP_TOOLCHAIN" >> $GITHUB_ENV
          rustup toolchain install $RUSTUP_TOOLCHAIN
          rustup +$RUSTUP_TOOLCHAIN target add wasm32-unknown-emscripten
          cd emsdk
          ./emsdk install 3.1.31
          ./emsdk activate 3.1.31
      - name: Set up rust (mt)
        if: ${{ steps.setup.outputs.run-tests == 'true' && steps.setup.outputs.threading == 'mt' }}
        run: |
          rustup +nightly component add rust-src
      - uses: Swatinem/rust-cache@v2
        if: ${{ steps.setup.outputs.rust-cache == 'true' }}
        with:
          key: ${{ steps.setup.outputs.threading }}
      - name: Build
        run: |
          source emsdk/emsdk_env.sh
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DNODEJS=1 -DSKIP_HEAVY_INLINE=1 -DUSE_LTO=0 -DRUST_USE_LTO=0 -DEMSCRIPTEN_PTHREADS=${{ steps.setup.outputs.threading == 'mt' }} -DEMSCRIPTEN_IDBFS=1 -DCMAKE_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake ..
          ninja shards && ninja test-runtime
      # Node LTS v16.15.0 freezes during exit on the st build, using version 18 works
      - uses: actions/setup-node@v3
        with:
          # Node 18.1.0 has a change in fetch() that causes it to fail loading the wasm module
          node-version: 18.0.0
      - name: Test (st)
        if: ${{ steps.setup.outputs.run-tests == 'true' && steps.setup.outputs.threading == 'st' }}
        run: |
          cd build
          node ../shards/tests/test-shards.js shards-st.js || [[ $? == 143 ]] || exit
          node ../shards/tests/test-runtime.js || [[ $? == 143 ]] || exit
          mkdir shards
          cp shards-st.wasm shards/
          cp shards-st.js shards/
      - name: Test (mt)
        if: ${{ steps.setup.outputs.threading == 'mt' }}
        run: |
          cd build
          node --experimental-wasm-threads ../shards/tests/test-shards.js shards-mt.js || [[ $? == 143 ]] || exit
          node --experimental-wasm-threads ../shards/tests/test-runtime.js || [[ $? == 143 ]] || exit
          mkdir shards
          cp shards-mt.wasm shards/
          cp shards-mt.js shards/
          cp shards-mt.worker.js shards/
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: shards-wasm ${{ steps.setup.outputs.threading }}
          path: |
            build/shards/
          if-no-files-found: error
      # - name: Upload shards to IPFS
      #   uses: shards-lang/ipfs-action@master
      #   if: ${{ github.event_name == 'push' }}
      #   with:
      #     path: build/shards/
      #     service: infura
      #     port: 5001
      #     protocol: https
