name: Documentation

on:
  workflow_dispatch:

jobs:

  #
  # Build chainblocks for Windows
  #
  Windows:
    runs-on: windows-latest
    strategy:
      matrix:
        build-type: ["Release"]
        bitness: [64bits]
        include:
          - bitness: 64bits
            msystem: MINGW64
            arch: x86_64
            artifact: cbl-win64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Set up rust
        env:
          RUSTUP_USE_CURL: 1
        run: |
          rustup update
          rustup default stable-${{ matrix.arch }}-pc-windows-gnu
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          release: false
          path-type: inherit
          install: >-
            base-devel
            mingw-w64-${{ matrix.arch }}-toolchain
            mingw-w64-${{ matrix.arch }}-cmake
            mingw-w64-${{ matrix.arch }}-boost
            mingw-w64-${{ matrix.arch }}-ninja
            mingw-w64-${{ matrix.arch }}-clang
            mingw-w64-${{ matrix.arch }}-lld
            wget
      - name: Build
        env:
          RUST_BACKTRACE: 1
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ..
          ninja rust_blocks && ninja cbl
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact }} ${{ matrix.build-type }}
          path: build/cbl.exe
          if-no-files-found: error

  #
  # Run blocks documentation samples
  #
  docs-samples:
    needs: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: cbl-win64 Release
          path: docs\samples
      - name: Run samples
        shell: pwsh
        run: |
          cd docs\samples
          dir blocks -recurse -include *.edn | %{
            echo ("Running sample " + ($_ | Resolve-Path -Relative))
            .\cbl.exe .\run_sample.edn --file $_.FullName
          }

  #
  # Generate blocks documentation (markdown)
  #
  docs-markdown:
    needs: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: cbl-win64 Release
      - name: Generate markdown
        shell: bash
        run: ./cbl.exe src/tests/infos_docs.edn
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docs-markdown
          path: |
            docs/docs/blocks/**/*.md
            !docs/docs/blocks/index.md
          if-no-files-found: error

  #
  # Build documentation website
  #
  docs-website-build:
    needs: docs-markdown
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install mkdocs
        run: pip install mkdocs-material
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docs-markdown
          path: docs/docs/blocks
      - name: Build website
        run: |
          cd docs
          mkdocs build
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docs-website
          path: |
            docs/site/
          if-no-files-found: error

  #
  # Publish documentation website to IPFS
  #
  docs-website-publish:
    if: ${{ github.event_name != 'pull_request' }}
    needs: docs-website-build
    runs-on: ubuntu-latest
    steps:
      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install ipfs-car
        run: |
          npm install -g ipfs-car
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docs-website
          path: docs/site
      - name: Publish to NFT storage
        run: |
          ipfs-car --pack docs/site --output chainblocks-docs.car
          curl -X POST https://api.nft.storage/upload \
               --data-binary @chainblocks-docs.car \
               -H "Authorization: Bearer ${{ secrets.NFT_STORAGE_KEY }}" \
               -H "Content-Type: application/car" \
               > response.json
          cat response.json
          if [ $(cat response.json | jq .ok) != "true" ]; then exit 1; fi
      - name: Set IPFS CID
        id: set_ipfs_cid
        run: |
          echo "::set-output name=ipfs_cid::$(cat response.json | jq .value.cid)"
      - name: Sync Cloudflare
        run: |
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/440ac84707c532c2e51fcb56dfccef22/dns_records/96d9b2a2e44b3bcabb158bd3ad0446f7" \
               -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_DNS_EDIT_API }}" \
               -H "Content-Type: application/json" \
               -d "{ \"type\": \"TXT\", \"name\": \"_dnslink.docs.fragcolor.xyz\", \"content\": \"dnslink=/ipfs/${{ steps.set_ipfs_cid.outputs.ipfs_cid }}/site\", \"ttl\": 1 }" \
               > response.json
          cat response.json
          if [ $(cat response.json | jq .success) != "true" ]; then exit 1; fi
