name: Build (macOS)

on:
  workflow_dispatch:
    inputs:
      build-type:
        description: build in release or debug
        required: true
        default: Debug
        type: choice
        options:
          - Debug
          - Release
      runtime-tests:
        description: Run the runtime tests?
        required: true
        default: false
        type: boolean
      run-tests:
        description: Run the tests?
        required: false
        default: false
        type: boolean
      rust-cache:
        description: Use existing rust cache?
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      build-type:
        required: true
        default: Debug
        type: string
      runtime-tests:
        required: true
        default: false
        type: boolean
      run-tests:
        required: false
        default: false
        type: boolean
      rust-cache:
        required: false
        default: true
        type: boolean

jobs:
  #
  # Build shards for macOS
  #
  macOS:
    name: Build (${{ github.event.inputs.build-type || inputs.build-type }})
    runs-on: macos-latest
    outputs:
      run-tests: ${{ steps.setup.outputs.run-tests }}
      artifact-name: shards-macos ${{ steps.setup.outputs.build-type }}
    steps:
      - name: Setup
        id: setup
        shell: bash
        run: |
          echo "build-type=${{ github.event.inputs.build-type || inputs.build-type }}" >> $GITHUB_OUTPUT
          echo "runtime-tests=${{ github.event.inputs.runtime-tests || inputs.runtime-tests }}" >> $GITHUB_OUTPUT
          echo "run-tests=${{ github.event.inputs.run-tests || inputs.run-tests }}" >> $GITHUB_OUTPUT
          echo "rust-cache=${{ github.event.inputs.rust-cache || inputs.rust-cache }}" >> $GITHUB_OUTPUT
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: recursive
      - name: Set up dependencies
        run: |
          sudo xcode-select --switch /Applications/Xcode.app
          brew install cmake ninja clang-format
          ./bootstrap
          RUSTUP_TOOLCHAIN=`cat rust.version`
          echo "RUSTUP_TOOLCHAIN=$RUSTUP_TOOLCHAIN" >> $GITHUB_ENV
          rustup toolchain install $RUSTUP_TOOLCHAIN
      - uses: Swatinem/rust-cache@v2
        if: ${{ steps.setup.outputs.rust-cache == 'true' }}
        with:
          key: ${{ steps.setup.outputs.build-type }}
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DARCH=native -DSPDLOG_ACTIVE_LEVEL="SPDLOG_LEVEL_DEBUG" -DSHARDS_DEFAULT_LOG_LEVEL="SPDLOG_LEVEL_DEBUG" -DSKIP_HEAVY_INLINE=1 -DCMAKE_BUILD_TYPE=${{ steps.setup.outputs.build-type }} -DUSE_UBSAN=ON -DTRACY_ENABLE=ON -DTRACY_TIMER_FALLBACK=ON ..
          ninja shards
      - name: Test runtime (Debug)
        if: ${{ steps.setup.outputs.runtime-tests == 'true' && steps.setup.outputs.build-type == 'Debug' }}
        env:
          RUST_BACKTRACE: full
        run: |
          cd build
          ninja test-runtime
          ./test-runtime
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: shards-macos ${{ steps.setup.outputs.build-type }}
          path: build/shards
          if-no-files-found: error

  #
  # Test shards on macOS
  #
  macOS-test:
    if: ${{ needs.macOS.outputs.run-tests == 'true' }}
    needs: macOS
    name: Test
    runs-on: macos-latest
    steps:
      - name: Setup
        id: setup
        run: |
          echo "build-type=${{ github.event.inputs.build-type || inputs.build-type }}" >> $GITHUB_OUTPUT
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: true
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.macOS.outputs.artifact-name }}
          path: build
      - name: Test
        env:
          RUST_BACKTRACE: full
        run: |
          cd build
          chmod +x shards
          ./shards new ../shards/tests/general.shs
          ./shards new ../shards/tests/table-compose.shs
          ./shards ../shards/tests/variables.edn
          ./shards new ../shards/tests/subwires.shs
          ./shards new ../shards/tests/linalg.shs
          ./shards ../shards/tests/loader.clj
          ./shards new ../shards/tests/network.shs
          ./shards new ../shards/tests/struct.shs
          ./shards new ../shards/tests/flows.shs
          ./shards ../shards/tests/kdtree.clj
          ./shards new ../shards/tests/channels.shs
          ./shards new ../shards/tests/imaging.shs
          ./shards new ../shards/tests/http.shs
          # ./shards ../shards/tests/ws.edn
          ./shards new ../shards/tests/bigint.shs
          ./shards new ../shards/tests/brotli.shs
          ./shards new ../shards/tests/snappy.shs
          ./shards new ../shards/tests/expect.shs
          ./shards ../shards/tests/wasm.clj
          ./shards ../shards/tests/infos.clj
          ./shards ../shards/tests/rust.clj
          ./shards new ../shards/tests/crypto.shs
          ./shards ../shards/tests/wire-macro.edn
          ./shards new ../shards/tests/branch.shs
          ./shards new ../shards/tests/audio.shs test-device:true
          ./shards ../shards/tests/time.edn
          ./shards new ../shards/tests/eth.shs
          ./shards ../shards/tests/many.edn
          ./shards new ../shards/tests/events.shs
          ./shards new ../shards/tests/complex-deserialize.shs
          ./shards new ../shards/tests/db.shs
          ./shards new ../shards/tests/suspend-resume.shs
      - name: Test doc samples (non-UI)
        env:
          RUST_BACKTRACE: full
        run: |
          cd docs/samples
          for i in $(find shards -name '*.edn' \( ! -path '*UI*' ! -path '*GFX*' ! -path '*Dialog*' \));
          do
            echo "Running sample $i";
            ../../build/shards run-sample.edn --file "$i";
          done
