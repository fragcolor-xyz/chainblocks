name: Build (Linux Valgrind)

on:
  workflow_dispatch:
  workflow_call:

jobs:
  #
  # Build shards and run valgrind on Linux
  #
  Linux-valgrind:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: recursive
      - name: Set up dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install build-essential git cmake wget clang ninja-build xorg-dev libdbus-1-dev libssl-dev lcov mesa-utils libgtk-3-dev valgrind
          RUSTUP_TOOLCHAIN=`cat rust.version`
          echo "RUSTUP_TOOLCHAIN=$RUSTUP_TOOLCHAIN" >> $GITHUB_ENV
          rustup toolchain install $RUSTUP_TOOLCHAIN
          ./bootstrap
      - name: Build and Test
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DUSE_VALGRIND=1 -DSHARDS_WITH_EXTRA_SHARDS=OFF -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
          ninja shards
          ninja test-runtime
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/hello.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/bug1.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/general.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/strings.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/table-compose.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/variables.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/flows.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/linalg.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/return.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/kdtree.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/channels.shs
          SH_IGNORE_CONSISTENT_RESUMER= valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/genetic.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/wasm.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/subwires.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/const-vars.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards ../shards/tests/wires-embed-issue.edn
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/network.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/network-ws.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/capture-logs.shs
          valgrind --exit-on-first-error=no --error-exitcode=1 --fair-sched=yes --leak-check=full ./test-runtime
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/complex-deserialize.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/table-seq-push.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/traits.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/help.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/fib.shs
      
      - name: Fetch and send logs of the previous step on failure
        if: failure()
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          LOG_ACCESS_TOKEN: ${{ secrets.LOG_ACCESS_TOKEN }}
        run: |
          echo "Installing jq for JSON parsing."
          sudo apt-get install -y jq

          echo "Downloading build logs artifact."
          mkdir artifacts
          curl -s -H "Authorization: Bearer $LOG_ACCESS_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            -o artifacts.json

          ARTIFACT_URL=$(jq -r '.artifacts[] | select(.name=="build-log") | .archive_download_url' artifacts.json)

          if [ -z "$ARTIFACT_URL" ]; then
            echo "Failed to find build-log artifact."
            exit 1
          fi

          echo "Downloading artifact from $ARTIFACT_URL"
          curl -L -H "Authorization: Bearer $LOG_ACCESS_TOKEN" "$ARTIFACT_URL" -o build-log.zip

          echo "Unzipping build-log.zip"
          unzip -o build-log.zip -d artifacts

          if [ ! -f artifacts/build.log ]; then
            echo "build.log not found in the artifact."
            exit 1
          fi

          echo "Reading build.log"
          BUILD_LOG=$(cat artifacts/build.log)

          echo "Truncating log if it's too long."
          MAX_LENGTH=50000
          if [ ${#BUILD_LOG} -gt $MAX_LENGTH ]; then
            BUILD_LOG=$(echo "$BUILD_LOG" | cut -c 1-$MAX_LENGTH)
          fi

          echo "Preparing messages for DeepSeek API."
          SYSTEM_PROMPT="You are a helpful assistant that analyzes CI build logs to find errors, summarize them, and propose solutions if confident."
          USER_MESSAGE="Here are the CI build logs from the failed step (truncated if too long):\n\n$BUILD_LOG"

          echo "Sending logs to DeepSeek API for analysis."
          RESPONSE=$(curl -s https://api.deepseek.com/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DEEPSEEK_API_KEY" \
            -d @- <<EOF
          {
            "model": "deepseek-chat",
            "messages": [
              {"role": "system", "content": "$SYSTEM_PROMPT"},
              {"role": "user", "content": "$USER_MESSAGE"}
            ],
            "stream": false
          }
          EOF
          )

          echo "Parsing DeepSeek response."
          ASSISTANT_REPLY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "No response from DeepSeek."')

          echo -e "## DeepSeek Analysis:\n$ASSISTANT_REPLY"
