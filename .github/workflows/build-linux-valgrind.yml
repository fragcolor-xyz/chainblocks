name: Build (Linux Valgrind)

on:
  workflow_dispatch:
  workflow_call:

jobs:
  #
  # Build shards and run valgrind on Linux
  #
  Linux-valgrind:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout shards
        uses: actions/checkout@v3
        with:
          repository: fragcolor-xyz/shards
          fetch-depth: 1
          submodules: recursive
      - name: Set up dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install build-essential git cmake wget clang ninja-build xorg-dev libdbus-1-dev libssl-dev lcov mesa-utils libgtk-3-dev valgrind
          RUSTUP_TOOLCHAIN=`cat rust.version`
          echo "RUSTUP_TOOLCHAIN=$RUSTUP_TOOLCHAIN" >> $GITHUB_ENV
          rustup toolchain install $RUSTUP_TOOLCHAIN
          ./bootstrap
      - name: Build and Test
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DUSE_VALGRIND=1 -DSHARDS_WITH_EXTRA_SHARDS=OFF -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
          ninja shards
          ninja test-runtime
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/hello.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/bug1.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/general.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/strings.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/table-compose.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/variables.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/flows.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/linalg.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/return.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/kdtree.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/channels.shs
          SH_IGNORE_CONSISTENT_RESUMER= valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/genetic.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/wasm.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/subwires.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/const-vars.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards ../shards/tests/wires-embed-issue.edn
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/network.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/network-ws.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/capture-logs.shs
          valgrind --exit-on-first-error=no --error-exitcode=1 --fair-sched=yes --leak-check=full ./test-runtime
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/complex-deserialize.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/table-seq-push.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/traits.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/help.shs
          valgrind --exit-on-first-error=yes --error-exitcode=1 --fair-sched=yes ./shards new ../shards/tests/fib.shs
      
      - name: Fetch and send GitHub Actions logs on failure
        if: failure()
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          LOG_ACCESS_TOKEN: ${{ secrets.LOG_ACCESS_TOKEN }}
        run: |
          echo "Fetching logs of the last failed step from GitHub Actions API."
          RUN_ID=${{ github.run_id }}
          JOB_ID=${{ github.job }}
          
          # Fetch the jobs associated with the current run
          JOBS_JSON=$(curl -s -H "Authorization: Bearer $LOG_ACCESS_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${RUN_ID}/jobs)
          
          # Identify the failed step
          FAILED_STEP_NAME=$(echo "$JOBS_JSON" | jq -r --arg JOB_NAME "$JOB_ID" '
            .jobs[] | select(.status == "failure") | .steps[] | select(.conclusion == "failure") | .name
          ')

          if [ -z "$FAILED_STEP_NAME" ]; then
            echo "No failed step found."
            exit 1
          fi

          echo "Failed Step: $FAILED_STEP_NAME"

          # Extract the output of the failed step
          FAILED_STEP_LOG=$(echo "$JOBS_JSON" | jq -r --arg JOB_NAME "$JOB_ID" --arg STEP_NAME "$FAILED_STEP_NAME" '
            .jobs[] | select(.id == ($JOB_NAME | tonumber)) | .steps[] | select(.name == $STEP_NAME) | .output || .name
          ')

          if [ -z "$FAILED_STEP_LOG" ]; then
            echo "Failed step logs not found."
            exit 1
          fi

          echo "Preparing to send logs to DeepSeek API."

          # Prepare the system prompt and user message
          SYSTEM_PROMPT="You are a helpful assistant that analyzes CI build logs to find errors, summarize them, and propose solutions if confident."
          USER_MESSAGE="Here are the CI build logs from the failed step '$FAILED_STEP_NAME':\n\n$FAILED_STEP_LOG"
          
          # Send logs to DeepSeek API
          RESPONSE=$(curl -s https://api.deepseek.com/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DEEPSEEK_API_KEY" \
            -d @- <<EOF
          {
            "model": "deepseek-chat",
            "messages": [
              {"role": "system", "content": "${SYSTEM_PROMPT}"},
              {"role": "user", "content": "${USER_MESSAGE}"}
            ],
            "stream": false
          }
          EOF
          )
          
          # Extract the assistant's reply
          ASSISTANT_REPLY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          
          # Print the assistant's reply to the GitHub Actions log
          echo -e "## DeepSeek Analysis:\n$ASSISTANT_REPLY"
