@wire(process-color {
  ToFloat3 = normalizedColor
  normalizedColor | Take(0) | Math.Divide(255.0) = r
  normalizedColor | Take(1) | Math.Divide(255.0) = g
  normalizedColor | Take(2) | Math.Divide(255.0) = b

  ; Calculate gray value
  0.2126 | Mul(r) | Add((0.7152 | Mul(g))) | Add((0.0722 | Mul(b))) = gray

  ; Desaturate and lighten each channel
  r | Sub(gray) | Mul(0.3) | Add(gray) | Mul(0.8) | Add(0.2) = newR
  g | Sub(gray) | Mul(0.3) | Add(gray) | Mul(0.8) | Add(0.2) = newG
  b | Sub(gray) | Mul(0.3) | Add(gray) | Mul(0.8) | Add(0.2) = newB

  ; Convert back to RGB format
  @f3(newR newG newB) | Math.Multiply(255.0) | ToColor = newColor
})

@wire(document-shard {
  = name
  Shards.Help = help
  name | Hash.XXH-64 | BytesToInts | Slice(0 3) | ToInt3 | Do(process-color) | Update(help "color")
  [name help]
})

@wire(document-enum {
  = enum-id
  Shards.EnumTypeHelp = help
  help:name | ExpectString = name
  name | Hash.XXH-64 | BytesToInts | Slice(0 4) | ToInt3 | Do(process-color) | Update(help "color")
  [name help enum-id]
})

; process documentation in parallel

Shards.Enumerate | TryMany(document-shard Threads: 4) = shards-docs
Remove(shards-docs Predicate: IsNone)
Table(shards)
shards-docs | ForEach({
  {Take(0) | ExpectString = shard-name}
  {Take(1) | Update(shards shard-name)}
})

Shards.EnumTypes | TryMany(document-enum Threads: 4) = enums-docs
Remove(enums-docs Predicate: IsNone)
Table(enums)
enums-docs | ForEach({
  {Take(0) | ExpectString = enum-name}
  {Take(1) | Update(enums enum-name)}
})
Table(enums-from-ids)
enums-docs | ForEach({
  {Take(2) | ExpectInt = enum-id}
  {Take(1) | Update(enums-from-ids enum-id)}
})

; Shards.ObjectTypes | TryMany(document-object Threads: 4) = object-docs
; Remove(object-docs Predicate: IsNone)

{
  shards: shards
  enums: enums
  enums-from-ids: enums-from-ids
  types: {}
}
