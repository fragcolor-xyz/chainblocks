@mesh(root)

@template(get-view-transform [eye target] {
  { eye {Take(0) = ex} {Take(1) = ey} {Take(2) = ez}
    @f4(ex ey ez 1.0) >= arm-pos }
  Math.AxisAngleY | Math.Rotation | Math.MatMul(arm-pos) | ToFloat3 >= arm-pos-3
  {Position: arm-pos-3 Target: target} | Math.LookAt
})

@define(default-setup {
  0.0 >= time

  ;; Render steps
  GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> features
  GFX.BuiltinFeature(Id: BuiltinFeatureId::BaseColor) >> features
  GFX.DrawQueue() >= queue
  GFX.DrawablePass(Features: features Queue: queue) >> render-steps

  ;; Create view
  Math.MatIdentity >= view-transform
  GFX.View(View: view-transform) >= view
})

@template(default-window [eye target] {
  GFX.MainWindow(
   Title: "SDL Window" Width: 1280 Height: 720 
   Contents: {
    Animation.Timer = time
    @get-view-transform(eye target) > view-transform

    drawables | GFX.Draw(queue)
    GFX.Render(Steps: render-steps View: view)
  })
})

@wire(test-params {
  Once({
    @default-setup

    @f3(0 0 0) Math.Translation >= t1
    {
      transform: t1 
      materials: {
        "2256_Avocado_d": {
          params: {
            baseColor: @f4(0.0 1.0 0.0 1.0)
          }
        }
      }
    } GFX.glTF(Path: "../../external/glTF-Sample-Models/2.0/Avocado/glTF-Binary/Avocado.glb") >= avocado-a
    avocado-a >> drawables
  })

  @default-window(@f3(0.2 0.2 0.2) @f3(0 0.025 0))
} Looped: true)
@schedule(root test-params)
@run(root FPS: 60 Iterations: 100)

@wire(test-transform-override {
  Once({
    @default-setup

    @f3(0 0 0) Math.Translation >= t1
    @f3(0 0 0) Math.Translation >= tzero
    0.7 | Math.AxisAngleX = rx
    {
      ["Armature" "Bone" "Bone.001"]: {
        rotation: rx
        scale: @f3(1.3 1.3 0.8)
        translation: @f3(0 0 4) 
      }
      materials: {
        "Material_001-effect": {
          params: {
            baseColor: @f4(0.4 1.0 1.0 1.0)
          }
        }
      }
    } GFX.glTF(Path: "../../external/glTF-Sample-Models/2.0/RiggedSimple/glTF-Draco/RiggedSimple.gltf") >> drawables

    @f3(1 0 0) Math.Translation >= t2
    {
      transform: t2
      ["Armature" "Bone" "Bone.001"]: {
        transform: tzero 
      }
      ["Armature" "Cylinder"]: {
        params: {
          baseColor: @f4(1.0 0.0 1.0 1.0)
        }
      }
    } GFX.glTF(Path: "../../external/glTF-Sample-Models/2.0/RiggedSimple/glTF-Draco/RiggedSimple.gltf") >> drawables
  })

  @default-window(@f3(20.0 3.0 0.0) @f3(0 0 0))
} Looped: true)
@schedule(root test-transform-override)
@run(root FPS: 60 Iterations: 100)
