; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2022 Fragcolor Pte. Ltd.

@define(timestep #(1.0 | Math.Divide(60.0)))
@define(pi 3.1415926535)

@template(lines-plot [view data] {
  UI.Plot(
    ViewAspect: view
    DataAspect: data
    Legend: true
    Contents: {
      [] >= sin
      ForRange(-128 128 {
        ToFloat | Math.Divide(#(128 | ToFloat)) >= x
        time | Math.Cos >= t
        x | Math.Multiply(2.0) | Math.Sin | Math.Multiply(0.5) | Math.Multiply(t) >= y
        [x y] | ToFloat2 >> sin
      })
      sin | ExpectLike([@f2(0)])
      UI.PlotLine(
        Color: @color(200 100 100 255)
        Name: "wave"
      )

      [] >= thingy
      ForRange(0 256 {
        ToFloat | Math.Divide(#(128 | ToFloat)) | Math.Multiply(@pi) |
        {Math.Multiply(2.0) | Math.Add(time) | Math.Sin >= x} |
        {Math.Multiply(3.0) | Math.Sin >= y}
        [x y] | ToFloat2 >> thingy
      })
      thingy | ExpectLike([@f2(0)])
      UI.PlotLine(
        Color: @color(100 150 250 255)
        Name: "x = sin(2t), y = sin(3t)"
      )

      [] >= circle
      ForRange(0 64 {
        ToFloat |
        Math.Divide(#(32.0 | ToFloat)) | Math.Multiply(@pi) |
        {Math.Cos | Math.Multiply(circle-radius) | Math.Add(circle-center-x) >= x} |
        {Math.Sin | Math.Multiply(circle-radius) | Math.Add(circle-center-y) >= y}
        [x y] | ToFloat2 >> circle
      })
      circle | ExpectLike([@f2(0)])
      UI.PlotPoints(
        Name: "circle"
        Color: @color(100 250 100 255)
        Shape: MarkerShape::Plus
        Radius: 3.0
      )
    }
  )
})

@wire(lines-wire {
  UI.Window(
    Title: "Lines"
    Contents: {
      Once({
        1.0 >= circle-radius
        0.0 >= circle-center-x
        0.0 >= circle-center-y
        0.0 >= time
      })
      UI.Horizontal({
        UI.Group(
          UI.Vertical({
            "Circle:" | UI.Label
            UI.FloatInput(circle-radius "r: ")
            UI.Horizontal({
              UI.FloatInput(circle-center-x "x: ")
              UI.FloatInput(circle-center-y "y: ")
            })
          })
        )
        UI.Vertical({
          UI.Checkbox("Animate" animate)
          UI.Tooltip(
            UI.Checkbox("Square View" square)
            {"Always keep the viewport square." | UI.Label}
          )
          UI.Tooltip(
            UI.Checkbox("Proportional data axes" proportional)
            {"Ticks are the same size on both axes." | UI.Label}
          )
        })
      })

      If(
        {proportional} 
        If(
          {square}
          {@lines-plot(1.0 1.0)}
          {@lines-plot(none 1.0)}
        )
        If(
          {square}
          {@lines-plot(1.0 none)}
          {@lines-plot(none none)}
        )
      )

      When(
        {animate}
        {time | Math.Add(@timestep) > time}
      )
    }
  )
} Looped: true)

; @wire(markers-wire {
;   "Markers" | UI.Label
; } Looped: true)

; @wire(legend-wire {
;   "Legend" | UI.Label
; } Looped: true)

@wire(charts-histogram-wire {
  UI.Plot(
    Contents: {
      [] >= hist
      ForRange(-40 30 {
        Once({
          0.02 | Math.Multiply(3.1415926535) | Math.Sqrt = f
        })
        ToFloat | Math.Divide(10.0) | Math.Add(0.05) >= x
        x | Math.Multiply(x) | Math.Divide(-2.0) | Math.Exp | Math.Multiply(f) >= y
        [x y] | ToFloat2 >> hist
      })

      bar-orientation | Is(1) = horizontal
      hist | ExpectLike([@f2(0)])
      UI.PlotBar(
        Horizontal: horizontal
        Width: 0.095
        Color: @color(173 216 230 255)
      )
    }
  )
} Looped: true)

; @wire(charts-stacked-bars-wire {
; } Looped: true)

; @wire(charts-box-plot-wire {
; } Looped: true)

@wire(charts-wire {
  UI.Window(
    Title: "Charts"
    Contents: {
      "Type:" | UI.Label
      UI.Horizontal({
        Once({
          0 >= bar-type
        })
        UI.RadioButton("Histogram" bar-type 0)
        ; UI.RadioButton("Stacked Bars" bar-type 1)
        ; UI.RadioButton("Box Plot" bar-type 2)
      })
      "Orientation:" | UI.Label
      UI.Horizontal({
        Once({
          0 >= bar-orientation
        })
        UI.RadioButton("Vertical" bar-orientation 0)
        UI.RadioButton("Horizontal" bar-orientation 1)
      })

      bar-type | Match(
        [0 Step(charts-histogram-wire)
        ; 1 Step(charts-stacked-bars-wire)
        ; 2 Step(charts-box-plot-wire)
      ])
    }
  )
} Looped: true)

; @wire(items-wire {
;   "Items" | UI.Label
; } Looped: true)

; @wire(interaction-wire {
;   "Interaction" | UI.Label
; } Looped: true)

; @wire(custom-axes-wire {
;   "Custom Axes" | UI.Label
; } Looped: true)

; @wire(linked-axes-wire {
;   "Linked Axes" | UI.Label
; } Looped: true)

@wire(ui-wire {
  GFX.MainWindow(
    Title: "egui plot demo" Width: 1280 Height: 768
    Contents: {
      Once({
        GFX.DrawQueue >= ui-draw-queue
        GFX.UIPass(ui-draw-queue) >> render-steps
      })
      UI(
        ui-draw-queue {
          UI.CentralPanel({
            UI.Horizontal({
              UI.Button(Label: "Reset")
              UI.Collapsing(
                Heading: "Instructions"
                Contents: {
                  "Pan by dragging, or scroll (+ shift = horizontal)." | UI.Label
                  "Box zooming: Right click to zoom in and zoom out using a selection." | UI.Label
                  "Zoom with ctrl + scroll." | UI.Label
                  "Reset view with double-click." | UI.Label
                }
              )
            })
            UI.Separator
            UI.Horizontal({
              Once({
                0 >= choice
              })
              UI.RadioButton("Lines" choice 0)
              ; UI.RadioButton("Markers" choice 1)
              ; UI.RadioButton("Legend" choice 2)
              UI.RadioButton("Charts" choice 3)
              ; UI.RadioButton("Items" choice 4)
              ; UI.RadioButton("Interaction" choice 5)
              ; UI.RadioButton("Custom Axes" choice 6)
              ; UI.RadioButton("Linked Axes" choice 7)
            })
            UI.Separator

            choice |
            Match(
              [0 Step(lines-wire)
              ; 1 Step(markers-wire)
              ; 2 Step(legend-wire)
              3 Step(charts-wire)
              ; 4 Step(items-wire)
              ; 5 Step(interaction-wire)
              ; 6 Step(custom-axes-wire)
              ; 7 Step(linked-axes-wire)
            ])
          })
        }
      )

      GFX.Render(Steps: render-steps)
    }
  )
} Looped: true)

@mesh(main)
@schedule(main ui-wire)
@run(main FPS: 60 Iterations: 100)

@schedule(main ui-wire)
@run(main FPS: 60 Iterations: 100)