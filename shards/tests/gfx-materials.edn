(def cube-layout ["position"])
(def cube
  {"Vertices"
   [(Float3 -1.0  1.0  1.0)
    (Float3  1.0  1.0  1.0)
    (Float3 -1.0 -1.0  1.0)
    (Float3  1.0 -1.0  1.0)
    (Float3 -1.0  1.0 -1.0)
    (Float3  1.0  1.0 -1.0)
    (Float3 -1.0 -1.0 -1.0)
    (Float3  1.0 -1.0 -1.0)]
   "Indices"
   [0 1 2
    1 3 2
    4 6 5
    5 6 7
    0 2 4
    4 2 6
    1 5 3
    5 7 3
    0 4 1
    4 5 1
    2 3 6
    6 3 7]})

(defloop spawned-0
  .transform (GFX.Drawable :Mesh .mesh :Params {:baseColor .color}) (GFX.Draw .queue))
(defwire spawn-dynamic-0
  [{:Location (Float3 -3 0 -2) :Color (Float4 1 0 0 1)}
   {:Location (Float3 0 0 -2) :Color (Float4 0 1 0 1)}]
  (Map (->
        (| (Take "Location") (Math.Translation) >= .transform)
        (| (Take "Color") >= .color)
        (Spawn spawned-0))))

(defloop spawned-1
  .transform (GFX.Drawable :Mesh .mesh :Material .magenta-material) (GFX.Draw .queue))
(defwire spawn-dynamic-1
  [{:Location (Float3 -3 0 2)}
   {:Location (Float3 0 0 2)}
   {:Location (Float3 3 0 2)}]
  (Map (->
        (| (Take "Location") (Math.Translation) >= .transform)
        (Spawn spawned-1))))

(def timestep (/ 1.0 120.0))
(defmesh Root)
(defloop test-wire
  (Setup
   0.0 >= .time
   cube (GFX.Mesh :Layout cube-layout :WindingOrder WindingOrder.CW) >= .mesh

   (GFX.DrawQueue) >= .queue

   ; Create render steps
   (GFX.BuiltinFeature :Id BuiltinFeatureId.Transform) >> .features
   (GFX.BuiltinFeature :Id BuiltinFeatureId.BaseColor) >> .features
   {:Features .features :Queue .queue} (GFX.DrawablePass) >> .render-steps

   ; Static material
   (GFX.Material :Params {:baseColor (Float4 1 0 1 1)}) >= .magenta-material

   ; Create view
   {:Position (Float3 0 15 10) :Target (Float3 0 0 0)} (Math.LookAt) >= .view-transform
   (GFX.View :View .view-transform) >= .view)
  (GFX.MainWindow
   :Title "SDL Window" :Width 1280 :Height 720 :Debug false
   :Contents
   (->
    .time (Math.Add timestep) > .time
    .time (Math.Multiply 0.9) (Math.Add 0.0) (Math.FMod 1.0) >> .c
    .time (Math.Multiply 1.2) (Math.Add 0.3) (Math.FMod 1.0) >> .c
    .time (Math.Multiply 1.4) (Math.Add 0.6) (Math.FMod 1.0) >> .c
    1.0 >> .c
    .c (ToFloat4) >= .color-var

    (Float3 3 0 -2) (Math.Translation)
    (GFX.Drawable :Mesh .mesh :Params {:baseColor .color-var}) (GFX.Draw .queue)

    (Branch [spawn-dynamic-0])
    (Branch [spawn-dynamic-1])
    (GFX.Render :Steps .render-steps :View .view))))

(schedule Root test-wire)
(if (run Root timestep 100) nil (throw "Root tick failed"))
