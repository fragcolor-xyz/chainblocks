; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2020 Fragcolor Pte. Ltd

@mesh(root-1)

@wire(fitness-1 {
  Math.Subtract(36)
  ToFloat
  Math.Abs
  Math.Multiply(-1.0)
  Log("evolution happens here... fitness")
})

@wire(evolveme-1 {
  Mutant(Const(10) [0])
  Pause
  Mutant(Math.Multiply(2) [0] [{
      RandomInt(10)
      Math.Add(1)
    }])
})

@wire(test-1 {
  Sequence(best Type: @type([Type::Float Type::Wire]))
  Repeat({
    Evolve(evolveme-1 fitness-1 Population: 64 Coroutines: 8)
    Log > best
  } Times: 15)
  best
  Take(1)
  ToJson(false)
  Log
})

@schedule(root-1 test-1)
@run(root-1 0.1) | Assert.Is(true)

@mesh(root-2)

@wire(fitness-2 {
  Math.Subtract(36)
  ToFloat
  Math.Abs
  Math.Multiply(-1.0)
  Log("evolution happens here... fitness")
})

@wire(state-1 {
  Msg("into state 1")
  SwitchTo(state-2 true)
  Msg("back to state 1")
  SwitchTo(stepped)
})

@wire(state-2 {
  Msg("into state 2")
  SwitchTo(state-1)
})

@wire(stepped {
  SwitchTo(state-1 true)
})

@wire(evolveme-2 {
  Once({
    ; 0 >== niters ; global on purpose for testing
    0 | Set(niters Global: true)
  })
  Math.Inc(niters)
  niters
  When({IsMore(10)} {Stop})
  Step(stepped)
  Mutant(Const(10) [0])
  Mutant(Math.Multiply(2) [0] [{
      RandomInt(10)
      Math.Add(1)
    }])
} Looped: true)

@wire(test-2 {
  Sequence(best Type: @type([Type::Float Type::Wire]))
  Repeat({
    Evolve(evolveme-2 fitness-2 Elitism: 0.0 Population: 1 Threads: 1 Coroutines: 1)
    Log > best
  } Times: 4)
  best
  Log
  Take(1) | ExpectWire >= bestWire
  WireRunner(bestWire Mode: RunWireMode::Async)
  Msg("Waiting...")
  Wait(bestWire)
  Msg("Exiting...")
})

@schedule(root-2 test-2)
@run(root-2 0.1) | Assert.Is(true)

@mesh(root-3)

@wire(fitness-3 {
  Math.Subtract(36)
  ToFloat
  Math.Abs
  Math.Multiply(-1.0)
  Log("evolution happens here... fitness")
})

@wire(evolveme-3 {
  Mutant(Const(10) [0])
  Pause
  Mutant(Math.Multiply(2) [0] [{
      RandomInt(10)
      Math.Add(1)
    }])
})

@wire(test-3 {
  Once({
    0 >= ntimes
  })
  Math.Inc(ntimes)
  ntimes
  When({IsMore(7)} {
    Msg("STOP OK!")
    none | Stop
  })
  Evolve(evolveme-3 fitness-3 Population: 64 Coroutines: 8)
  Take(1)
  ToJson(false)
  Log
  none
} Looped: true)

@schedule(root-3 test-3)
@run(root-3 0.1) | Assert.Is(true)