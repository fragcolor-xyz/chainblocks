@define(timestep #(1.0 | Math.Divide(120.0)))
@mesh(root)

@wire(get-view-transform {
  {@f4(0 0.2 0.2 1.0) >= arm-pos}
  Math.AxisAngleY | Math.Rotation | Math.MatMul(arm-pos) | ToFloat3 >= arm-pos-3
  {Position: arm-pos-3 Target: @f3(0 0.025 0)} | Math.LookAt
} Pure: true)

@template(get-xy-wave-transform [x time] {
  time | Math.Multiply(4.5) | Math.Cos | Math.Multiply(0.01) >= tmp-y
  [x tmp-y 0] | ToFloat3 | Math.Translation
})

@define(default-setup {
  0.0 >= time
  
  ; Render steps
  GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> features
  GFX.BuiltinFeature(Id: BuiltinFeatureId::BaseColor) >> features
  GFX.DrawQueue >= queue
  GFX.DrawablePass(Features: features Queue: queue) >> render-steps
  
  ; Create view
  0.0 | Do(get-view-transform) >= view-transform
  GFX.View(View: view-transform) >= view
})

@define(default-window {
  GFX.MainWindow(
    Title: "Shards Window" Width: 1280 Height: 720
    Contents: {
      ; Rotate camera
      time | Math.Add(@timestep) > time
      time | Do(get-view-transform) > view-transform
      
      drawables | GFX.Draw(queue)
      GFX.Render(Steps: render-steps View: view)
    }
  )
})

@wire(test-path-static {
  Once({
    @default-setup
    @f3(0.02) | Math.Scaling
    GFX.glTF(Path: "data/building.glb") >> drawables
  })
  
  @default-window
} Looped: true)

@wire(test-u8-format {
  Once({
    @default-setup
    @f3(0.25) | Math.Scaling
    GFX.glTF(Path: "data/hotdog.glb") >> drawables
  })
  
  @default-window
} Looped: true)

@schedule(root test-u8-format)
@run(root FPS: 120 Iterations: 100) | Assert.Is(true)

@schedule(root test-path-static)
@run(root FPS: 120 Iterations: 100) | Assert.Is(true)

@wire(test-path-dynamic {
  Once({
    @default-setup
    "../../external/glTF-Sample-Models/2.0/Avocado/glTF-Binary/Avocado.glb" >= path-var
    Math.MatIdentity | GFX.glTF(Path: path-var) >> drawables
  })
  
  @default-window
} Looped: true)

@schedule(root test-path-dynamic)
@run(root FPS: 120 Iterations: 100) | Assert.Is(true)

@wire(test-binary {
  Once({
    @default-setup()
    "../../external/glTF-Sample-Models/2.0/Avocado/glTF-Binary/Avocado.glb" | FS.Read(Bytes: true) >= bytes
    Math.MatIdentity | GFX.glTF(Bytes: bytes) >> drawables
  })
  
  @default-window
} Looped: true)

@schedule(root test-binary)
@run(root FPS: 120 Iterations: 100) | Assert.Is(true)

@wire(test-transforms {
  Once({
    @default-setup
    @f3(-0.05 0 0) | Math.Translation >= t1
    @get-xy-wave-transform(0.0 0.0) >= t2
    @f3(0.05 0 0) | Math.Translation >= t3
  })
  
  GFX.MainWindow(
    Title: "Shards Window" Width: 1280 Height: 720
    Contents: {
      ; Rotate camera
      time | Math.Add(@timestep) > time
      time | Do(get-view-transform) > view-transform
      @get-xy-wave-transform(0.0 time) > t2
      
      t1 | GFX.glTF(Path: "../../external/glTF-Sample-Models/2.0/Avocado/glTF-Binary/Avocado.glb") >> drawables
      t2 | GFX.glTF(Path: "../../external/glTF-Sample-Models/2.0/Avocado/glTF-Binary/Avocado.glb") >> drawables
      t3 | GFX.glTF(Path: "../../external/glTF-Sample-Models/2.0/Avocado/glTF-Binary/Avocado.glb") >> drawables
      drawables | GFX.Draw(queue)
      GFX.Render(Steps: render-steps View: view)
    }
  )
} Looped: true)

@schedule(root test-transforms)
@run(root FPS: 120 Iterations: 100) | Assert.Is(true)

@wire(test-copy {
  Once({
    @default-setup
    @f3(-0.05 0 0) | Math.Translation >= t1
    @f3(0.05 0 0) | Math.Translation >= t2
    t1 | GFX.glTF(Path: "../../external/glTF-Sample-Models/2.0/Avocado/glTF-Binary/Avocado.glb") >= avocado-a
    avocado-a >> drawables
    t2 | GFX.glTF(Copy: avocado-a) >> drawables
  })
  
  @default-window
})

@schedule(root test-copy)
@run(root FPS: 120 Iterations: 100) | Assert.Is(true)
