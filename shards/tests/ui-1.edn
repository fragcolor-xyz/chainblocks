; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2022 Fragcolor Pte. Ltd.

;; Notes:
;;   This file contains unit tests for the UI shards.
;;   It is not meant to be realistic. For such samples, look at egui-demo.edn.

(defmesh main)
(def timestep (/ 1.0 60.0))
(def duration 60)
(def input "**input**")

;; menu bar
(defloop menubar-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)

    (UI
     .ui-draw-queue
     (->
      (UI.TopPanel
       :Contents
       (->
        (UI.MenuBar) (ExpectBool)))))

    (GFX.Render :Steps .render-steps))))
(schedule main menubar-test)
(if (run main timestep duration) nil (throw "Root tick failed"))

;; menu
(defloop menu-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)

    (UI
     .ui-draw-queue
     (->
      (UI.TopPanel
       :Contents
       (UI.MenuBar
        (->
         (UI.Menu :Title "Menu" :Contents (-> nil)) (ExpectBool))))))

    (GFX.Render :Steps .render-steps))))
(schedule main menu-test)
(if (run main timestep duration) nil (throw "Root tick failed"))

;; button
(defloop button-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    (UI
     .ui-draw-queue
     (->
      input
      (UI.CentralPanel
       :Contents
       (->
        (UI.Button
         "Click me!"
         :Action
         (->
          (Assert.Is input :Abort true)
          (Msg "Clicked")))
        (ExpectBool)))))

    (GFX.Render :Steps .render-steps))))
(schedule main button-test)
(if (run main timestep duration) nil (throw "Root tick failed"))

;; checkbox
(defloop checkbox-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (UI.Checkbox "Checked" .checked)
        (ExpectBool)
        .checked (ExpectBool)))))

    (GFX.Render :Steps .render-steps))))
(schedule main checkbox-test)
(if (run main timestep duration) nil (throw "Root tick failed"))

;; color-input
(defloop color-input-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (UI.ColorInput .color) (ExpectColor)
        .color (ExpectColor)))))

    (GFX.Render :Steps .render-steps))))
(schedule main color-input-test)
(if (run main timestep duration) nil (throw "Root tick failed"))

;; combo
(defloop combo-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        ["Hello" "World"] (UI.Combo "Word" .index) (ExpectString)
        .index (ExpectInt)))))

    (GFX.Render :Steps .render-steps))))
(schedule main combo-test)
(if (run main timestep duration) nil (throw "Root tick failed"))

;; hyperlink
(defloop hyperlink-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        "https://docs.fragnova.com" (UI.Hyperlink "Fragnova documentation")
        (Assert.Is "https://docs.fragnova.com" :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main hyperlink-test)
(if (run main timestep duration) nil (throw "Root tick failed"))

;; image
(defloop image-test
  (GFX.MainWindow
   :Width 640 :Height 640
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (Setup
         (LoadImage "../../assets/ShardsLogo.png") = .image
         (float2 0.25 0.25) = .scale)
        .image (UI.Image .scale)))))

    (GFX.Render :Steps .render-steps))))
(schedule main image-test)
(if (run main timestep duration) nil (throw "Root tick failed"))

;; image button
(defloop image-button-test
  (GFX.MainWindow
   :Width 640 :Height 640
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (Setup
         (LoadImage "../../assets/ShardsLogo.png") = .image
         (float2 0.1 0.1) = .scale)
        .image (UI.ImageButton :Scale .scale :Action (Msg "Clicked"))))))

    (GFX.Render :Steps .render-steps))))
(schedule main image-button-test)
(if (run main timestep duration) nil (throw "Root tick failed"))
