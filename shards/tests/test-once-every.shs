@define(cube-layout ["position" "color"])
@define(cube {"Vertices": [
    (-1.0  1.0  1.0) @color(0x000000)
    ( 1.0  1.0  1.0) @color(0x0000ff)
    (-1.0 -1.0  1.0) @color(0x00ff00)
    ( 1.0 -1.0  1.0) @color(0x00ffff)
    (-1.0  1.0 -1.0) @color(0xff0000)
    ( 1.0  1.0 -1.0) @color(0xff00ff)
    (-1.0 -1.0 -1.0) @color(0xffff00)
    ( 1.0 -1.0 -1.0) @color(0xffffff)
  ] "Indices": [
    0 1 2
    1 3 2
    4 6 5
    5 6 7
    0 2 4
    4 2 6
    1 5 3
    5 7 3
    0 4 1
    4 5 1
    2 3 6
    6 3 7
  ]})

@define(timestep #(1.0 | Math.Divide(60.0)))

@wire(test-wire {
  Once({
    0.0 >= time
    @cube | GFX.Mesh(Layout: @cube-layout WindingOrder: WindingOrder::CW) = mesh

    ; Create render steps
    GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(Id: BuiltinFeatureId::BaseColor) >> features
    GFX.DrawQueue = queue
    GFX.DrawablePass(Features: features Queue: queue) >> render-steps

    ; Create view
    {Position: @f3(0 0 8) Target: @f3(0)} | Math.LookAt = view-transform
    GFX.View(View: view-transform) = view

    Once({
      GFX.DrawQueue = ui-draw-queue
      GFX.UIPass(ui-draw-queue) >> render-steps})

    48.0 >= fps
    0.001 >= chopper
    0.001 >= delay
  })

  Once({
    GFX.MainWindow(Title: "SDL Window" Width: 1280 Height: 720 Contents: {
      time | Math.Add(@timestep) > time ; | Log

      time | Math.Multiply(0.2) | Math.AxisAngleX | Math.Rotation ; Rotation X
      | Math.MatMul((time | Math.Multiply(0.7) | Math.AxisAngleY | Math.Rotation)) ; Rotation Y
      | Math.MatMul((time | Math.Multiply(0.9) | Math.AxisAngleZ | Math.Rotation)) ; Rotation Z
      | GFX.Drawable(Mesh: mesh) | GFX.Draw(queue)

      UI(ui-draw-queue {
          UI.Window(Contents: {
            UI.Horizontal({
              "FPS:" | UI.Label | UI.FloatSlider(Variable: fps Min: 5.0 Max: 240.0)
            })
            UI.Horizontal({
              "Chopper:" | UI.Label | UI.FloatSlider(Variable: chopper Min: 0.0 Max: 0.1)
            })
            UI.Horizontal({
              "Fixed delay:" | UI.Label | UI.FloatSlider(Variable: delay Min: 0.0 Max: 0.1)
            })
            UI.Horizontal({
              "FPS:" | UI.Label 
              1.0 | Math.Divide((Time.Delta | Time.MovingAverage(100))) | ToString | UI.Label
            })
            
          })
      })

      GFX.Render(Steps: render-steps View: view)
    })
  } Every: (1.0 Math.Divide(fps)))

  RandomFloat(chopper) | Math.Add(delay) = f1
  Pause(f1)
} Looped: true)

@mesh(root)
@schedule(root test-wire)
@run(root)
