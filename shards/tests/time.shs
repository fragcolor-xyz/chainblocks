; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2021 Fragcolor Pte. Ltd.

@mesh(root)

@wire(producer {
  Sequence(sink Type: @type([Type::Any Type::Int]) Global: true)
  "Hi!" = v
  Time.EpochMs >= t
  Repeat({
    t | Math.Add(2000) >= t | Log
    Const([v t]) >> sink
  } Times: 4)
  sink | Log
})

@wire(consumer {
  Once({
    Sequence(sink 
             Type: @type([Type::Any Type::Int]) 
             ; to pick producer variable
             Global: true 
             ; producer runs before us and then we will clear it!, avoid this data race
             Clear: false)
  })
  Time.Pop(sink) |
  Log
})

@schedule(root producer)
@schedule(root consumer)
@run(root FPS: 10 Iterations: 100)