(load-file "gfx-lib/lib.edn")
(load-file "gfx-lib/atmosphere.edn")
(load-file "gfx-lib/pbr.edn")
(setup-pbr-lib (slurp "gfx-lib/pbr.wgsl") filter-cubemap render-cubemap-0)

(def timestep (/ 1.0 120.0))
(defmesh Root)
(defloop test-wire
  :Looped
  (GFX.MainWindow
   :Title "SDL Window" :Width 1280 :Height 720
   :Contents (->
              (skybox-pass (slurp "gfx-lib/atmosphere.wgsl") filter-cubemap render-sky-sphere-queue sky-sphere-vs) = .skybox-step
              .skybox-step >> .render-steps
              (GFX.DrawQueue) = .queue

              (Animation.Timer) = .t
              10.0 = .r
              .t (Math.Cos) (Math.Multiply .r) >= .x
              .t (Math.Sin) (Math.Multiply .r) >= .z
              .t (Math.Multiply 0.4) (Math.Sin) (Math.Multiply 3.0) >= .y

              {:Target (Float3 0.0 0.0 0.0) :Position (Float3 0.0)} >= .lookat
              (Float3 .x .y .z) (Update .lookat "Position")
              .lookat (Math.LookAt) = .view-transform

              90.0 (Math.DegreesToRadians) (Math.AxisAngleX) (Math.Rotation) = .rot-z
              (Float3 0 0 0) (Math.Translation) = .tsl
              .tsl (Math.MatMul .rot-z)
              (GFX.glTF :Path "../../external/glTF-Sample-Models/2.0/DamagedHelmet/glTF-Binary/DamagedHelmet.glb") (GFX.Draw .queue)

              (GFX.View .view-transform) = .view

              (Setup
               (GFX.BuiltinFeature BuiltinFeatureId.Transform) >> .capture-features
               (GFX.BuiltinFeature BuiltinFeatureId.BaseColor) >> .capture-features

               .skybox-step >> .capture-steps)

              ;; Main features & render step
              (GFX.BuiltinFeature BuiltinFeatureId.Transform) >> .features
              (GFX.BuiltinFeature BuiltinFeatureId.BaseColor) >> .features
              (render-pbr-base .capture-steps) >> .features ; Create/update PBR render step here
              (GFX.DrawablePass :Queue .queue :Features .features) >> .steps
              .skybox-step >> .steps

              (GFX.Render .steps .view)
              )))

(schedule Root test-wire)
(if (run Root timestep) nil (throw "Root tick failed"))
