@define(timestep #(1.0 | Math.Divide(120.0)))
@mesh(root)
@define(blendAlphaPremul {Operation: BlendOperation::Add Src: BlendFactor::One Dst: BlendFactor::OneMinusSrcAlpha})
@define(blendOne {Operation: BlendOperation::Add Src: BlendFactor::One Dst: BlendFactor::One})

@template(spin-transform [t location] {
  t >= tmp-0
  tmp-0 | Math.Multiply(0.2) | Math.AxisAngleX | Math.Rotation >= rotX
  tmp-0 | Math.Multiply(0.7) | Math.AxisAngleY | Math.Rotation >= rotY
  tmp-0 | Math.Multiply(0.9) | Math.AxisAngleZ | Math.Rotation >= rotZ
  location | Math.Translation | Math.MatMul(rotX) | Math.MatMul(rotY) | Math.MatMul(rotZ)
})

; (defloop test-wire
;   (Setup
;    0.0 >= .time
;    (GFX.BuiltinMesh :Type BuiltinMeshType.Cube) >= .mesh

;    (GFX.DrawQueue) >= .queue-0
;    (GFX.DrawQueue) >= .queue-1

;     ; Create render steps
;    (GFX.BuiltinFeature BuiltinFeatureId.Transform) >> .features
;    (GFX.BuiltinFeature BuiltinFeatureId.BaseColor) >> .features
;    {:State {:DepthWrite false
;             :Blend {:Color BlendAlphaPremul :Alpha BlendOne}}}
;    (GFX.Feature) >> .features

;    ;; Red cube should be draw on top of cyan cube
;    (GFX.DrawablePass :Features .features :Queue .queue-1) >> .render-steps
;    (GFX.DrawablePass :Features .features :Queue .queue-0) >> .render-steps

;     ;; Create view
;    {:Position (Float3 0 0 8) :Target (Float3 0 0 0)} (Math.LookAt) >= .view-transform
;    (GFX.View :View .view-transform) >= .view)
;   (GFX.MainWindow
;    :Title "SDL Window" :Width 1280 :Height 720 
;    :Contents
;    (->
;     .time (Math.Add timestep) > .time

;     (spin-transform .time (Float3 -0.4 0 0))
;     (GFX.Drawable :Mesh .mesh :Params {:baseColor (Float4 1 0 0 0.5)}) (GFX.Draw :Queue .queue-0)

;     (spin-transform (-> .time (Math.Multiply 0.5)) (Float3 0.4 0 0))
;     (GFX.Drawable :Mesh .mesh :Params {:baseColor (Float4 0 1 1 0.5)}) (GFX.Draw :Queue .queue-1)

;     (spin-transform (-> .time (Math.Multiply 0.7)) (Float3 0.8 0 0))
;     (GFX.Drawable :Mesh .mesh :Params {:baseColor (Float4 1 0.2 1 0.5)}) (GFX.Draw :Queue .queue-1)

;     (GFX.Render :Steps .render-steps :View .view))))

@wire(test-wire {
  Once({
    0.0 >= time
    GFX.BuiltinMesh(Type: BuiltinMeshType::Cube) >= mesh

    GFX.DrawQueue >= queue-0
    GFX.DrawQueue >= queue-1

    ; Create render steps
    GFX.BuiltinFeature(BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(BuiltinFeatureId::BaseColor) >> features
    GFX.Feature(State: {DepthWrite: false Blend: {Color: @blendAlphaPremul Alpha: @blendOne}}) >> features

    ; Red cube should be draw on top of cyan cube
    GFX.DrawablePass(Features: features Queue: queue-1) >> render-steps
    GFX.DrawablePass(Features: features Queue: queue-0) >> render-steps

    ; Create view
    {Position: @f3(0 0 8) Target: @f3(0 0 0)} | Math.LookAt >= view-transform
    GFX.View(View: view-transform) >= view
  })
  GFX.MainWindow(
    Title: "SDL Window" Width: 1280 Height: 720
    Contents: {
      time | Math.Add(@timestep) >= time

      @spin-transform(time @f3(-0.4 0 0)) |
      GFX.Drawable(Mesh: mesh Params: {baseColor: @f4(1 0 0 0.5)}) | GFX.Draw(Queue: queue-0)

      @spin-transform((time | Math.Multiply(0.5)) @f3(0.4 0 0)) |
      GFX.Drawable(Mesh: mesh Params: {baseColor: @f4(0 1 1 0.5)}) | GFX.Draw(Queue: queue-1)

      @spin-transform((time | Math.Multiply(0.7)) @f3(0.8 0 0)) |
      GFX.Drawable(Mesh: mesh Params: {baseColor: @f4(1 0.2 1 0.5)}) | GFX.Draw(Queue: queue-1)

      GFX.Render(Steps: render-steps View: view)
    }
  )
} Looped: true)

@schedule(root test-wire)
@run(root FPS: 120 Iterations: 100)