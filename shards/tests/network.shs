; ; SPDX-License-Identifier: BSD-3-Clause
; ; Copyright Â© 2023 Fragcolor

@define(random1 #(RandomBytes(0xFFFF)))
@define(random2 #(RandomBytes(0xFFFFF)))

@wire(handler {
  Log("Server's Peer Received")
  When(Is("The End") {
    Log("Disconnecting client after receiving end sequence")
    true > test/server-received-end
    "" | Stop
  })
  "Ok" | Network.Send
} Looped: true Priority: 100)

@wire(network-test-server {
  Network.Server("127.0.0.1" 9191 handler OnDisconnect: Pass)
  Once({"Smaller" | Network.Broadcast | Log("Send smaller")} Every: 0.5)
  Once({@random1 | Network.Broadcast | Log("Send random1")} Every: 0.5)
} Looped: true Priority: 100)

@wire(client-init {
  "Hey server" | Network.Send
  2019 | Network.Send
  99.9 | Network.Send
  @f4(3 2 1 0) | Network.Send
  [1 2 3 4 5] | Network.Send
  
  @random1 | Network.Send | Log("Big load")
  @random2 | Network.Send | Log("Even bigger load")
  true > test/client-init-success | Log("Client init success")
} Priority: 100)

@wire(network-test-client {
  Maybe({
    Network.Client("127.0.0.1" 9191 {
      Log("Client received")
      When(Is("Smaller") {
        true > test/client-received-smaller
      })
      When(Is(@random1) {
        true > test/client-received-random1
      })

      When({test/client-received-smaller | And | test/client-received-random1} {
        "The End" | Network.Send | Log("Sent end")
      })
    }) = peer
    Once(Do(client-init))
    none
  } {Stop})
} Looped: true Priority: 100)

@define(tick-count 200)
@define(tick-count-1 #(@tick-count | Sub(1)))
@wire(test-assert {
  false | Set(test/client-init-success Global: true) | Log("Client init success Set")
  false | Set(test/client-received-smaller Global: true) | Log("Client received smaller Set")
  false | Set(test/client-received-random1 Global: true) | Log("Client received random1 Set")
  false | Set(test/server-received-end Global: true) | Log("Server received end Set")
  ForRange(1 @tick-count-1 {
    Pause(0)
  })
  Log("Checking conditions")
  test/client-init-success | Log("client-init-success") | Assert.Is(true)
  test/server-received-end | Log("server-received-end") | Assert.Is(true)
  test/client-received-smaller | Log("client-received-smaller") | Assert.Is(true)
  test/client-received-random1 | Log("client-received-random1") | Assert.Is(true)
})

@mesh(main)
@schedule(main test-assert)
@schedule(main network-test-server)
@schedule(main network-test-client)
@run(main #(10.0 | Div(1000.0)) @tick-count) | Assert.Is(true)