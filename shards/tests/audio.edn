; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2021 Fragcolor Pte. Ltd.

(defmesh main)

(defloop play-files
  (Audio.ReadFile "./data/Ode_to_Joy.ogg" :From 1.0 :To 2.0)
  (Log))

(schedule main play-files)
(if (run main) nil (throw "Root tick failed"))
(schedule main play-files)
(if (run main) nil (throw "Root tick failed"))

(defloop play-file-fft
  (Audio.ReadFile "./data/Ode_to_Joy.ogg" :Channels 1 :From 5.0 :To 6.0)
  (DSP.FFT) = .freq-domain
  (DSP.IFFT :Audio true)
  (Audio.WriteFile "example-fft.wav" :Channels 1)
  .freq-domain (DSP.IFFT :Complex true) (DSP.FFT) ; FOR COVERAGE
  .freq-domain (DSP.IFFT :Complex false)
  (Math.Normalize :Positive true)
  (FloatsToImage 32 32 1) (WritePNG "example.wav.png") ; again, just for coverage
  (Log))

(schedule main play-file-fft)
(if (run main) nil (throw "Root tick failed"))

;; (defloop play-file-dwt
;;   (Audio.ReadFile "./data/Ode_to_Joy.ogg" :Channels 1 :From 5.0 :To 6.0)
;;   (DSP.Wavelet)
;;   (DSP.InverseWavelet)
;;   (Audio.WriteFile "example-dwt.wav" :Channels 1))

;; (schedule main play-file-dwt)
;; (run main)

(defloop device-test
  (Audio.Device)
  (Audio.Channel :Shards (-> (Input))))

(schedule main device-test)
(if (run main 0.1 25) nil (throw "Root tick failed"))

(defloop device-test
  (Audio.Device)
  (Audio.Channel :Shards (-> (Audio.ReadFile "./data/Ode_to_Joy.ogg"
                                             :Channels 2
                                             :From 4.0 :To 6.0))))

(schedule main device-test)
(if (run main) nil (throw "Root tick failed"))

(defloop device-test
  (Audio.Device)
  (Audio.Channel :Shards (-> 440.0 (Audio.Oscillator))))

(schedule main device-test)
(if (run main 0.1 25) nil (throw "Root tick failed"))

(defloop device-test
  (Audio.Device)
  (Audio.Channel :Shards (-> 440.0 (Audio.Oscillator Waveform.Triangle))))

(schedule main device-test)
(if (run main 0.1 25) nil (throw "Root tick failed"))

(defloop device-test
  (Audio.Device)
  (Audio.Channel :Shards (-> 440.0 (Audio.Oscillator Waveform.Square))))

(schedule main device-test)
(if (run main 0.1 25) nil (throw "Root tick failed"))

(defloop device-test
  (Audio.Device)
  (Audio.Channel :Shards (-> 440.0 (Audio.Oscillator Waveform.Sawtooth))))

(schedule main device-test)
(if (run main 0.1 25) nil (throw "Root tick failed"))