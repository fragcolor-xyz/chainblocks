@wire(test-wire {
  Once({
    [
      {name: "dqoiwdj"}
      {name: "nioadn"}
      {name: "qiwoje"}
      {name: "Invalid item" extra-data: 11111}
    ] >= items

    GFX.DrawQueue = ui-draw-queue
    GFX.UIPass(ui-draw-queue) >> render-steps

    UI.LayoutClass(MainDirection: LayoutDirection::LeftToRight) = ui-class
  })

  GFX.MainWindow(Title: "Drag and Drop" Width: 1280 Height: 720 Contents: {
    UI({
      UI.Property(UIProperty::ScreenSize) = screen-size
      screen-size | Math.Divide(2.0) = center
      94.0 = radius

      When({UI.Property(UIProperty::IsAnythingBeingDragged)} {
        UI.Area(Contents: {
          UI.DragAndDrop({
            UI.Layout(Class: ui-class FillWidth: true FillHeight: true)
          }
          Drop: {
            Log("Global drop")
          })
        } Position: @f2(0 0) Order: Order::Background)
      })

      UI.Area(Contents: {
        Once({ null | Expect(@type(Type::Any)) >= dropped-item })
        UI.DragAndDrop({
          UI.Frame(
            InnerMargin: @f4(10) OuterMargin: @f4(0) Rounding: @f4(5)
            FillColor: @color(40 40 40)
            StrokeColor: @color(90 90 32) StrokeWidth: 2.0
            Contents: {
              "The strict drop box" | UI.Label
            })
        } Drop: {
          = item
          Log("Dropping item")
          item > dropped-item
        } Hover: {
          Maybe({
            Expect(@type({name: Type::String}))
            true
          } { false } Silent: true)
        })
        dropped-item | WhenNot({IsNone} {
          ToString | UI.Label
        })
      } Position: @f2(50 300) Order: Order::Middle)

      Once({ null | Expect(@type(Type::Any)) >= dropped-item-2 })
      UI.Area(Contents: {
        UI.DragAndDrop({
          UI.Frame(
            InnerMargin: @f4(10) OuterMargin: @f4(0) Rounding: @f4(5)
            FillColor: @color(50 50 21)
            StrokeColor: @color(100 100 100) StrokeWidth: 2.0
            Contents: {
              "The anything drop box" | UI.Label
            })
        } Drop: {
          = item
          Log("Dropping item")
          item > dropped-item-2
        })
        dropped-item-2 | WhenNot({IsNone} {
          ToString | UI.Label
        })
      } Position: @f2(200 300) Order: Order::Middle)

      ; The list of items to pick from
      UI.Area(Contents: {
        items | DoMany({
          ExpectTable = item
          UI.DragAndDrop({
            "Select " >= label
            item:name | ExpectString | AppendTo(label)
            UI.Button(label { "Hi" Log })
          })
        })
      } Position: @f2(50 50) Order: Order::Middle)
    }) | UI.Render(ui-draw-queue)

    GFX.Render(Steps: render-steps)
  })
} Looped: true)

@mesh(root)
@schedule(root test-wire)
@run(root FPS: 120 Iterations:200)
