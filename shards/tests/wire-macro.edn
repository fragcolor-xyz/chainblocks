; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2021 Fragcolor Pte. Ltd.

(defmacro! defwire (fn* [name & shards] `(def! ~(symbol (str name)) (Wire ~(str name) (wireify (vector ~@shards))))))
(defmacro! defloop (fn* [name & shards] `(def! ~(symbol (str name)) (Wire ~(str name) :Looped (wireify (vector ~@shards))))))
(defmacro! defshards (fn* [name args & shards] `(defn ~(symbol (str name)) ~args (wireify (vector ~@shards)))))

(defshards shards [a b]
  (Msg a)
  (Msg b))

(defwire x
  "Hello world"
  (Log))

(defloop y
  "Hello world"
  (Log)
  (Pause 0.1)
  (shards "one" "1")
  (shards "two" "2"))

(def Root (Mesh))
(schedule Root x)
(schedule Root y)
(if (run Root 0.1 50) nil (throw "Root tick failed"))