@wire(spawn{
  Msg("Hello world")
} Looped: false)

@wire(test{
  ;; TryMany Tests -- ToX
  Audio.ReadFile("./data/Ode_to_Joy.ogg" From: 1.0 To: 2.0) = audio
  LoadImage("../../assets/ShardsLogo.png") = image
  image | ToString = img-string
  [1] | IntsToBytes = bytes

  Math.MatIdentity() = matrix4x4
  Assert.Is([@f4(1 0 0 0) @f4(0 1 0 0) @f4(0 0 1 0) @f4(0 0 0 1)])
  Log("identity result")

  [@f3(0 0 0) @f3(1 1 1) @f3(2 2 2)] = matrix3x3

  [@f2(1 2) @f2(3 4)] = matrix2x2

  [@f4(1 2 3 4) @f4(1 2 3 4) @f4(1 2 3 4) @f4(1 2 3 4)] = matrix4x4-2

  [@f3(1 2 3) @f3(4 5 6) @f3(7 8 9)] = matrix3x3-2

  [@f2(1 2) @f2(3 4)] = matrix2x2-2

  [5 @i2(5) @i3(5) @i4(5) @i8(5) @i16(5) 5.0 @f2(5.0) @f3(5.0) @f4(5.0) @color(255) spawn {table:1} [1 2 3 4 5] [1.0 2.0 3.0 4.0 5.0] audio true image bytes "Hello" none matrix4x4 matrix3x3 matrix2x2] = input-seq

  image >> img-seq
  audio >> audio-seq
  5 >> int-seq | int-seq
  @i2(1) >> int2-seq
  @i3(1) >> int3-seq
  @i4(1) >> int4-seq
  @i8(1) >> int8-seq
  @i16(1) >> int16-seq
  0.5 >> float-seq
  @f2(0.5) >> float2-seq
  @f3(0.5) >> float3-seq
  @f4(0.5) >> float4-seq
  bytes >> bytes-seq
  @color(1) >> color-seq
  "String" >> string-seq
  true >> bool-seq
  spawn >> wire-seq
  [1 2 3 4 5] >> seq-of-seq

  [img-seq audio-seq int-seq int2-seq int3-seq int4-seq int8-seq int16-seq float-seq float2-seq float3-seq float4-seq bytes-seq color-seq string-seq bool-seq wire-seq seq-of-seq] = sequences-input-seq

  input-seq
  TryMany(
    Wire: {
      ExpectFloat3Seq
      Math.Cross(Operand: matrix3x3)
    }
    Policy: WaitUntil::SomeSuccess
  )
  Log("MathCross 4x4 result")

  ; [matrix3x3]
  ; TryMany(
  ;   Wire: {
  ;     Math.Cross(Operand: matrix3x3)
  ;   }
  ;   Policy: WaitUntil::SomeSuccess
  ; )
  ; Log("MathCross 3x3 result")

  ;[matrix4x4 matrix3x3 matrix2x2]
  ; [matrix4x4]
  ; TryMany(
  ;   Wire:{
  ;     Math.Dot(Operand: (matrix4x4-2))
  ;   }
  ;   Policy: WaitUntil::SomeSuccess
  ; )
  ; Log("MathDot 4x4 result")

  ; ;[matrix4x4 matrix3x3 matrix2x2]
  ; [matrix3x3]
  ; TryMany(
  ;   Wire:{
  ;     Math.Dot(Operand: (matrix3x3-2))
  ;   }
  ;   Policy: WaitUntil::SomeSuccess
  ; )
  ; Log("MathDot 3x3 result")

  ; ;[matrix4x4 matrix3x3 matrix2x2]
  ; [matrix2x2]
  ; TryMany(
  ;   Wire:{
  ;     Math.Dot(Operand: (matrix2x2-2))
  ;   }
  ;   Policy: WaitUntil::SomeSuccess
  ; )
  ; Log("MathDot 2x2 result")

  ; [@f2(1 2) @f3(1 2 3) @f4(1 2 3 4) matrix4x4 matrix3x3 matrix2x2]
  ; TryMany(
  ;   Wire:{
  ;     ExpectFloat3
  ;     Math.LengthSquared
  ;   }
  ;   Policy: WaitUntil::SomeSuccess
  ; )
  ; Log("MathLengthSquared 4x4 result")
} Looped: false)

@mesh(root)
@schedule(root test)
@run(root) | Assert.Is(true)