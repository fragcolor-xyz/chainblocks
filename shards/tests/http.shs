; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2020 Fragcolor Pte. Ltd.

@mesh(root)

@wire(test {
  "Hello world, this is an escaping test ////" |
  String.EncodeURI | Log |
  Assert.Is("Hello%20world%2C%20this%20is%20an%20escaping%20test%20%2F%2F%2F%2F" true) |
  String.DecodeURI | Log |
  Assert.Is("Hello world, this is an escaping test ////" true)

  1 | ToString |
  Set(params "postId")

  params |
  Http.Get("https://raw.githubusercontent.com/fragcolor-xyz/vscode-shards-syntax/main/package.json") = json |
  FromJson |
  ExpectTable |
  Take("author") |
  ExpectString |
  Assert.Is("Fragcolor and contributors" true) |
  Log

  Maybe({
    none |
    Http.Get("https://httpstat.us/200?sleep=5000" Timeout: 1) |
    Log
  })

  json |
  Http.Post("https://postman-echo.com/post") |
  Log

  json |
  Http.Post("https://postman-echo.com/post" FullResponse: true) |
  Log |
  Take("headers") |
  Take("content-type") |
  Log |
  Assert.Is("application/json; charset=utf-8" true)
} Looped: true)

@schedule(root test)
@run(root FPS: 10 Iterations: 50) | Assert.Is(true)

; test reusing sockets/streams
@schedule(root test)
@run(root FPS: 10 Iterations: 50) | Assert.Is(true)

@wire(download {
  none |
  Http.Get("https://github.com/fragcolor-xyz/shards/blob/devel/assets/ShardsLogo.png" Bytes: true Timeout: 60) = shards
  "shards.png" | FS.Write(avocado Overwrite: true)
})

@schedule(root download)
@run(root FPS: 10) | Assert.Is(true)

; @wire(server-handler {
;   Msg("handled") |
;   Http.Read |
;   Log |
;   1 >> r
;   2 >> r
;   3 >> r
;   r | ToJson | Http.Response
; } Looped: true)

; @wire(test-server {
;   Http.Server(Handler: server-handler)
; } Looped: true)

; @schedule(root test-server)
; @run(root FPS: 10) | Assert.Is(true)