; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2022 Fragcolor Pte. Ltd.

(def timestep (/ 1.0 60.0))
(def duration 100)

(def pi 3.1415926535)
(defshards lines-plot [view data]
  (UI.Plot
   :ViewAspect view
   :DataAspect data
   :Legend true
   :Contents
   (->
    [] >= .sin
    (ForRange
     -128 128
     (->
      (ToFloat) (Math.Divide (float 128)) >= .x
      .time (Math.Cos) >= .t
      .x (Math.Multiply 2.0) (Math.Sin) (Math.Multiply 0.5) (Math.Multiply .t) >= .y
      [.x .y] (ToFloat2) >> .sin))
    .sin (ExpectLike [(float2 0)])
    (UI.PlotLine :Color (color 200 100 100) :Name "wave")

    [] >= .thingy
    (ForRange
     0 256
     (->
      (ToFloat) (Math.Divide (float 128)) (Math.Multiply pi)
      (| (Math.Multiply 2.0) (Math.Add .time) (Math.Sin) >= .x)
      (| (Math.Multiply 3.0) (Math.Sin) >= .y)
      [.x .y] (ToFloat2) >> .thingy))
    .thingy (ExpectLike [(float2 0)])
    (UI.PlotLine :Color (color 100 150 250) :Name "x = sin(2t), y = sin(3t)")

    [] >= .circle
    (ForRange
     0 64
     (->
      (ToFloat)
      (Math.Divide (float 32)) (Math.Multiply pi)
      (| (Math.Cos) (Math.Multiply .circle-radius) (Math.Add .circle-center-x) >= .x)
      (| (Math.Sin) (Math.Multiply .circle-radius) (Math.Add .circle-center-y) >= .y)
      [.x .y] (ToFloat2) >> .circle))
    .circle (ExpectLike [(float2 0)])
    (UI.PlotPoints
     :Name "circle"
     :Color (color 100 200 100) :Shape MarkerShape.Plus :Radius 3.0))))

(defloop lines-wire
  (UI.Window
   :Title "Lines"
   :Contents
   (->
    (Setup
     1.0 >= .circle-radius
     0.0 >= .circle-center-x
     0.0 >= .circle-center-y
     0.0 >= .time)
    (UI.Horizontal
     (->
      (UI.Group
       (UI.Vertical
        (->
         "Circle:" (UI.Label)
         (UI.FloatInput .circle-radius "r: ")
         (UI.Horizontal
          (->
           (UI.FloatInput .circle-center-x "x: ")
           (UI.FloatInput .circle-center-y "y: "))))))
      (UI.Vertical
       (->
        (UI.Checkbox "Animate" .animate)
        (UI.Tooltip
         (UI.Checkbox "Square View" .square)
         (-> "Always keep the viewport square." (UI.Label)))
        (UI.Tooltip
         (UI.Checkbox "Proportional data axes" .proportional)
         (-> "Ticks are the same size on both axes." (UI.Label)))
        ;; (UI.Tooltip
        ;;  (UI.Checkbox "Show coordinates" .coordinates)
        ;;  (-> "Can take a custom formatting function." (UI.Label)))
        ;; ["Solid" "Dashed" "Dotted"]
        ;; (UI.Combo
        ;;  :Label "Line style"
        ;;  :Index .line-style-idx)
        ))))

    (If
     (-> .proportional)
     (If
      (-> .square)
      (-> (lines-plot 1.0 1.0))
      (-> (lines-plot nil 1.0)))
     (If
      (-> .square)
      (-> (lines-plot 1.0 nil))
      (-> (lines-plot nil nil))))

    (When
     (-> .animate)
     (-> .time (Math.Add timestep) > .time)))))

;; (defloop markers-wire
;;   "Markers" (UI.Label))

;; (defloop legend-wire
;;   "Legend" (UI.Label))

(defloop charts-histogram-wire
  (UI.Plot
   :Contents
   (->
    [] >= .hist
    (ForRange
     -40 39
     (->
      (Setup
       0.02 (Math.Multiply 3.1415926535) (Math.Sqrt) = .f)
      (ToFloat) (Math.Divide 10.0) (Math.Add 0.05) >= .x
      .x (Math.Multiply .x) (Math.Divide -2.0) (Math.Exp) (Math.Divide .f) >= .y
      [.x .y] (ToFloat2) >> .hist))

    .bar-orientation (Is 1) = .horizontal
    .hist (ExpectLike [(float2 0)])
    (UI.PlotBar
     :Horizontal .horizontal
     :Width 0.095
     :Color (color 173 216 230)))))

;; (defloop charts-stacked-bars-wire)

;; (defloop charts-box-plot-wire)

(defloop charts-wire
  (UI.Window
   :Title "Charts"
   :Contents
   (->
    "Type:" (UI.Label)
    (UI.Horizontal
     (->
      (Setup 0 >= .bar-type)
      (UI.RadioButton "Histogram" .bar-type 0)
    ;;   (UI.RadioButton "Stacked Bar Chart" .bar-type 1)
    ;;   (UI.RadioButton "Box Plot" .bar-type 2)
      ))
    "Orientation:" (UI.Label)
    (UI.Horizontal
     (->
      (Setup 0 >= .bar-orientation)
      (UI.RadioButton "Vertical" .bar-orientation 0)
      (UI.RadioButton "Horizontal" .bar-orientation 1)))

    .bar-type
    (Match
     [0 (Step charts-histogram-wire)
    ;;   1 (Step charts-stacked-bars-wire)
    ;;   2 (Step charts-box-plot-wire)
      ]))))

;; (defloop items-wire
;;   "Items" (UI.Label))

;; (defloop interaction-wire
;;   "Interaction" (UI.Label))

;; (defloop custom-axes-wire
;;   "Custom Axes" (UI.Label))

;; (defloop linked-axes-wire
;;   "Linked Axes" (UI.Label))

(defloop ui-wire
  (GFX.MainWindow
   :Title "egui plot demo" :Width 1280 :Height 768 :Debug false
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    (UI
     .ui-draw-queue
     (UI.CentralPanel
      (->
       (UI.Horizontal
        (->
         (UI.Button "Reset")
         (UI.Collapsing
          :Heading "Instructions"
          :Contents
          (->
           "Pan by dragging, or scroll (+ shift = horizontal)." (UI.Label)
           "Box zooming: Right click to zoom in and zoom out using a selection." (UI.Label)
           "Zoom with ctrl + scroll." (UI.Label)
           "Reset view with double-click." (UI.Label)))))
       (UI.Separator)
       (UI.Horizontal
        (->
         (Setup 0 >= .choice)
         (UI.RadioButton "Lines" .choice 0)
        ;;  (UI.RadioButton "Markers" .choice 1)
        ;;  (UI.RadioButton "Legend" .choice 2)
         (UI.RadioButton "Charts" .choice 3)
        ;;  (UI.RadioButton "Items" .choice 4)
        ;;  (UI.RadioButton "Interaction" .choice 5)
        ;;  (UI.RadioButton "Custom Axes" .choice 6)
        ;;  (UI.RadioButton "Linked Axes" .choice 7)
         ))
       (UI.Separator)

       .choice
       (Match
        [0 (Step lines-wire)
        ;;  1 (Step markers-wire)
        ;;  2 (Step legend-wire)
         3 (Step charts-wire)
        ;;  4 (Step items-wire)
        ;;  5 (Step interaction-wire)
        ;;  6 (Step custom-axes-wire)
        ;;  7 (Step linked-axes-wire)
         ]))))

    (GFX.Render :Steps .render-steps))))

(defmesh main)
(schedule main ui-wire)
(if (run main timestep duration) nil (throw "Root tick failed"))

(schedule main ui-wire)
(if (run main timestep duration) nil (throw "Root tick failed"))
