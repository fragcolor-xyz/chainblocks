; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2019 Fragcolor Pte. Ltd.

@mesh(root)

; (schedule
;  Root
;  (Wire
;   "test"

;   "frag"
;   (StringToBytes) (ToHex) (Log)
;   (BigInt) (BigInt.ToString) (Log "frag")

;   "wsCl"
;   (StringToBytes) (ToHex) (Log)
;   (BigInt) (BigInt.ToString) (Log "wsCl")

;   "onnx"
;   (StringToBytes) (ToHex) (Log)
;   (BigInt) (BigInt.ToString) (Log "onnx")

;   (Const [10 20 3.14])
;   (Pack "i32 i32 f32")
;   (Set "bytes")
;   (Log)

;   (Get "bytes")
;   (Unpack "i32 i32 f32")
;   (Log)
;   (ExpectSeq) &> .bseq
;   (Take 1)
;   (ExpectInt)
;   (Assert.Is 20 true)
;   .bseq (Take 2)
;   ; note float/double conversion loses precision, so we compare with an epsilon (~1e-7)
;   (ExpectFloat) (Math.Subtract 3.14) (Math.Abs) (IsLessEqual 0.00000011)
;   (Assert.Is true true)

;   (Const ["Hello structured data" 2])
;   (Pack "s i32")
;   (Log)
;   (Unpack "s i32")
;   (Log)
;   (Take 0)
;   (ExpectString)
;   (Log)
;   (Assert.Is "Hello structured data" true)

;   (Const [1.0 2.0 3.0]) >> .args
;   22 >> .args
;   .args
;   (Pack "f32[3] p")
;   (Log)
;   (Unpack "f32[3] p") >= .x
;   (Take 1)
;   (ExpectInt)
;   (Assert.Is 22 true)
;   .x (Take 0) (ExpectSeq)
;   (Log)
;   (Take 2)
;   (ExpectFloat)
;   (Assert.Is 3.0 true)

;   (Const [1 2 3]) >> .args2
;   22 >> .args2
;   .args2
;   (Pack "i64[3] p")
;   (Log)
;   (Unpack "i64[3] p") >= .y
;   (Take 1)
;   (ExpectInt)
;   (Assert.Is 22 true)
;   .y (Take 0) (ExpectSeq)
;   (Log)
;   (Take 2)
;   (ExpectInt)
;   (Assert.Is 3 true)))

@wire(test {
  "frag" |
  StringToBytes | ToHex | Log |
  BigInt | BigInt.ToString | Log("frag")

  "wsCl" |
  StringToBytes | ToHex | Log |
  BigInt | BigInt.ToString | Log("wsCl")

  "onnx" |
  StringToBytes | ToHex | Log |
  BigInt | BigInt.ToString | Log("onnx")

  Const([10 20 3.14]) |
  Pack("i32 i32 f32") |
  Set(bytes) |
  Log

  Get(bytes) |
  Unpack("i32 i32 f32") |
  Log |
  ExpectSeq | Ref(bseq) |
  Take(1) |
  ExpectInt |
  Assert.Is(20 true)
  bseq | Take(2) |
  ; note float/double conversion loses precision, so we compare with an epsilon (~1e-7)
  ExpectFloat | Math.Subtract(3.14) | Math.Abs | IsLessEqual(0.00000011) |
  Assert.Is(true true)

  Const(["Hello structured data" 2]) |
  Pack("s i32") |
  Log |
  Unpack("s i32") |
  Log |
  Take(0) |
  ExpectString |
  Log |
  Assert.Is("Hello structured data" true)

  Const([1.0 2.0 3.0]) >> args
  22 >> args
  args |
  Pack("f32[3] p") |
  Log |
  Unpack("f32[3] p") >= x |
  Take(1) |
  ExpectInt |
  Assert.Is(22 true)
  x | Take(0) | ExpectSeq |
  Log |
  Take(2) |
  ExpectFloat |
  Assert.Is(3.0 true)

  Const([1 2 3]) >> args2
  22 >> args2
  args2 |
  Pack("i64[3] p") |
  Log |
  Unpack("i64[3] p") >= y |
  Take(1) |
  ExpectInt |
  Assert.Is(22 true)
  y | Take(0) | ExpectSeq |
  Log |
  Take(2) |
  ExpectInt |
  Assert.Is(3 true)
})

@schedule(root test)
@run(root)