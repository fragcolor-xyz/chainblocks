@define(use-gpu "false" IgnoreRedefined: true)

@wire(whisper-it {
  = mel-input

  "data/whisper-tokenizer.json"
  ; "data/GIST-all-MiniLM-L6-v2-tokenizer.json"
  FS.Read | ML.Tokenizer = tokenizer
  
  "data/whisper-config.json"
  ; "data/GIST-all-MiniLM-L6-v2-config.json"
  FS.Read | FromJson | ExpectTable = config | Log
  
  "data/whisper-model.safetensors"
  ; "data/GIST-all-MiniLM-L6-v2.safetensors"
  FS.Read(Bytes: true)
  ML.Model(Model: MLModels::Whisper Format: MLFormats::SafeTensor Configuration: config GPU: #(@use-gpu | Is("true"))) = whisper-model
  
  mel-input | ML.SpeechToText(Model: whisper-model Tokenizer: tokenizer Language: "en" Task: "transcribe") = jfk-transcript
  Log
})

@wire(basic-test {
  "data/samples_jfk.wav" | Audio.ReadFileBytes(SampleRate: 16000 Channels: 1)
  ML.AudioToMel(GPU: #(@use-gpu | Is("true"))) = jfk-mel
  Tensor.ToString | Log
  
  jfk-mel | Do(whisper-it)
})

@wire(audio-data-receiver {
  "0x" | HexToBytes >= audio-bytes
  Detach(device-test)
  
  Repeat({
    Consume("W.Audio" @type(Type::Audio)) | AudioToBytes | AppendTo(audio-bytes)
  } Times: 500)
  
  audio-bytes | ML.AudioToMel(GPU: #(@use-gpu | Is("true"))) = me-mel
  Tensor.ToString | Log

  me-mel | Do(whisper-it)
})

@wire(device-test {
  Audio.Device(InputChannels: 1)
  Audio.Channel(Shards: {
    {Audio.Resample(16000) | Produce("W.Audio")} ; make sure we passthrough the audio data
  })
} Looped: true)

@mesh(root)
@schedule(root audio-data-receiver)
; @schedule(root basic-test)
@run(root 0.01) | Assert.Is(true)
