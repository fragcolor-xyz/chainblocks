@define(timestep #(1.0 | Math.Divide(120.0)))

@wire(palette {
  {@f3(1.0) >= result}
  When(Is(0) {@f3(0.8 0.4 0.1) > result})
  When(Is(3) {@f3(0.4 0.3 0.9) > result})
  When(Is(1) {@f3(0.94 0.3 0.25) > result})
  When(Is(2) {@f3(0.2 1.0 0.1) > result})
  When(Is(4) {@f3(0.5 0.5 0.8) > result})
  When(Is(5) {@f3(0.5 0.3 0.1) > result})
  result
} Pure: true)

@wire(palette-f {
  Math.Multiply(5.0)
  {Ref(in)}
  {Math.Floor >= prev}
  {Math.Ceil >= next}
  prev | ToInt | Do(palette) >= color-a
  next | ToInt | Do(palette) >= color-b
  prev | Math.Subtract(prev)
  in | Math.Subtract(prev) | Math.Lerp(color-a color-b)
} Pure: true)

@wire(ucos {
  Math.Cos | Math.Multiply(0.5) | Math.Add(0.5)
} Pure: true)

@wire(plasma {
  Math.Add(@f2(0.3 -0.5)) | Math.Multiply(4.0)
  {Take(0) >= u} {Take(1) >= v}
  Shader.ReadBuffer("time") | Math.Multiply(0.8) >= time
  v | Math.Add(time) > v
  
  time | Math.Add(u) >= t0
  time | Math.Add(v) >= t1
  time | Math.Add(v) | Math.Add(u) >= t2
  time | Math.Add(v) | Math.Multiply(0.04) >= t3
  t2 | Math.Cos | Math.Add(t1) | Math.Cos | Math.Multiply(0.05) | Math.Add(t0) | Math.Cos >= u0
  t1 | Math.Cos | Math.Subtract(t2) | Math.Cos | Math.Add(t1) | Math.Multiply(0.2) | Math.Negate | Math.Sin >= u1
  u1 | Math.Add(t3) | Math.Add(time) | Math.Add(u0) | Do(ucos)
} Pure: true)

@template(shader-main [] {
  Shader.ReadBuffer("viewport") >= viewport
  Shader.ReadInput("texCoord0") >= uv
  Shader.ReadBuffer("time") >= time
  Shader.ReadGlobal("color") >= base-color
  
  uv | Do(plasma) >= vcolor
  vcolor | Do(palette-f) >= sheen-color
  
  sheen-color | ToFloat4 | Math.Add(@f4(0.0 0.0 0.0 1.0)) | Shader.WriteGlobal("color")
})

@wire(update-cube-transform {
  @f3(0.25) | Math.Scaling >= transform
  time | Math.Cos | Math.Multiply(10.0) | Math.DegreesToRadians | Math.AxisAngleZ | Math.Rotation >= rmat-0
  time | Math.Multiply(0.8) | Math.Cos | Math.Multiply(3.0) | Math.DegreesToRadians | Math.AxisAngleY | Math.Rotation >= rmat-1
  rmat-1 | Math.MatMul(rmat-0) | Math.MatMul(transform)
})

@wire(gfx {
  Animation.Timer = time
  
  Once({
    {Position: @f3(0.0 1.0 0.0) Target: @f3(0.0)} | Math.LookAt >= view-transform
    GFX.View(view-transform) >= view
    
    GFX.BuiltinMesh(Type: BuiltinMeshType::Cube) >= cube
    
    Do(update-cube-transform)
  })
  
  GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> features
  GFX.BuiltinFeature(Id: BuiltinFeatureId::BaseColor) >> features
  GFX.Feature(Shaders:
    [{Stage: ProgrammableGraphicsStage::Fragment
      After: ["readColor"]
      Before: ["writeColor"]
      EntryPoint: {@shader-main()}}]
    ViewGenerators: {
      {time: time}
    }
  ) >> features
  
  GFX.DrawQueue >= queue
  GFX.DrawablePass(Features: features Queue: queue) >> render-steps
  
  Do(update-cube-transform)
  GFX.Drawable(Mesh: cube) | GFX.Draw(queue)
  GFX.Render(Steps: render-steps View: view)
} Looped: true)

@wire(test-wire {
  GFX.MainWindow(Title: "Shards Window" Width: 1280 Height: 720
  Contents: {Step(gfx)})
} Looped: true LStack: 4194304)

@mesh(root)
@schedule(root test-wire)
@run(root FPS: 120 Iterations: 200) | Assert.Is(true)
