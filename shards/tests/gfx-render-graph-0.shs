@wire(pass {
  Ref(tsl)
  Once({
    GFX.BuiltinMesh >= mesh
    RandomFloat(16.0) >= offset
    RandomFloat >= c-r | RandomFloat >= c-g | RandomFloat >= c-b
    @f4(c-r c-g c-b 1.0) = color
    tsl | Math.Translation = tsl-mat

    ; Setup pipeline
    GFX.DrawQueue = queue
    GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(Id: BuiltinFeatureId::BaseColor) >> features
    GFX.DrawablePass(Features: features Queue: queue
      Outputs: [
        {Name: "color"}
        {Name: "depth"}]
    ) >> render-steps
  })

  Animation.Timer(Offset: offset) = time
  time | Math.Multiply(0.2) | Math.AxisAngleX | Math.Rotation >= rotX
  time | Math.Multiply(0.7) | Math.AxisAngleY | Math.Rotation >= rotY
  time | Math.Multiply(0.9) | Math.AxisAngleZ | Math.Rotation >= rotZ
  tsl-mat | Math.MatMul(rotX) | Math.MatMul(rotY) | Math.MatMul(rotZ)

  GFX.Drawable(Mesh: mesh Params: {baseColor: color}) | GFX.Draw(queue)
  GFX.Render(Steps: render-steps View: view)
} Looped: true)

; This tests correct rendering of several separate Render calls that might write to the same output
; the render graph builder will figure out that only the first render has to clear
@wire(branch-init {
  @f3(-1.2 0.0 0.0) | Spawn(pass)
  @f3(0.0 0.0 0.0) | Spawn(pass)
  @f3(1.2 0.0 0.0) | Spawn(pass)
})

@wire(test-wire {
  Once({
    ; Create view
    {Position: @f3(0 0 8) Target: @f3(0 0 0)} | Math.LookAt >= view-transform
    GFX.View(View: view-transform) >= view
  })

  ; Special clear pass
  GFX.EffectPass(EntryPoint: {
    Shader.ReadInput("texCoord0") | ToFloat4 | Math.Add(@f4(0 0 0 1))
    Shader.WriteOutput("color") ; End shader
  }) >> render-steps
  GFX.Render(Steps: render-steps)

  ; Spawned passes
  Branch([branch-init])
} Looped: true)

@wire(main-window {
  GFX.MainWindow(
    Title: "Shards Window" Width: 1280 Height: 720
    Contents: {Step(test-wire)}
  )
} Looped: true)

@mesh(root)
@schedule(root main-window)
@run(root FPS: 120 Iterations: 100) | Assert.Is(true)