@define(cube-layout ["position" "color"])
@define(cube {"Vertices": [
    @f3(-1.0  1.0  1.0) @color(0x000000)
    @f3( 1.0  1.0  1.0) @color(0x0000ff)
    @f3(-1.0 -1.0  1.0) @color(0x00ff00)
    @f3( 1.0 -1.0  1.0) @color(0x00ffff)
    @f3(-1.0  1.0 -1.0) @color(0xff0000)
    @f3( 1.0  1.0 -1.0) @color(0xff00ff)
    @f3(-1.0 -1.0 -1.0) @color(0xffff00)
    @f3( 1.0 -1.0 -1.0) @color(0xffffff)
  ] "Indices": [
    0 1 2
    1 3 2
    4 6 5
    5 6 7
    0 2 4
    4 2 6
    1 5 3
    5 7 3
    0 4 1
    4 5 1
    2 3 6
    6 3 7
  ]})

@define(timestep #(1.0 | Math.Divide(60.0)))

@wire(test-wire {
  Once({
    0.0 >= time
    @cube | GFX.Mesh(Layout: @cube-layout WindingOrder: WindingOrder::CW) = mesh

    ; Create render steps
    GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(Id: BuiltinFeatureId::BaseColor) >> features
    GFX.DrawQueue = queue
    GFX.DrawablePass(Features: features Queue: queue) >> render-steps

    ; Create view
    {Position: @f3(0 0 8) Target: @f3(0)} | Math.LookAt = view-transform
    GFX.View(View: view-transform) = view
  })

  GFX.MainWindow(Title: "SDL Window" Width: 1280 Height: 720 Contents: {
    time | Math.Add(@timestep) > time ; | Log

    time | Math.Multiply(0.2) | Math.AxisAngleX | Math.Rotation ; Rotation X
    | Math.MatMul((time | Math.Multiply(0.7) | Math.AxisAngleY | Math.Rotation)) ; Rotation Y
    | Math.MatMul((time | Math.Multiply(0.9) | Math.AxisAngleZ | Math.Rotation)) ; Rotation Z
    | Log | GFX.Drawable(Mesh: mesh) | GFX.Draw(queue)

    GFX.Render(Steps: render-steps View: view)
  })
} Looped: true)

@mesh(root)
@schedule(root test-wire)
@run(root FPS: 60 Iterations: 100) | Assert.Is(true)
