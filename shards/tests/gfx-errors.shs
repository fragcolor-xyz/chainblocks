@define(timestep #(1.0 | Math.Divide(60.0)))
@wire(test-wire {
  Once({
    GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(Id: BuiltinFeatureId::BaseColor) >> features
    GFX.Feature(Shaders: [{
        Name: "test"
        Stage: ProgrammableGraphicsStage::Fragment
        EntryPoint: {
          Shader.Literal("0.0" OutputDimension: 4) Shader.WriteGlobal("color")
        }}]) >> features
    GFX.DrawQueue = queue
    GFX.DrawablePass(Features: features Queue: queue) >> render-steps

    ; Create view
    {Position: @f3(0 0 8) Target: @f3(0)} | Math.LookAt = view-transform
    GFX.View(View: view-transform) = view
  })

  GFX.MainWindow(Title: "SDL Window" Width: 400 Height: 400 Contents: {
    Math.MatIdentity
    GFX.Drawable(Mesh: (GFX.BuiltinMesh)) | GFX.Draw(queue)
    ; GFX.Compute(
    ;   EntryPoint: {

    ;   }
    ; )
    GFX.Render(Steps: render-steps View: view)
  })
} Looped: true)

@mesh(root)
@schedule(root test-wire)
@run(root FPS: 60 Iterations: 100)
