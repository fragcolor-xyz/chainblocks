@define(timestep #(1.0 | Math.Divide(120.0)))
@mesh(root)
@define(blendAlpha {Operation: BlendOperation::Add Src: BlendFactor::SrcAlpha Dst: BlendFactor::OneMinusSrcAlpha})

@wire(test-wire {
  Once({
    0.0 >= time
    GFX.BuiltinMesh(Type: BuiltinMeshType::Cube) >= mesh

    ; Load texture
    LoadImage("../../assets/ShardsLogo.png") >= image |
    Log("Image") |
    GFX.Texture >= texture |
    Log("Texture")

    GFX.DrawQueue >= queue

    ; Create render steps
    GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(Id: BuiltinFeatureId::BaseColor) >> features
    GFX.DrawablePass(Features: features Queue: queue) >> render-steps

    ; Create view
    {Position: @f3(0 0 8) Target: @f3(0 0 0)} | Math.LookAt >= view-transform
    GFX.View(View: view-transform) >= view
  })
  GFX.MainWindow(
    Title: "SDL Window" Width: 1280 Height: 720
    Contents: {
      time | Math.Add(@timestep) > time
      time | Math.Multiply(0.2) | Math.AxisAngleX | Math.Rotation >= rotX
      time | Math.Multiply(0.7) | Math.AxisAngleY | Math.Rotation >= rotY
      time | Math.Multiply(0.9) | Math.AxisAngleZ | Math.Rotation >= rotZ
      rotX | Math.MatMul(rotY) | Math.MatMul(rotZ) | GFX.Drawable(Mesh: mesh Params: {baseColorTexture: texture}) | GFX.Draw(queue)
      GFX.Render(Steps: render-steps View: view)
    }
  )
} Looped: true)

@schedule(root test-wire)
@run(root FPS: 120 Iterations: 100)

@wire(test-formats {
  Once({
    GFX.BuiltinMesh(Type: BuiltinMeshType::Plane) >= mesh

    LoadImage("data/RGBA.png") | GFX.Texture >= texture-0
    LoadImage("data/RGB.png") | GFX.Texture >= texture-1
    LoadImage("../../assets/ShardsLogo.png") | GFX.Texture >= texture-2

    GFX.DrawQueue >= queue

    ; Create render steps
    GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(Id: BuiltinFeatureId::BaseColor) >> features
    GFX.DrawablePass(Features: features Queue: queue 
                     Outputs: [{Name: "color" Clear: @f4(1.0)}]) >> render-steps

    ; Create view
    {Position: @f3(0 0 8.0) Target: @f3(0 0 0)} | Math.LookAt >= view-transform
    GFX.View(View: view-transform) >= view
  })
  GFX.MainWindow(
    Title: "SDL Window" Width: 1280 Height: 720
    Contents: {
      @f3(-2 0 0) | Math.Translation | GFX.Drawable(Mesh: mesh Params: {baseColorTexture: texture-0}) | GFX.Draw(queue)
      @f3(0 0 0) | Math.Translation | GFX.Drawable(Mesh: mesh Params: {baseColorTexture: texture-1}) | GFX.Draw(queue)
      @f3(2 0 0) | Math.Translation | GFX.Drawable(Mesh: mesh Params: {baseColorTexture: texture-2}) | GFX.Draw(queue)
      GFX.Render(Steps: render-steps View: view)
    }
  )
} Looped: true)

@schedule(root test-formats)
@run(root FPS: 120 Iterations: 100)