(def timestep (/ 1.0 120.0))
(defmesh root)
(defloop test-wire
  (Setup
   (GFX.BuiltinMesh :Type BuiltinMeshType.Cube) >= .mesh

   (GFX.BuiltinFeature BuiltinFeatureId.Transform) >> .features
   (GFX.BuiltinFeature BuiltinFeatureId.BaseColor) >> .features
   (GFX.DrawQueue) >= .queue
   {:Features .features :Queue .queue} (GFX.DrawablePass) >> .render-steps

   (GFX.Texture :Format TextureFormat.R8Uint) >= .u8-tex
   (GFX.BuiltinFeature BuiltinFeatureId.Transform) >> .features-1
   {:State {:DepthCompare CompareFunction.Equal :DepthWrite false}
    :Params {:index 0}
    :Shaders
    [{:Stage ProgrammableGraphicsStage.Fragment
      :EntryPoint
      (->
       ; Write to index output
       (Shader.ReadBuffer "index")
       (Shader.WriteOutput "index"))}]} (GFX.Feature) >> .features-1

   ; Second pass to render to index texture
   {:Features .features-1
    :Outputs [{:Name "index" :Texture .u8-tex}
              {:Name "depth"}]
    :Queue .queue} (GFX.DrawablePass) >> .render-steps

   {:Position (Float3 0 1 8) :Target (Float3 0 0 0)} (Math.LookAt) >= .view-transform


   (GFX.View :View .view-transform) >= .view)
  (GFX.MainWindow
   :Title "SDL Window" :Width 1280 :Height 720 :Debug false
   :Contents
   (->
    (Float3 -1.0 0.0 0.0) (Math.Translation)
    (GFX.Drawable :Mesh .mesh :Params {:index 64}) (GFX.Draw .queue)
    (Float3 1.0 0.0 0.0) (Math.Translation)
    (GFX.Drawable :Mesh .mesh :Params {:index 128}) (GFX.Draw .queue)

    (GFX.Render :Steps .render-steps :View .view)

    (GFX.EndFrame)
    .u8-tex (GFX.ReadTexture :Wait true) = .image
    (Setup 0 >= .fc)
    "frame-" >= .fn .fc (ToString) (AppendTo .fn) ".png" (AppendTo .fn)
    (Int2 400 400) (GetImagePixel .image true) (Log "Pixel (400, 400)")
    (Int2 800 400) (GetImagePixel .image true) (Log "Pixel (800, 400)")
    .image  (WritePNG .fn)
    .fc (Math.Add 1) > .fc
    (Log "Read image"))))

(schedule root test-wire)
(if (run root timestep 4) nil (throw "Root tick failed"))
