; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2019 Fragcolor Pte. Ltd.

@define(identity [@f4(1 0 0 0)
                  @f4(0 1 0 0)
                  @f4(0 0 1 0)
                  @f4(0 0 0 1)])

@define(mat1 [@f4(1 2 3 4)
              @f4(1 2 3 4)
              @f4(1 2 3 4)
              @f4(1 2 3 4)])

@define(mat1t [@f4(1 1 1 1)
               @f4(2 2 2 2)
               @f4(3 3 3 3)
               @f4(4 4 4 4)])

@define(mat2 [@f2(1 2)
              @f2(1 2)
              @f2(1 2)
              @f2(1 2)])

@define(mat2t [@f4(1 1 1 1)
               @f4(2 2 2 2)])

@mesh(root)

@wire(tests {
  @f3(1 2 3) |
  Math.Cross(@f3(2 2 2)) |
  Log |
  Assert.Is(@f3(-2 4 -2) true)

  Const([@f3(1 2 3) @f3(1 3 4)]) |
  Math.Cross(@f3(2 2 2)) |
  Log |
  Assert.Is([@f3(-2 4 -2) @f3(-2 6 -4)] true)

  Const([@f3(1 2 3) @f3(1 3 4)]) |
  Math.Cross([@f3(2 2 2) @f3(3 3 3)]) |
  Log |
  Assert.Is([@f3(-2 4 -2) @f3(-3 9 -6)] true)

  @f3(1 2 3) |
  Math.Dot(@f3(1 5 7)) | ExpectFloat |
  Log |
  Assert.Is(32.0 true)

  @f3(1 2 3) |
  Math.LengthSquared | ExpectFloat |
  Log |
  Assert.Is(14.0 true)

  @f3(1 1 2) |
  Math.Length | ExpectFloat |
  Log |
  ToString | ; truncate hack
  Assert.Is("2.44949" true)

  @f3(1 0 1) |
  Math.Normalize |
  Log

  @f3(4270.56 4602.19 188) | Ref(playerPos)
  ; @f3(4277.35 4596.54 188) | Set(targetPos)
  @f3(4283.18 4604.73 188) | Ref(targetPos)
  Get(targetPos) | Math.Subtract(playerPos) |
  Math.Normalize |
  Log

  @f4(2 3 4 5) | Ref(vec4.1)

  Const(@identity) |
  Math.MatMul(@f4(1 2 3 4)) |
  Log |
  Assert.Is(@f4(1 2 3 4) true)

  Const(@identity) |
  Math.MatMul(vec4.1) |
  Log |
  Assert.Is(@f4(2 3 4 5) true) | 
  Ref(vec4.2)

  Const(@identity) |
  Math.MatMul(vec4.2) |
  Log |
  Assert.Is(@f4(2 3 4 5) true)

  Const(@identity) |
  Math.MatMul(@identity) |
  Log |
  Assert.Is(@identity true)

  Const(@mat1) |
  Math.Transpose |
  Log |
  Assert.Is(@mat1t true)

  Const(@mat2) |
  Math.Transpose |
  Log |
  Assert.Is(@mat2t true)

  Math.Orthographic(2560 1440 0 10000) |
  Math.Transpose |
  Log

  @f3(2 3 4) | Math.Scaling |
  Assert.Is([@f4(2 0 0 0) @f4(0 3 0 0) @f4(0 0 4 0) @f4(0 0 0 1)] true) |
  Log

  @f3(2 3 4) | Math.Translation |
  Assert.Is([@f4(1 0 0 0) @f4(0 1 0 0) @f4(0 0 1 0) @f4(2 3 4 1)] true) |
  Log |
  Math.Decompose = trs
  trs:translation | Assert.Is(@f3(2 3 4) true)

  180.0 | Math.DegreesToRadians | Log | {ToString | Assert.Is("3.14159" true)} |
  Math.AxisAngleX | Log |
  Math.Rotation | Log

  (3.141592653589793238463 | Math.Divide(2.0)) |
  Math.AxisAngleY | Log |
  Math.Rotation | Log
  ; TODO float precision-less asserts
  ; {ToString | Assert.Is("[(0, 0, -1, 0), (0, 1, 0, 0), (1, 0, 0, 0), (0, 0, 0, 1)]" true)}

  @f3(-1.0 1.0 2.0) | Math.Normalize(Positive: false) | Log
  [-1.0 1.0 2.0] | Math.Normalize(Positive: false) | Log
  @f3(-1.0 1.0 2.0) | Math.Normalize(Positive: true) | Log
  [-1.0 1.0 2.0] | Math.Normalize(Positive: true) | Log

  @f2(-1.0 1.0) | Math.Normalize(Positive: false) | Log
  [-1.0 1.0] | Math.Normalize(Positive: false) | Log
  @f2(-1.0 1.0) | Math.Normalize(Positive: true) | Log
  [-1.0 1.0] | Math.Normalize(Positive: true) | Log

  @f2(20.0 30.0) | Math.Normalize(Positive: false) | Log
  [20.0 30.0] | Math.Normalize(Positive: false) | Log
  @f2(20.0 30.0) | Math.Normalize(Positive: true) | Log
  [20.0 30.0] | Math.Normalize(Positive: true) | Log

  @f3(0.0 1.0 2.0) >= first-3
  @f3(4.0 -1.0 0.0) >= second-3
  0.5 | Math.Lerp(first-3 second-3) | Assert.Is(@f3(2 0 1) true) | Log("Lerped value")

  @color(16 32 64 255) >= first-c
  @color(37 255 32 255) >= second-c
  0.5 | Math.Lerp(first-c second-c) | Assert.Is(@color(26 143 48 255) true) | Log("Lerped color")

  0.5 | Math.Lerp(0.0 4.0) | Assert.Is(2.0 true) | Log("Lerped Float Value")
  0.5 | Math.Lerp(0x00 0xff) | Assert.Is(0x7f true) | Log("Lerped Int Value")

  Msg("Done!")
})

@schedule(root tests)
@run(root) | Assert.Is(true)
