; ; SPDX-License-Identifier: BSD-3-Clause
; ; Copyright Â© 2023 Fragcolor

@define(random1 #(RandomBytes(0xFFFF)))
@define(random2 #(RandomBytes(0xFFFFF)))

@wire(handler {
  Log("Server's Peer Received")
  When(Is("The End") {
    Log("Disconnecting client after receiving end sequence")
    true > test/server-received-end
    "" | Stop
  })
  "Ok" | Network.Send
} Looped: true)

@wire(network-test-server {
  Network.WS.Server("127.0.0.1" 9191 handler OnDisconnect: Pass)
  Once({"Smaller" | Network.Broadcast | Log("Send random")} Every: 0.5)
  Once({@random1 | Network.Broadcast | Log("Send random")} Every: 0.5)
} Looped: true)

@wire(client-init {
  "Hey server" | Network.Send
  2019 | Network.Send
  99.9 | Network.Send
  @f4(3 2 1 0) | Network.Send
  [1 2 3 4 5] | Network.Send
  
  @random1 | Network.Send | Log("Big load")
  @random2 | Network.Send | Log("Even bigger load")
  
  "The End" | Network.Send(peer)
  true > test/client-init-success
})

@wire(network-test-client {
  Maybe({
    Network.WS.Client("ws://127.0.0.1" 9191 {
      Log("Client received")
      When(Is("Smaller") {
        true > test/client-received-smaller
      })
      When(Is(@random1) {
        true > test/client-received-random1
      })
    }) = peer
    Once(Do(client-init))
  })
} Looped: true)

@wire(test-assert {
  false | Set(test/client-init-success Global: true)
  false | Set(test/client-received-smaller Global: true)
  false | Set(test/client-received-random1 Global: true)
  false | Set(test/server-received-end Global: true)
  Pause(2.0)
  test/client-init-success | Log("client-init-success") | Assert.Is(true)
  test/server-received-end | Log("server-received-end") | Assert.Is(true)
  test/client-received-smaller | Log("client-received-smaller") | Assert.Is(true)
  test/client-received-random1 | Log("client-received-random1") | Assert.Is(true)
})

@mesh(main)
@schedule(main test-assert)
@schedule(main network-test-server)
@schedule(main network-test-client)
@run(main 0.125 32) | Assert.Is(true)