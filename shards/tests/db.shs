@mesh(root)

@wire(extra-queries {
  Log("AAAAA")
  Pause(5.0)
  Log("HHHHHH")
  Repeat({
    Math.Inc(x)
    Math.Inc(y)
    [x y] | Log("Extra query")
    DB.Query("INSERT INTO integers VALUES (?, ?)" @db-file)
  } Times: 10)
})

@wire(failing-transaction {
  Maybe({
    DB.Transaction({
      Repeat({
        Math.Inc(x)
        Math.Inc(y)
        [x y] | DB.Query("INSERT INTO integers VALUES (?, ?)" @db-file)
      } Times: 10)
      "Something" | Fail ; fail on purpose, we test rerolling here
    } @db-file)
  })
  Msg("Failing transaction done")
})

@define(db-file "main.db")
@define(db-file-2 "custom.db")
@define(db-file-3 "backup.db")
@wire(db-test-1 {
  Maybe({
    @db-file | FS.Remove
    @db-file-2 | FS.Remove
    @db-file-3 | FS.Remove
  })

  "CREATE TABLE IF NOT EXISTS integers (x INTEGER, y INTEGER)" | DB.RawQuery(@db-file)
  [88 99 100 101 102] | DB.Query("INSERT INTO integers VALUES (?, ?), (?, ?), (?, NULL)" @db-file)
  [] | DB.Query("SELECT * FROM integers" @db-file) | Log
  Assert.Is({x: [88 100 102] y: [99 101 none]})
  Msg("Test 1 passed")

  [] | DB.Query("CREATE TABLE IF NOT EXISTS integers (x INTEGER, y INTEGER)" @db-file-2)
  [88 99 100 101 102] | DB.Query("INSERT INTO integers VALUES (?, ?), (?, ?), (?, NULL)" @db-file-2)
  [] | DB.Query("SELECT * FROM integers" @db-file-2) | Log
  Assert.Is({x: [88 100 102] y: [99 101 none]})
  Msg("Test 2 passed")

  11 >= x
  22 >= y
  DB.Transaction({
    Repeat({
      Math.Inc(x)
      Math.Inc(y)
      [x y] | DB.Query("INSERT INTO integers VALUES (?, ?)" @db-file)
    } Times: 10)
  } @db-file)
  [] | DB.Query("SELECT * FROM integers" @db-file) | Log
  Assert.Is({x: [88 100 102 12 13 14 15 16 17 18 19 20 21] y: [99 101 none 23 24 25 26 27 28 29 30 31 32]})
  Msg("Test 3 passed")

  Do(failing-transaction)

  Repeat({
    [] | DB.Query("SELECT * FROM integers" @db-file) | Log("Queried after detach")
    Assert.Is({x: [88 100 102 12 13 14 15 16 17 18 19 20 21] y: [99 101 none 23 24 25 26 27 28 29 30 31 32]})
  } Times: 10)
  Msg("Test 4 passed")

  DB.Backup(@db-file-3 @db-file)

  ; test CRDT capabilities
  DB.LoadExtension("crsqlite" @db-file)
  [] | DB.Query("create table foo (a primary key not null, b)" @db-file)
  [] | DB.Query("create table bar (a primary key not null, b, c, d)" @db-file)
  [] | DB.Query("create table baz (a primary key not null, b, c, d)" @db-file)
  [] | DB.Query("select crsql_as_crr('foo')" @db-file)
  [] | DB.Query("select crsql_as_crr('baz')" @db-file)
  [] | DB.Query("insert into foo (a,b) values (1,2)" @db-file)
  [] | DB.Query("insert into baz (a,b,c,d) values ('a', 'woo', 'doo', 'daa')" @db-file)
  [] | DB.Query("select * from foo" @db-file) | Log
  [] | DB.Query("select * from baz" @db-file) | Log
  [] | DB.Query("select * from crsql_changes" @db-file) | Log

  ; Test AsRows
  Repeat({
    [] | DB.Query("SELECT * FROM integers" @db-file AsRows: true) | Log
    Assert.Is([{x: 88 y: 99} {x: 100 y: 101} {x: 102 y: none} {x: 12 y: 23} {x: 13 y: 24} {x: 14 y: 25} {x: 15 y: 26} {x: 16 y: 27} {x: 17 y: 28} {x: 18 y: 29} {x: 19 y: 30} {x: 20 y: 31} {x: 21 y: 32}])
  } Times: 10)
  Msg("Test 5 passed")

  ; Test sqlite-vec
  DB.LoadExtension("sqlite-vec" @db-file)
  """
create virtual table vec_examples using vec0(
  sample_embedding float[8]
);

-- vectors can be provided as JSON or in a compact binary format
insert into vec_examples(rowid, sample_embedding)
  values
    (1, '[-0.200, 0.250, 0.341, -0.211, 0.645, 0.935, -0.316, -0.924]'),
    (2, '[0.443, -0.501, 0.355, -0.771, 0.707, -0.708, -0.185, 0.362]'),
    (3, '[0.716, -0.927, 0.134, 0.052, -0.669, 0.793, -0.634, -0.162]'),
    (4, '[-0.710, 0.330, 0.656, 0.041, -0.990, 0.726, 0.385, -0.958]');
  """ | DB.RawQuery(@db-file)

  [] | DB.Query("""-- KNN style query
select
  rowid,
  distance
from vec_examples
where sample_embedding match '[0.890, 0.544, 0.825, 0.961, 0.358, 0.0196, 0.521, 0.175]'
order by distance
limit 2""" @db-file) | Log
})

; @schedule(root cleanup)
@schedule(root db-test-1)
@run(root) | Assert.Is(true)
