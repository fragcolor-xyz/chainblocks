; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2020 Fragcolor Pte. Ltd.

@mesh(root)

; fail during await, uses awaitne(...)
@wire(test-1 {
  Await({false | Assert.Is(true)})
})

@schedule(root test-1)
@run(root 0.1) | Assert.Is(false)

; fail during http resolver, uses await(...)
@wire(test-2 {
  Http.Get("abc.abcdefg")
})

@schedule(root test-2)
@run(root 0.1) | Assert.Is(false)

; fail during cleanup, we cannot use pauses
; NOTE: Does not generate an error in `run`
@wire(test-3 {
  OnCleanup({Pause(10.0)})
})

@schedule(root test-3)
@run(root 0.1) | Assert.Is(true)

; out of range
@wire(test-4 {
  [10 20 1000 40 50] |
  IntsToBytes |
  Log
})

@schedule(root test-4)
@run(root 0.1) | Assert.Is(false)

; wrong type
@wire(test-5 {
  [10 20 2.0 40 50] |
  ExpectIntSeq |
  IntsToBytes |
  Log
})

@schedule(root test-5)
@run(root 0.1) | Assert.Is(false)

; wrong type
@wire(test-6 {
  [10 20 20 40 50] |
  ExpectIntSeq |
  IntsToBytes |
  ExpectLike([1 2 3]) |
  Log
})

@schedule(root test-6)
@run(root 0.1) | Assert.Is(false)

; fail the root wire propagated from Wait
@wire(test-7 {
  Detach(test-1) |
  Wait(test-1) |
  Assert.Is(true false)
})

@schedule(root test-7)
@run(root 0.1) | Assert.Is(false)


; fail the root wire propagated from Wait
@wire(test-8 {
  """4qjwieouqjweiouqweoi\") exit""" |
  ParseFloat |
  Log
})

@schedule(root test-8)
@run(root 0.1) | Assert.Is(false)

@mesh(main)

@wire(c1 {
  msg1 | Log
} Looped: true)

@wire(c2 {
  msg2 | Log
} Looped: true)

@wire(cDead {
  "Failed" | Fail
} Looped: true)

@wire(c {
  "Hello" = msg1
  "World" = msg2
  Branch([c1 c2 cDead] BranchFailure::Known) |
  Msg("And Universe")
} Looped: true)

@schedule(root c)
@run(root 0.2 25) | Assert.Is(false)

@wire(cc {
  "Hello" = msg1
  "World" = msg2
  Branch([c1 c2 cDead] BranchFailure::Ignore) |
  Msg("And Universe")
} Looped: true)

@schedule(root cc)
@run(root 0.2 25) | Assert.Is(true)

@wire(too-long-wire {
  Pause(120)
})

@wire(short-wire {
  Detach(too-long-wire) |
  Wait(too-long-wire Timeout: 1.0)
} Looped: true)

@schedule(root short-wire)
@run(root 0.2 25) | Assert.Is(false)

; Failure from Do should propagate to main wire
@wire(do-inner {
  "Intentional fail" | Fail
})

@wire(do-outer {
  Do(do-inner)
  true | Assert.Is(false)
})

@schedule(root do-outer)
@run(root 0.2 25) | Assert.Is(false)
