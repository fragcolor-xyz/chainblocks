; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2020 Fragcolor Pt

@mesh(root)

@template(compose-failure [name1 name2 test] {
  @wire(name1 {
    test
  })

  @wire(name2 {
    ; wrapper to catch the failure of wire composition
    Const(name1) | ToBytes | FromBytes | ExpectWire = wire
    WireRunner(wire)
    Wait(wire)
  })
})

; fail during await, uses awaitne(...)
@wire(test-1 {
  Await({false | Assert.Is(true)})
})

@schedule(root test-1)
@run(root FPS: 10) | Assert.Is(false)

; fail during http resolver, uses await(...)
@wire(test-2 {
  Http.Get("abc.abcdefg")
})

@schedule(root test-2)
@run(root FPS: 10) | Assert.Is(false)

; out of range
@wire(test-4 {
  [10 20 1000 40 50]
  IntsToBytes
  Log
})

@schedule(root test-4)
@run(root FPS: 10) | Assert.Is(false)

; wrong type
@wire(test-5 {
  [10 20 2.0 40 50]
  ExpectIntSeq
  IntsToBytes
  Log
})

@schedule(root test-5)
@run(root FPS: 10) | Assert.Is(false)

; wrong type
@wire(test-6 {
  [10 20 20 40 50]
  ExpectIntSeq
  IntsToBytes
  ExpectLike([1 2 3])
  Log
})

@schedule(root test-6)
@run(root FPS: 10) | Assert.Is(false)

; fail the root wire propagated from Wait
@wire(test-7 {
  Detach(test-1)
  Wait(test-1)
  Assert.Is(true false)
})

@schedule(root test-7)
@run(root FPS: 10) | Assert.Is(false)


; fail the root wire propagated from Wait
@wire(test-8 {
  """4qjwieouqjweiouqweoi\") exit"""
  ParseFloat
  Log
})

@schedule(root test-8)
@run(root FPS: 10) | Assert.Is(false)

@mesh(main)

@wire(c1 {
  msg1 | Log
} Looped: true)

@wire(c2 {
  msg2 | Log
} Looped: true)

@wire(cDead {
  "Failed" | Fail
} Looped: true)

@wire(c {
  "Hello" = msg1
  "World" = msg2
  Branch([c1 c2 cDead] BranchFailure::Known)
  Msg("And Universe")
} Looped: true)

@schedule(root c)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@wire(cc {
  "Hello" = msg1
  "World" = msg2
  Branch([c1 c2 cDead] BranchFailure::Ignore)
  Msg("And Universe")
} Looped: true)

@schedule(root cc)
@run(root FPS: 5 Iterations: 25) | Assert.Is(true)

@wire(too-long-wire {
  Pause(120)
})

@wire(short-wire {
  Detach(too-long-wire)
  Maybe(Wait(too-long-wire Timeout: 1.0) {
    Stop(too-long-wire)
    "time out" | Fail
  })
} Looped: true)

@schedule(root short-wire)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

; Failure from Do should propagate to main wire
@wire(do-inner {
  "Intentional fail" | Fail
})

@wire(do-outer {
  Do(do-inner)
  true | Assert.Is(false)
})

@schedule(root do-outer)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@compose-failure(exposed-failure1 exposed-failure-wrapper1 {
  [] | Set(a Tracked: true)
  1 >> a
})

@schedule(root exposed-failure-wrapper1)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@compose-failure(exposed-failure2 exposed-failure-wrapper2 {
  [1] | Set(a Tracked: true)
  1 | AppendTo(a)
})

@schedule(root exposed-failure-wrapper2)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@compose-failure(exposed-failure3 exposed-failure-wrapper3 {
  [] | Set(tab Tracked: true)
  1 | Push(tab "x")
})

@schedule(root exposed-failure-wrapper3)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@compose-failure(clear-non-mutable clear-non-mutable-wrapper {
  [1 2 3] = a ; immutable
  Clear(a)
})

@schedule(root clear-non-mutable-wrapper)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@compose-failure(event-read-used-before-send event-read-used-before-send-wrapper {
  Events.Receive("Hello")
})

@schedule(root event-read-used-before-send-wrapper)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@compose-failure(append-type1 append-type1-wrapper {
  ["x"] | Set(a Tracked: true)
  1 | AppendTo(a)
})

@schedule(root append-type1-wrapper)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@wire(fail-on-await-thread {
  Await({1.0 | SleepBlocking! | false | Assert.Is(true)})
})

@schedule(root fail-on-await-thread)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@compose-failure(compose-fail-1 compose-fail-1-wrapper {
  1 | Is(hello)
})

@schedule(root compose-fail-1-wrapper)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@compose-failure(compose-fail-2 compose-fail-2-wrapper {
  1 | Is(hello)
})

@schedule(root compose-fail-2-wrapper)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@compose-failure(compose-fail-3 compose-fail-3-wrapper {
  1 | String.ToLower
})

@schedule(root compose-fail-3-wrapper)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)

@wire(rename-fail {
  "Hello" = content
  "hello.txt" | FS.Write(content)
  "hello1.txt" | FS.Write(content)
  "hello.txt" | FS.Rename("hello1.txt")
})

@schedule(root rename-fail)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)
"hello.txt" | FS.Remove

@wire(rename-fail-2 {
  "Hello" = content
  "hello3.txt" | FS.Rename(content)
})

@schedule(root rename-fail-2)
@run(root FPS: 5 Iterations: 25) | Assert.Is(false)
