@define(timestep #(1.0 | Math.Divide(120.0)))

@template(spin-transform [t location] {
  t
  {Math.Multiply(0.2) | Math.AxisAngleX | Math.Rotation >= rotX}
  {Math.Multiply(0.7) | Math.AxisAngleY | Math.Rotation >= rotY}
  {Math.Multiply(0.9) | Math.AxisAngleZ | Math.Rotation >= rotZ}
  location | Math.Translation | Math.MatMul(rotX) | Math.MatMul(rotY) | Math.MatMul(rotZ)
})

@wire(gfx {
  Once({
    0.0 >= time

    ; translate to the new syntax
    GFX.BuiltinMesh(Type: BuiltinMeshType::Cube) >= mesh
    @f3(0 0 0) | Math.Translation >= transform-0

    ; The first pass that just renders the spinning cube
    GFX.BuiltinFeature(BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(BuiltinFeatureId::BaseColor) >> features
    GFX.DrawQueue >= queue
    GFX.DrawablePass(Features: features Queue: queue) >> render-steps1

    ; The effect pass that modifies the rendered cube image
    ; It also uses the depth buffer from the rendered cube
    GFX.EffectPass(
      ; This indicates that the outputs from previous passes named "color" & "depth" are used within the pass
      ; EffectPass will automatically expose them as shader bindings
      Inputs: ["color" "depth"]
      EntryPoint: {; Begin shader
        ; Texture coordinates are named texCoord0/1/2/etc. by convention
        Shader.ReadInput("texCoord0") >= uv
        uv | Take(0) >= u
        uv | Take(1) >= v

        ; Manipulate coordinates
        v | Math.Multiply(300.0) | Math.Cos | Math.Multiply(0.001) | Math.Add(u) > u
        MakeFloat2(u v) | Math.Multiply(2.0) | Math.Mod(@f2(1.0 1.0)) > uv

        ; Sample the previous pass color output
        uv | Shader.SampleTextureCoord("color") | ToFloat4 >= color

        ; Sample the previous pass depth output
        ; Linearize and scale the result to display it, since depth is stored as normalized 1/z
        uv | Shader.SampleTextureCoord("depth") | Take([0])
        Shader.LinearizeDepth | Math.Subtract(6.0) | Math.Divide(4.0) >= depth

        ; Write output to "color"
        MakeFloat4(depth depth 1.0 1.0) | Math.Multiply(color)
        Shader.WriteOutput("color")
        ; End shader
      }
    ) >> render-steps1

    {Position: @f3(0 0 8) Target: @f3(0 0 0)} | Math.LookAt >= view-transform
    GFX.View(View: view-transform) >= view

    ; Test copy pass
    GFX.CopyPass(
      Inputs: ["color"]
      Outputs: [{Name: "color" Format: TextureFormat::RGBA8UnormSrgb}]
      OutputScale: {main: @f2(0.5)}
    ) >> render-steps1

    ; Test copy pass x2
    GFX.CopyPass(
      Inputs: ["color"]
      Outputs: [{Name: "color" Format: TextureFormat::RGBA8UnormSrgb}]
      OutputScale: {name: "color" scale: @f2(0.5)}
    ) >> render-steps1

    ; Direct copy, as last step where the output will be replaced by the backbuffer
    ; This way we can see the effect of the previous downsamples
    GFX.CopyPass(
      Inputs: ["color"]
      Outputs: [{Name: "color" Format: TextureFormat::RGBA8UnormSrgb}]
    ) >> render-steps1
  })

  view-transform | FreeCamera > view-transform

  time | Math.Add(@timestep) > time
  @spin-transform(time @f3(0.0 0 0)) > transform-0

  transform-0 | GFX.Drawable(Mesh: mesh Params: {BaseColor: @f4(1 1 1 1)}) | GFX.Draw(Queue: queue)
  GFX.Render(Steps: render-steps1 View: view)
} Looped: true)

@wire(test-wire {
  GFX.MainWindow(Title: "Shards Window" Width: 1280 Height: 720 Contents: {Step(gfx)})
} Looped: true LStack: 4194304)

@mesh(root)
@schedule(root test-wire)

@run(root FPS: 120 Iterations: 200) | Assert.Is(true)
