(def timestep (/ 1.0 120.0))
(defmesh root)

(defshards spin-transform [t location]
  t
  (| (Math.Multiply 0.2) (Math.AxisAngleX) (Math.Rotation) >= .rotX)
  (| (Math.Multiply 0.7) (Math.AxisAngleY) (Math.Rotation) >= .rotY)
  (| (Math.Multiply 0.9) (Math.AxisAngleZ) (Math.Rotation) >= .rotZ)
  location (Math.Translation) (Math.MatMul .rotX) (Math.MatMul .rotY) (Math.MatMul .rotZ))

(defshards compute-rt-region-16-9 []
  (| (Take [0 1]) >= .min)
  (| (Take [0]) >= .min-x)
  (| (Take [1]) >= .min-y)
  (| (Take [2 3]) (Math.Subtract .min) >= .size)
  .size (Take [0]) >= .size-x (Math.Multiply (/ 9.0 16.0)) >= .size-y

  .size-x (Math.Add .min-x) >= .max-x
  .size-y (Math.Add .min-y) >= .max-y
  [.min-x .min-y .max-x .max-y] (ToFloat4))

(defloop test-wire
  (Setup
   (GFX.BuiltinMesh :Type BuiltinMeshType.Cube) >= .cube-mesh
   (GFX.DrawQueue) >= .queue

   (GFX.BuiltinFeature BuiltinFeatureId.Transform) >> .features
   (GFX.BuiltinFeature  BuiltinFeatureId.BaseColor) >> .features
   (GFX.DrawablePass :Features .features :Queue .queue) >> .render-steps

   ; UI Setup
   (GFX.DrawQueue) >= .ui-draw-queue
   (GFX.UIPass .ui-draw-queue) >> .render-steps

   ;; Create view
   {:Position (Float3 0 0 20) :Target (Float3 0 0 0)} (Math.LookAt) >= .view-transform
   (GFX.View :View .view-transform) >= .view)

  ; Poll inputs
  (GFX.MainWindow
   :Title "SDL Window" :Width 1280 :Height 720
   :DetachRenderer true) = .window-ctx

  ; Input test code
  (Inputs.Detached
   .window-ctx :Name "Camera" :Priority 1
   :Contents
   (->
    (Inputs.KeyDown "W" :Action
                    (->
                     (Log "W Key down")))))

  ; Debug UI & Graphics
  (GFX.Renderer
   :Window .window-ctx
   :Contents (->
    (Animation.Timer) >= .time

    (Float4 0 1 0 1) >= .color
    (spin-transform .time (Float3 0 0 0))
    (GFX.Drawable :Mesh .cube-mesh :Params {:baseColor .color}) (GFX.Draw .queue)

    (Inputs.Detached .window-ctx :Name "UI" :Priority 10
                     :Contents
                     (->
                      (UI .ui-draw-queue
                          (->
                           (Inputs.DebugUI)))))

   (GFX.Render :View .view :Steps .render-steps))))

(schedule root test-wire)
(if (run root timestep 100) nil (throw "Root tick failed"))
