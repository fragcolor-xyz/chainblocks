@include("hello2.shs")

@define(x 1)

"Hello World!" | Log
@read(AsBytes: true File: "data/hello.txt") | Log
@say("Ciao")

@x | Assert.Is(1)

@define(things (2 | Math.Add(@one)))

@things | @things | Log

@color(0x112233) | Log
@color(0x1122) | Log
@color(0x11223344) | Log
@color(0.1 0.3 0.7 1.0) | Log
@color(10 30 60 255) | Log
@color(1.0) | Log

@mesh(root)
@wire(test {
  "This is a test" | Log
})
@schedule(root test)
@run(root)

@i2(1) | Log
@i2(1 2) | Log

@i3(1) | Log
@i3(1 2 3) | Log

@i4(1) | Log
@i4(1 2 3 4) | Log

@f2(1) | Log
@f2(1 2) | Log

@my-macro(3)
Msg(@macro1("Ciao")) | Log

@template(base [texture] {
  "TEST" = texture
})

@base(test-shards-1)
test-shards-1 | Log | Assert.Is("TEST")

@base(test-shards-2) | Log | Assert.Is("TEST")

none | When(IsNone {Msg("None")})

Type::Int | Log

@template(add-and [operation operand1 operand2] {
   operand2 | Math.Add(operand1) | operation
})

@add-and(Math.Multiply(2) 2 3) | Log

@type(Type: Type::Int Variable: true) | Log
@type(Type::Int true) | Log
@type(Type::Int) | Log ; Not a variable
@type([Type::Int]) | Log ; a sequence of Ints
@type({*: Type::Int}) | Log ; a map of Ints with any key value possible
@define(int-var @type(Type::Int true)) | Log
@type({GFX.Mesh}) | Log
@type([@int-var]) | Log
