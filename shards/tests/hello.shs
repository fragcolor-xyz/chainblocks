"debug" | SetLogLevel

@include("hello2.shs")

@define(x 1)

"Hello World!" | Log
@read(Bytes: true File: "data/hello.txt") | Log
@say("Ciao")

FlushLog

@x | Assert.Is(1)

@define(things (2 | Math.Add(@one)))

@things | @things | Log

@color(0x112233) | Log
@color(0x1122) | Log
@color(0x11223344) | Log
@color(0.1 0.3 0.7 1.0) | Log
@color(10 30 60 255) | Log
@color(1.0) | Log
244 = red
@color(red 10 20 255) | Log

@mesh(root)
@wire(test {
  "This is a test" | Log
})
@schedule(root test)
@run(root) | Log("@run result") | Assert.Is(true)

@i2(1) | Log
@i2(1 2) | Log

@i3(1) | Log
@i3(1 2 3) | Log

@i4(1) | Log
@i4(1 2 3 4) | Log

@f2(1) | Log
@f2(1 2) | Log

2.5 = x
@f2(1.0 x) | Log

@my-macro(3)
Msg(@macro1("Ciao")) | Log

@template(base [texture] {
  "TEST" = texture
})

@base(test-shards-1)
test-shards-1 | Log | Assert.Is("TEST")

@base(test-shards-2) | Log | Assert.Is("TEST")

none | When(IsNone {Msg("None")})

Type::Int | Log

@template(add-and [operation operand1 operand2] {
  operand2 | Math.Add(operand1) | operation
})

@add-and(Math.Multiply(2) 2 3) | Log

@type(Type: Type::Int Variable: true) | Log
@type(Type::Int true) | Log
@type(Type::Int) | Log ; Not a variable
@type([Type::Int]) | Log ; a sequence of Ints
@type({none: Type::Int}) | Log ; a map of Ints with any key value possible
@define(int-var @type(Type::Int true))
@type({GFX.Mesh}) | Log
@type(GFX.Mesh) | Log
@type([@int-var]) | Log
@type(GFX.BuiltinMesh InputType: true) | Is(@type(Type::None)) | Assert.Is(true)

@type([Type::Int]) | ToBytes | FromBytes | Is(@type([Type::Int])) | Assert.Is(true)
@type({A: Type::Int B: Type::String}) | ToBytes | FromBytes | Is(@type({A: Type::Int B: Type::String})) | Assert.Is(true)

{x: 1 y: 2} | @to-j-from-j | HexToBytes | BytesToString | Log | Assert.Is("""{"x":1,"y":2}""")

@define(my-trait @type({x: Type::Int y: Type::Int}))
@my-trait | Log

@wire(too-early {Msg("But it's") | Do(wire-3)})
@wire(wire-1 {Msg("Ok")})
@wire(wire-2 {Do(wire-1)})
@wire(wire-3 {Do(wire-2)})

Do(too-early)

@mesh(branched-mesh)

@wire(test-branched-mesh {
  Msg("Test branched mesh")
})

Branch([test-branched-mesh] Mesh: branched-mesh)

{x: 1 y: 2} = xy
xy | Take("x") | Log | Assert.Is(1) | Math.Add(2) | Log | Assert.Is(3)

@wire(table-input {
  {Take("x") | Log}
  {Take("y") | Log}
} Pure: true)

xy | Do(table-input) | Log

@if(true Msg("True") Msg("False"))

"namespaced" = n/text

@define(n/text2 "namespaced")

@n/text2 | Log
n/text | Log

{A: 10 B: "Ciao" C: 3.3} | Expect(@type({A: Type::Int B: Type::String none: Type::Any})) | Log

"""
"Hello World!" | Log
@x-defined | Log
""" | Shards.Read | Log | Shards.Distill(Name: "my wire" Defines: {x-defined: 10}) | Log = mey-weired
WireRunner(mey-weired)

["B" "C" "D" "E" "F"] >= bcdef

"A" | PrependTo(bcdef)
bcdef | Log

"a" >= my-a
@template(change-a [a] {
  a > my-a
  "b" >= my-b
  my-b | Log
  a > my-b
})

@change-a("b")

my-a | Log

@template(test-nesting-var-set [w-name] {
  @wire(w-name {
    When(IsNone {
      3 = x
    })
    Once({
      1 = x
      2 | Set(y)
      Sequence(z)
    })
    x | Log
    y | Log
    z | Log
  })
})

@test-nesting-var-set(test-nesting-var-set-1)

Do(test-nesting-var-set-1)

x | Log

[[1 2 3] [2 3 4] [3 4 5]] | Reduce(Math.Add($0)) | Assert.Is([6 9 12]) | Log

@template(table-user [table table-1234] {
  table:key1 | Log

  100 | Set(table "key3")
  100 | Set(table-1234 "key3")
})

10 | Set(table-123 "key1")
20 | Set(table-123 "key2")
30 | Set(table-1234 "key1")
40 | Set(table-1234 "key2")
@table-user(table-123 table-1234)
table-123 | Log
table-1234 | Log

Random.Name | Log
Random.Name(10 " ") | Log

@template(foo-predicate [val] {val | IsMore(2) | Or | val | IsLess(-2)})

When(@foo-predicate(3) {Msg("More than 2")})
WhenNot(@foo-predicate(1) {Msg("Less than 2")})
When(@foo-predicate(-3) {Msg("Less than -2")})
WhenNot(@foo-predicate(-1) {Msg("More than -2")})

; test String.Starts(With: ...)
"Hello World!" | String.Starts(With: "Hello") | Assert.Is(true) | Log
; also test that doesn't start with
"Hello World!" | LogType("Type logging test") | String.Starts(With: "World") | Assert.Is(false) | Log

["1" "2" "3"] = zs1
["4" "5" "6"] = zs2
["7" "8" "9"] = zs3
["10" "20" "30" "40"] = zs4
Zip([zs1 zs2 zs3 zs4]) | Assert.Is([["1" "4" "7" "10"] ["2" "5" "8" "20"] ["3" "6" "9" "30"]]) | Log("Zipped")