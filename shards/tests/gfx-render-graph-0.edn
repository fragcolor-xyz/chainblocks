(defloop pass
  = .tsl
  (Setup (GFX.BuiltinMesh) >= .mesh
         (RandomFloat 16.0) >= .offset
         (RandomFloat) >= .c-r (RandomFloat) >= .c-g (RandomFloat) >= .c-b
         (Float4 .c-r .c-g .c-b 1.0) = .color
         .tsl (Math.Translation) = .tsl-mat

         ; Setup pipeline
         (GFX.DrawQueue) = .queue
         (GFX.BuiltinFeature :Id BuiltinFeatureId.Transform) >> .features
         (GFX.BuiltinFeature :Id BuiltinFeatureId.BaseColor) >> .features
         {:Features .features :Queue .queue
          :Outputs [{:Name "color"}
                    {:Name "depth"}]} (GFX.DrawablePass) >> .render-steps)

  (Animation.Timer :Offset .offset) = .time
  .time (Math.Multiply 0.2) (Math.AxisAngleX) (Math.Rotation) >= .rotX
  .time (Math.Multiply 0.7) (Math.AxisAngleY) (Math.Rotation) >= .rotY
  .time (Math.Multiply 0.9) (Math.AxisAngleZ) (Math.Rotation) >= .rotZ
  .tsl-mat (Math.MatMul .rotX) (Math.MatMul .rotY) (Math.MatMul .rotZ)

  (GFX.Drawable :Mesh .mesh :Params {:baseColor .color}) (GFX.Draw .queue)
  (GFX.Render :Steps .render-steps :View .view))

; This tests correct rendering of several separate Render calls that might write to the same output
; the render graph builder will figure out that only the first render has to clear
(defwire branch-init
  (Float3 -1.2 0.0 0.0) (Spawn pass)
  (Float3 0.0 0.0 0.0) (Spawn pass)
  (Float3 1.2 0.0 0.0) (Spawn pass))

(defloop test-wire
  (Setup
    ; Create view
   {:Position (Float3 0 0 8) :Target (Float3 0 0 0)} (Math.LookAt) >= .view-transform
   (GFX.View :View .view-transform) >= .view)

  ; Special clear pass
  {:EntryPoint (->
                (Shader.ReadInput "texCoord0") (ToFloat4) (Math.Add (Float4 0 0 0 1))
                (Shader.WriteOutput "color") ; End shader
                )}(GFX.EffectPass) >> .render-steps
  (GFX.Render :Steps .render-steps)

  ; Spawned passes
  (Branch [branch-init]))

(defmesh root)
(schedule root (Wire "" :Looped
                     (GFX.MainWindow
                      :Title "SDL Window" :Width 1280 :Height 720
                      :Contents (-> (Step test-wire)))))
(if (run root (/ 1.0 120.0) 100) nil (throw "root tick failed"))
