(def Root (Mesh))

; Using (ExpectLike)
(schedule
 Root
 (Wire "test-expect-like"
       "\"Test\"" (FromJson)
       (ExpectLike "")
       (Log "String from json")

       "100" (FromJson)
       (ExpectLike 0)
       (Log "Number from json")

       "{\"name\": \"john\"}" (FromJson)
       (ExpectLike :OutputOf (-> {:name ""}))
       (Log "Table from json")
       (Take "name")
       (Log "Taken from table")

       (Sequence .seq)
       (GFX.BuiltinMesh :Type BuiltinMeshType.Cube) >= .mesh
       (ForRange 0 10 (->
                       (Math.MatIdentity) (GFX.Drawable :Mesh .mesh) >> .seq))

       ; Use expect-like to pass the dynamic sequence to GFX.Draw
       (GFX.DrawQueue) >= .queue
       .seq (ExpectLike :OutputOf (-> (Math.MatIdentity) (GFX.Drawable :Mesh .mesh) >> .seq-1 .seq-1))
       (GFX.Draw .queue)))
(tick Root)

; Variation using (Expect (type...))
(schedule
 Root
 (Wire "test-expect"
       "\"Test\"" (FromJson)
       (Expect (type String))
       (Log "String from json")

       "100" (FromJson)
       (Expect (type Int))
       (Log "Number from json")

       "{\"name\": \"john\"}" (FromJson)
       (Expect (type {:name String}))
       (Log "Table from json")
       (Take "name")
       (Log "Taken from table")

       (Sequence .seq)
       (GFX.BuiltinMesh :Type BuiltinMeshType.Cube) >= .mesh
       (ForRange 0 10 (->
                       (Math.MatIdentity) (GFX.Drawable :Mesh .mesh) >> .seq))

       ; Use expect-like to pass the dynamic sequence to GFX.Draw
       (GFX.DrawQueue) >= .queue
       .seq (Expect (type [(GFX.Drawable)]))
       (GFX.Draw .queue)))
(tick Root)
