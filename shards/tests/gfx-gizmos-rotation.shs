; This .shs file is for testing the rotation gizmo as well as the various shapes/etc added with the rotation gizmo
; In general, the base code is adapted from `gfx-gizmos.shs` which tests mainly the TranslationGizmo and various shapes
; In this script, the RotationGizmo is added to the same context as the TranslationGizmo with additional discs and solid rects
; Some of the shapes/shards/code already tested in `gfx-gizmos.shs` are left out.

@define(timestep #(1.0 | Math.Divide(120.0)))
@mesh(root)
@define(blendAlphaPremul {Operation: BlendOperation::Add Src: BlendFactor::One Dst: BlendFactor::OneMinusSrcAlpha})
@define(blendOne {Operation: BlendOperation::Add Src: BlendFactor::One Dst: BlendFactor::One})

@template(spin-transform [t location] {
  t >= tmp-0
  tmp-0 | Math.Multiply(0.2) | Math.AxisAngleX | Math.Rotation >= rotX
  tmp-0 | Math.Multiply(0.7) | Math.AxisAngleY | Math.Rotation >= rotY
  tmp-0 | Math.Multiply(0.9) | Math.AxisAngleZ | Math.Rotation >= rotZ
  location | Math.Translation | Math.MatMul(rotX) | Math.MatMul(rotY) | Math.MatMul(rotZ)
})

@wire(test-wire {
  Once({
    0.0 >= time
    GFX.BuiltinMesh(Type: BuiltinMeshType::Cube) >= mesh
    @f3(0 0 0) | Math.Translation >= transform-0

    GFX.DrawQueue >= queue
    GFX.DrawQueue >= editor-queue
    GFX.DrawQueue >= editor-queue-np-depth

    ; Create render steps
    GFX.BuiltinFeature(BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(BuiltinFeatureId::BaseColor) >> features

    GFX.DrawablePass(Features: features Queue: queue) >> render-steps
    GFX.DrawablePass(Features: features Queue: editor-queue) >> render-steps
    GFX.DrawablePass(Features: features Queue: editor-queue-np-depth
                     Outputs: [{Name: "color"}
                               {Name: "depth" Clear: true}]) >> render-steps
    
    ; Create view
    {Position: @f3(3 3 8) Target: @f3(0 0 0)} | Math.LookAt >= view-transform
    GFX.View(View: view-transform) >= view
  })
  ; End setup
  GFX.MainWindow(
    Title: "SDL Window" Width: 1280 Height: 720
    Contents: {
      time | Math.Add(@timestep) > time

      ; Link the transform (?) to the cube mesh and get a drawable 
      ; Not linked, transform-0 value is updated by Gizmos.Translation every loop
      transform-0 | GFX.Drawable(Mesh: mesh Params: {baseColor: @f4(1 0 0 1)}) >= drawable-0
      GFX.Draw(queue)

      ; Draw helpers (using scene depth)
      ; Provides a context for rendering gizmos
      Gizmos.Context(Queue: editor-queue View: view
                     Content: {
                       ; Highlights the object (drawable) attached to gizmo, show wireframe
                       drawable-0 | Gizmos.Highlight
                       @f3(0 0 0) >= a
                       @f3(0 0 2) >= z-2
                       ; Draws the 3 axes
                       Gizmos.Line(A: @f3(0 0 0) B: @f3(2 0 0) Color: @f4(1 0 0 1) Thickness: 8)
                       Gizmos.Line(A: a B: @f3(0 2 0) Color: @f4(0 1 0 1))
                       Gizmos.Line(A: a B: z-2 Color: @f4(0 0 1 1) Thickness: 4)

                       @f3(1 0 0) >= xbase
                       @f3(0 1 0) >= ybase
                       @f3(0 0 1) >= zbase
                       ; This yields a vector named norm that is facing the same direction as the camera
                       @f3(-1 1 -1) | Math.Cross(@f3(1 0 0)) >= norm

                       Gizmos.Line(A: @f3(0 0 0) B: @f3(-1 1 -1) Color: @f4(1 1 1 1) Thickness: 4)

                       ; This red disc renders even if back-face culling is enabled
                       Gizmos.Disc(Center: @f3(2 0 0) XBase: @f3(1 0 0) YBase: @f3(0 1 0) OuterRadius: 1.0 InnerRadius: 0.5 Color: @f4(1.0 0.2 0.2 1.0))

                       ; This green disc does not render if back-face culling is enabled (which is true by default)
                       Gizmos.Disc(Center: @f3(0 2 0) XBase: xbase YBase: norm OuterRadius: 1.0 InnerRadius: 0.5 Color: @f4(0.2 1.0 0.2 1.0) Culling: false)

                       ; This red solid rect renders even if back-face culling is enabled
                       Gizmos.SolidRect(Center: @f3(-2 0 2) XBase: norm YBase: xbase Size: @f2(1 1) Color: @f4(1.0 0.2 0.2 1.0))

                       ; This green solid rect does not render if back-face culling is enabled
                        Gizmos.SolidRect(Center: @f3(2 0 2) XBase: xbase YBase: norm Size: @f2(1 1) Color: @f4(0.2 1.0 0.2 1.0) Culling: false)

                       ; Imaginary object (box)
                       Gizmos.Box(Center: @f3(1 1 1) Size: @f3(0.5 0.2 0.3) Color: @f4(0.4 0.4 1.0 1.0) Thickness: 4)
                     })
      ; Draw on top of everthing (ignore depth)
      ; Translation gizmo itself, attached to transform-0
      Gizmos.Context(Queue: editor-queue-np-depth View: view
                     Content: {
                       transform-0 | Gizmos.Translation > transform-0
                       Gizmos.Rotation > transform-0
                     })
      GFX.Render(Steps: render-steps View: view)
    }
  )
} Looped: true)

@schedule(root test-wire)
@run(root FPS: 120 Iterations: 200)