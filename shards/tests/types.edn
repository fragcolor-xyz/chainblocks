(defmesh root)

(defwire test1
  [2.3 2 "Hello"]
  (ForEach
   (->
    (Log "value")
    (Cond [(-> (IsInt)) (-> (ExpectInt) (Log "Int Value"))
           (-> (IsFloat)) (-> (ExpectFloat) (Log "Float Value"))
           (-> (IsString)) (-> (ExpectString) (Log "String Value"))
           (-> true) (-> "should not happen" (Fail))]))))

(schedule root test1)
(if (run root 0.1) nil (throw "Root tick failed"))

(defwire test2
  (type Int) (Log "Integer type")
  (var-type Int) (Log "Int var type")
  (var-type String) (Log "String var type")
  (type Int2) (Log "Int2 type")
  (type None) (Log "None type")
  (type [Int]) (Log "Int seq type")
  (type [(var-type Int)]) (Log "Int seq var type")
  (type {:key Int}) (Log "Table type")
  (type (GFX.Drawable)) (Log "Drawable object type")
  (type (GFX.MainWindow)) (Log "MainWindow object type")
  (type WindingOrder) (Log "Enum type (WindingOrder)")
  (type [Any]) (Log "Any seq type")
  (type [Image]) (Log "Image seq type")
  (type [Wire]) (Log "Wire seq type")
  (type [Shard]) (Log "Shard seq type")
  (type {:key String :object (var-type [(var-type (GFX.Feature))])}) (Log "Complex table type"))

(schedule root test2)
(if (run root 0.1) nil (throw "Root tick failed"))
