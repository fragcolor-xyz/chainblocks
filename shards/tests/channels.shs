; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2020 Fragcolor Pte. Ltd.

@mesh(root)

@wire(producer {
  Repeat({
    "A message" |
    Produce("a") |
    Log("Produced: ")
  } 10)
  Complete("a")
})

@wire(consumer-1 {
  Consume("a" @type(Type::String)) |
  Log("Consumed 1: ")
} Looped: true)

@wire(consumer-2 {
  Consume("a" @type(Type::String) 5) |
  Log("Consumed 2: ")
} Looped: true)

@schedule(root producer)
@schedule(root consumer-1)
@schedule(root consumer-2)
@run(root FPS: 100) | Assert.Is(true)

@wire(producer-2 {
  Repeat({
    "A message" |
    Broadcast("b"  NoCopy!!: true) |
    Log("Broadcasted: ")
    Pause(0.1)
  } 10)
  Complete("b")
})

@wire(consumer-listen-0 {
  Listen("b" @type(Type::String)) |
  Log(#(["0" ": "] | String.Join))
} Looped: true)

@wire(consumer-listen-1 {
  Listen("b" @type(Type::String)) |
  Log(#(["1" ": "] | String.Join))
} Looped: true)

@wire(consumer-listen-2 {
  Listen("b" @type(Type::String)) |
  Log(#(["2" ": "] | String.Join))
} Looped: true)

@wire(consumer-33 {
  Listen("b" @type(Type::String) 3) |
  Log("Consumed 33: ")
} Looped: true)

@schedule(root producer-2)
@schedule(root consumer-listen-0)
@schedule(root consumer-listen-1)
@schedule(root consumer-listen-2)
@schedule(root consumer-33)
@run(root FPS: 10) | Assert.Is(true)

Msg("Done")