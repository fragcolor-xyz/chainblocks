; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2020 Fragcolor Pte. Ltd.

@mesh(root)

@wire(producer {
  Repeat({
    "A message" |
    Produce("a") |
    Log("Produced: ")
  } 10)
  Complete("a")
})

@wire(consumer-1 {
  Consume("a" @type(Type::String)) |
  Log("Consumed 1: ")
} Looped: true)

@wire(consumer-2 {
  Consume("a" @type(Type::String) 5) |
  Log("Consumed 2: ")
} Looped: true)

@schedule(root producer)
@schedule(root consumer-1)
@schedule(root consumer-2)
@run(root FPS: 100) | Assert.Is(true)

@wire(producer-2 {
  Repeat({
    "A message" |
    Broadcast("b") |
    Log("Broadcasted: ")
    Pause(0.1)
  } 10)
  Complete("b")
})

@template(consumers [wire-name wire-name-str] {
  @wire(wire-name {
    Listen("b" @type(Type::String))
    Log(wire-name-str)
  } Looped: true)
})

@wire(consumer-33 {
  Listen("b" @type(Type::String) 3) |
  Log("Consumed 33: ")
} Looped: true)

@schedule(root producer-2)

@consumers(consumer-00 "0")
@schedule(root consumer-00)

@consumers(consumer-11 "1")
@schedule(root consumer-11)

@consumers(consumer-22 "2")
@schedule(root consumer-22)

@schedule(root consumer-33)

@run(root FPS: 10) | Assert.Is(true)

@wire(test-flush {
  1 | Produce("test-flush")
  2 | Produce("test-flush")
  3 | Produce("test-flush")
  4 | Produce("test-flush")

  Consume("test-flush" Type: @type(Type::Int)) | Assert.Is(1)

  Flush("test-flush")

  5 | Produce("test-flush")

  Consume("test-flush" Type: @type(Type::Int)) | Assert.Is(5)
})

@schedule(root test-flush)
@run(root FPS: 10) | Assert.Is(true)

Msg("Done")