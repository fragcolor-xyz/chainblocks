@define(timestep #(1.0 | Math.Divide(120.0)))
@mesh(root)

@define(base {
  Once({
    GFX.BuiltinMesh(Type: BuiltinMeshType::Cube) >= mesh

    GFX.BuiltinFeature(BuiltinFeatureId::Transform) >> features
    GFX.BuiltinFeature(BuiltinFeatureId::BaseColor) >> features
    GFX.DrawQueue >= queue
    GFX.DrawablePass(Features: features Queue: queue) >> render-steps

    GFX.Texture(Format: TextureFormat::R16Uint) >= u8-tex
    GFX.BuiltinFeature(BuiltinFeatureId::Transform) >> features-1
    GFX.Feature(State: {DepthCompare: CompareFunction::Equal DepthWrite: false}
                Params: {index: 0}
                Shaders:
                [{Stage: ProgrammableGraphicsStage::Fragment
                  EntryPoint: {
                    ; Write to index output
                    Shader.ReadBuffer("index")
                    Shader.WriteOutput("index")}}]) >> features-1

    ; Second pass to render to index texture
    GFX.DrawablePass(Features: features-1
                      Outputs: [{Name: "index" Texture: u8-tex}
                                {Name: "depth"}]
                      Queue: queue) >> render-steps
    
    {Position: @f3(0 1 8) Target: @f3(0 0 0)} | Math.LookAt >= view-transform

    GFX.View(View: view-transform) >= view
  })
})

@wire(test-copy-async {
  @base
  GFX.MainWindow(
    Title: "SDL Window" Width: 1280 Height: 720
    UseDisplayScaling: false
    Contents: {
      Once({0 >= frame-index})

      @f3(-1.0 0.0 0.0) | Math.Translation |
      GFX.Drawable(Mesh: mesh Params: {index: frame-index}) | GFX.Draw(queue)
      @f3(1.0 0.0 0.0) | Math.Translation |
      GFX.Drawable(Mesh: mesh Params: {index: 0xffff}) | GFX.Draw(queue)

      GFX.Render(Steps: render-steps View: view)

      ; This end frame is required when using `Wait: true` with the ReadTexture shard,
      ; since rendering command buffers are queued in EndFrame
      ; and texture copy needs to happen afterwards
      ; GFX.EndFrame

      u8-tex | GFX.ReadTexture = image
      frame-index | Log("This frame index")
      @i2(400 400) | GetImagePixel(image AsInteger: true Default: @i4(0)) = p0 | Log("Pixel (400, 400)")
      @i2(800 400) | GetImagePixel(image AsInteger: true Default: @i4(0)) = p1 | Log("Pixel (800, 400)")

      ; With a frame delay, check that the values match the expected ones
      frame-index | When(IsMore(0) {
        p0:0 = p0-x
        p1:0 = p1-x
        frame-index | Math.Subtract(1) = expected-frame-index
        p0-x | Assert.Is(expected-frame-index)
        p1-x | Assert.Is(0xffff)
      })

      Math.Inc(frame-index)
    }
  )
} Looped: true)

@wire(test-copy-sync {
  @base
  ; Sync test
  GFX.MainWindow(
    Title: "SDL Window" Width: 1280 Height: 720
    UseDisplayScaling: false
    Contents: {
      @f3(-1.0 0.0 0.0) | Math.Translation |
      GFX.Drawable(Mesh: mesh Params: {index: 0xffff}) | GFX.Draw(queue)

      GFX.Render(Steps: render-steps View: view)

      ; This end frame is required when using `Wait: true` with the ReadTexture shard,
      ; since rendering command buffers are queued in EndFrame
      ; and texture copy needs to happen afterwards
      GFX.EndFrame

      u8-tex | GFX.ReadTexture(Wait: true) = image
      @i2(400 400) | GetImagePixel(image AsInteger: true Default: @i4(0)) = p0 | Log("Pixel (400, 400)")
      p0 | Assert.Is(@i4(65535 0 0 0))
    }
  )
} Looped: true)

@schedule(root test-copy-async)
@run(root FPS: 120 Iterations: 32) | Assert.Is(true)

@schedule(root test-copy-sync)
@run(root FPS: 120 Iterations: 32) | Assert.Is(true)