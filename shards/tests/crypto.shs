@include("hello2.shs") ; to use the macro `if`

@mesh(root)

@wire(main {
  "caution juice atom organ advance problem want pledge someone senior holiday very" | Mnemonic.ToSeed | Slice(To: 32) | ToHex | Log = seed1-2

  ; test from hex string
  "0x9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60" | HexToBytes = sr25519-key-1
  Sr25519.PublicKey = sr25519-key-1-public
  ToHex | Log | Assert.Is("0x44a996beb1eef7bdcab976ab6d2ca26104834164ecf28fb375600576fcc6eb0f" true)

  "Hello World!" | HexToBytes = message
  Sr25519.Sign(sr25519-key-1) | Log | Sr25519.Verify(sr25519-key-1-public message) | Log | Assert.Is(true true)

  "Hello World 2!" | HexToBytes = message-2
  Sr25519.Sign(sr25519-key-1) | Log | Sr25519.Verify(sr25519-key-1-public message) | Log | Assert.Is(false true)

  "0x368c36dd239786fe314316756a938ab657826246db4c3d43c00256e3be77a45d6e7bfc7f604e77c15ad219210aa04272846508872ccde32c7e69a15e50ccf489" | HexToBytes | Sr25519.Verify(sr25519-key-1-public message) | Log | Assert.Is(true true)
  "0x368c36dd239786fe314316756a938ab657826246db4c3d43c00256e3be77a45d6e7bfc7f604e77c15ad219210aa04272846508872ccde32c7e69a15e50ccf489" | HexToBytes | Sr25519.Verify(sr25519-key-1-public message-2) | Log | Assert.Is(false true)


  "0xbf56c0728fd4e9cf64bfaf6dabab81554103298cdee5cc4d580433aa25e98b00" = hash-1-expect
  "0x1a3f3c1ccf9ae9f7e7535c9463b06aff" = hash-12-expect
  "0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0" = hash-2-expect
  "0x7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069" = hash-3-expect
  "0xd0e47486bbf4c16acac26f8b653592973c1362909f90262877089f9c8a4536af" = hash-4-expect
  "0x914d7f3e6a282ba5edd201a1e09b5844" = hash-5-expect
  "0x914d7f3e6a282ba5" = hash-6-expect

  "Hello World!" | Hash.Blake2-256 | ToHex | Log = hash-1 | Assert.Is(hash-1-expect true)
  "Hello World!" | Hash.Blake2-128 | ToHex | Log = hash-12 | Assert.Is(hash-12-expect true)
  "Hello World!" | Hash.Keccak-256 | ToHex | Log = hash-2 | Assert.Is(hash-2-expect true)
  "Hello World!" | Hash.Sha2-256 | ToHex | Log = hash-3 | Assert.Is(hash-3-expect true)
  "Hello World!" | Hash.Sha3-256 | ToHex | Log = hash-4 | Assert.Is(hash-4-expect true)
  "Hello World!" | Hash.XXH-128 | ToHex | Log = hash-5 | Assert.Is(hash-5-expect true)
  "Hello World!" | Hash.XXH-64 | ToHex | Log = hash-6 | Assert.Is(hash-6-expect true)

  "0x9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60" | HexToBytes
  ECDSA.PublicKey | ToHex
  Assert.Is("0x048db55b05db86c0b1786ca49f095d76344c9e6056b2f02701a7e7f3c20aabfd913ebbe148dd17c56551a52952371071a6c604b3f3abe8f2c8fa742158ea6dd7d4")

  "caution juice atom organ advance problem want pledge someone senior holiday very" | Mnemonic.ToSeed | Slice(To: 32) = private-key-1
  ToHex | Assert.Is("0xc8fa03532fb22ee1f7f6908b9c02b4e72483f0dbd66e4cd456b8f34c6230b849" true)
  private-key-1
  {ECDSA.PublicKey
    {ToHex | Log}
    {Slice(From: 1)
      Hash.Keccak-256
      Slice(From: 12)
      ToHex
      Log("Eth Address")
      Assert.Is("0x30bfedb19bab047810a0b27b87ff73ec3aa840f9" true)
    }
  }

  UUID = uuid
  uuid | UUID.ToString | Log
  uuid | UUID.ToString(true) | Log
  uuid | UUID.ToBytes | ToHex | Log
  NanoID | Log

  Snowflake(31 31) | Log("snowflake")

  15 | Mnemonic.Generate | Log
})

@schedule(root main)
@run(root) | Assert.Is(true)
