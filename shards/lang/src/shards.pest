WHITESPACE    = _{ SEPARATOR | "," | "\t" | NEWLINE | COMMENT }
COMMENT       = _{ ";" ~ (!"\n" ~ ANY)* ~ "\n" }
Program       =  { SOI ~ Sequence ~ EOI }
LowIden       = @{ (ASCII_ALPHA_LOWER | "_") ~ (ASCII_ALPHANUMERIC | "_" | "-" | ".")* }
AssignRef     =  { Pipeline ~ "=" ~ LowIden }
AssignSet     =  { Pipeline ~ ">=" ~ LowIden }
AssignUpd     =  { Pipeline ~ ">" ~ LowIden }
AssignPush    =  { Pipeline ~ ">>" ~ LowIden }
Assignment    =  { AssignRef | AssignSet | AssignUpd | AssignPush }
Pipeline      =  { Block ~ ("|" ~ Block)* }
Statement     = _{ (Assignment | Pipeline) }
Sequence      =  { Statement* }
Param         =  { ParamName? ~ Value }
Params        =  { "(" ~ Param* ~ ")" }
BuiltIn       =  { "@" ~ LowIden ~ Params? }
Vector        =  { "(" ~ Number ~ Number+ ~ ")" }
EvalExpr      =  { "#" ~ RoundParens }
Expr          =  { RoundParens }
Shard         =  { UppIden ~ Params? }
TakeTable     = @{ LowIden ~ (":" ~ Iden)+ }
TakeSeq       = @{ LowIden ~ (":" ~ Integer)+ }
Boolean       =  { "true" | "false" }
None          =  { "none" }
ConstValue    =  { None | Boolean | LowIden | Number | String | Seq | Table }
Shards        =  { "{" ~ Sequence? ~ "}" }
Block         = _{ BuiltIn | Vector | EvalExpr | Expr | Shard | TakeTable | TakeSeq | ConstValue | Shards }
Iden          = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_" | "-" | ".")* }
Value         =  { TakeTable | TakeSeq | ConstValue | Enum | Shards | Vector | EvalExpr | Expr }
TableKey      = ${ (Iden | Value) ~ ":" }
TableEntry    =  { TableKey ~ Value }
Table         =  { "{" ~ TableEntry* ~ "}" }
RoundParens   = _{ "(" ~ Sequence ~ ")" }
UppIden       = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_" | "-" | ".")* }
ParamName     = ${ UppIden ~ ":" }
Seq           =  { "[" ~ Value* ~ "]" }
Enum          = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")+ ~ "." ~ (ASCII_ALPHANUMERIC | "_")+ }
Hexadecimal   = @{ "0x" ~ ASCII_HEX_DIGIT+ }
Float         = @{ ("+" | "-" | "~")? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
Integer       = @{ ("+" | "-" | "~")? ~ ASCII_DIGIT+ }
Number        =  { Hexadecimal | Float | Integer }
ComplexString = @{ "\"\"\"" ~ (!"\"\"\"" ~ ANY)* ~ "\"\"\"" }
SimpleString  = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
String        =  { ComplexString | SimpleString }
