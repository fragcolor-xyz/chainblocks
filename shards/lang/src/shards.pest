WHITESPACE    = _{ SEPARATOR | "," | "\t" | NEWLINE | COMMENT }
COMMENT       = _{ ";" ~ (!"\n" ~ ANY)* ~ "\n" }
Program       =  { SOI ~ Sequence ~ EOI }
LowIden       = @{ (("_"? ~ ASCII_ALPHA_LOWER) | ("$" ~ ASCII_ALPHANUMERIC)) ~ (ASCII_ALPHANUMERIC | "_" | "-" | ".")* }
VarName       =  { LowIden ~ ("/" ~ LowIden)* }
AssignOp      =  { "=" | ">=" | ">>" | ">" }
Assignment    =  { Pipeline ~ AssignOp ~ VarName ~ ("|")? }
Pipeline      =  { "|"? ~ Block ~ ("|" ~ Block)* }
Statement     = _{ (Assignment | Pipeline) }
Sequence      =  { Statement* }
Param         =  { ParamName? ~ Value }
Params        =  { "(" ~ Param* ~ ")" }
Func          =  { "@" ~ VarName ~ Params? }
Vector        =  { "(" ~ Number ~ Number+ ~ ")" }
EvalExpr      =  { "#" ~ RoundParens }
Expr          =  { RoundParens }
Shard         =  { UppIden ~ Params? }
TakeTable     =  { VarName ~ (":" ~ Iden)+ }
TakeSeq       =  { VarName ~ (":" ~ Integer)+ }
Boolean       =  { "true" | "false" }
None          =  { "none" | "null" }
ConstValue    =  { None | Boolean | VarName | Number | String | Seq | Table | Enum }
Shards        =  { "{" ~ Sequence? ~ "}" }
Block         = _{ Func | Vector | EvalExpr | Expr | Enum | Shard | TakeTable | TakeSeq | ConstValue | Shards }
Iden          = @{ (ASCII_ALPHA | "_" | "*") ~ (ASCII_ALPHANUMERIC | "_" | "-" | ".")* }
Value         =  { TakeTable | TakeSeq | ConstValue | Shard | Enum | Shards | Vector | EvalExpr | Expr | Func }
TableKey      =  { (None | Iden | Value) ~ ":" }
TableEntry    =  { TableKey ~ Value }
Table         =  { "{" ~ TableEntry* ~ "}" }
RoundParens   = _{ "(" ~ Sequence ~ ")" }
UppIden       = @{ "_"? ~ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_" | "-" | "." | "!")* }
ParamName     = ${ UppIden ~ ":" ~ !":" }
Seq           =  { "[" ~ Value* ~ "]" }
Enum          = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")+ ~ "::" ~ (ASCII_ALPHANUMERIC | "_")+ }
Hexadecimal   = @{ "0x" ~ ASCII_HEX_DIGIT+ }
Float         = @{ ("+" | "-" | "~")? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
Integer       = @{ ("+" | "-" | "~")? ~ ASCII_DIGIT+ }
Number        =  { Hexadecimal | Float | Integer }
ComplexString = @{ "\"\"\"" ~ (!"\"\"\"" ~ ANY)* ~ "\"\"\"" }
SimpleString  = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
String        =  { ComplexString | SimpleString }
