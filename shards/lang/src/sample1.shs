Repeat({
  #(inject-template)
  2.2 | Log | Log >= number
  2.2 | Log | Log > number ; hello
  2.2 | Log | Log = number
  2.2 | Log | Log = number
  2.2 | Math.Add(2.0) | Log | Log
  [1 2 3] | Log
  {a: 1 y: 2} | Log = table
  table:a:b | Log
  {} | Log
  1 >> seq
  2 >> seq
  0x2234 >> seq
  seq:0 | Log
  number | Math.Multiply(2.0) | Math.Multiply(Operand: seq:0)
  ; notice no |, we inject always a `nil` in front of a Pipeline,
  ; if the next shard input type is not None
  Repeat({ ; shards
    10 | Log
  } Times: 3 Until: #(1))
} Times: 3)

schedule(root main)
run(root)

a | Math.Add((a | Math.Subtract(c))) ; generate temps and such at runtime

a | Math.Add(#(a | Math.Subtract(c))) ; run at eval time and write result

wire(w1 {
  Msg("Hello")
})

wire(w2 {
  Msg("Hello")
})

Do(w1)
Do(w2)
