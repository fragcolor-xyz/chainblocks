

(defwire initialize-animation

  [] >= .animation-array
  (ExpectLike (GFX.Texture))

  (ForEach
   (-> = .texture-name
       (LoadImage .texture-name) (GFX.Texture)  >> .animation-array))

  .animationn-index = 0
  .animation-index-max = count (.animation-array)
  .animation-speed = 0.08)

(defloop loop-animate
  .animation-index (Math.Add 1)
  > .animation-index
  (When :Predicate (IsMoreEqual .animation-index-max)
        :Action (-> 0 > .animation-index))
  (Pause .animation-speed))

(defloop main-animation-loop
  (Setup
   ["GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_1.png",
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_2.png",
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_3.png",
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_4.png",
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_5.png",
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_6.png",
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_7.png"]
   (Do initialize-animation))
  (Step loop-animate)

  (GFX.MainWindow
   :Title "MainWindow" :Width 1920 :Height 1080
   :Contents
   (-> (Setup
        (GFX.DrawQueue) >= .ui-draw-queue
        (GFX.UIPass .ui-draw-queue) >> .render-steps)
       .ui-draw-queue (GFX.ClearQueue)

       (UI
        .ui-draw-queue
        (->
           (UI.Area :Position (float2 0 0)
                    :Anchor Anchor.Center
                    :Contents (->
                               .animation-array (Take .animation-index) (UI.Image :Scale (float2 0.2))))))

       (button-inputs)

       (GFX.Render :Steps .render-steps))))

(defmesh main)
(schedule main main-animation-loop)
(run main (/ 1.0 60))