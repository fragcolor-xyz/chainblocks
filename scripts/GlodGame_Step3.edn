(defshards Innitialize_Character []
  (LoadImage "GlodImages/Character1.png") = .Character_Image
  (LoadImage "GlodImages/Character1_Left.png") = .Character_Left
  (LoadImage "GlodImages/Character1_Right.png") = .Character_Right
  (LoadImage "GlodImages/Character1_Jumping_Right.png") = .Character_Jumping_Right
  (LoadImage "GlodImages/Character1_Jumping_Left.png") = .Character_Jumping_Left

  ;; --------- Idle Sprites (Facing Left) -------------
  (LoadImage "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_1.png") = .image_idle_Left_1
  (LoadImage "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_2.png") = .image_idle_Left_2
  (LoadImage "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_3.png") = .image_idle_Left_3
  (LoadImage "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_4.png") = .image_idle_Left_4
  (LoadImage "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_5.png") = .image_idle_Left_5
  (LoadImage "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_6.png") = .image_idle_Left_6
  (LoadImage "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_7.png") = .image_idle_Left_7
  [.image_idle_Left_1 .image_idle_Left_2 .image_idle_Left_3 .image_idle_Left_4 .image_idle_Left_5
   .image_idle_Left_6 .image_idle_Left_7] >= .idle_Left_image_array

  ;; ---------- Idle Sprites (Facing Right) ----------------
  (LoadImage "GlodImages/Character_Idle/Idle_Right/Character1_Idle_1.png") = .image_idle_Right_1
  (LoadImage "GlodImages/Character_Idle/Idle_Right/Character1_Idle_2.png") = .image_idle_Right_2
  (LoadImage "GlodImages/Character_Idle/Idle_Right/Character1_Idle_3.png") = .image_idle_Right_3
  (LoadImage "GlodImages/Character_Idle/Idle_Right/Character1_Idle_4.png") = .image_idle_Right_4
  (LoadImage "GlodImages/Character_Idle/Idle_Right/Character1_Idle_5.png") = .image_idle_Right_5
  (LoadImage "GlodImages/Character_Idle/Idle_Right/Character1_Idle_6.png") = .image_idle_Right_6
  (LoadImage "GlodImages/Character_Idle/Idle_Right/Character1_Idle_7.png") = .image_idle_Right_7
  [.image_idle_Right_1 .image_idle_Right_2 .image_idle_Right_3 .image_idle_Right_4 .image_idle_Right_5
   .image_idle_Right_6 .image_idle_Right_7] >= .idle_Right_image_array

  (Count .idle_Left_image_array) (Math.Subtract 1) >= .idle_image_index_max
  0 >= .idle_image_index
  0.08 >= .idle_animation_speed


  ;; ----------- Walking Sprites (Facing Right) ---------------
  (LoadImage "GlodImages/Character_Walking/Walking_Right/Character1_Walking_Right_1.png") = .image_walking_Right_1
  (LoadImage "GlodImages/Character_Walking/Walking_Right/Character1_Walking_Right_2.png") = .image_walking_Right_2
  (LoadImage "GlodImages/Character_Walking/Walking_Right/Character1_Walking_Right_3.png") = .image_walking_Right_3
  (LoadImage "GlodImages/Character_Walking/Walking_Right/Character1_Walking_Right_4.png") = .image_walking_Right_4
  (LoadImage "GlodImages/Character_Walking/Walking_Right/Character1_Walking_Right_5.png") = .image_walking_Right_5
  (LoadImage "GlodImages/Character_Walking/Walking_Right/Character1_Walking_Right_6.png") = .image_walking_Right_6
  (LoadImage "GlodImages/Character_Walking/Walking_Right/Character1_Walking_Right_7.png") = .image_walking_Right_7
  [.image_walking_Right_1 .image_walking_Right_2 .image_walking_Right_3 .image_walking_Right_4 .image_walking_Right_5
   .image_walking_Right_6 .image_walking_Right_7] >= .walking_Right_image_array

  ;; -------------- Walking Sprites (Facing Left) -----------------
  (LoadImage "GlodImages/Character_Walking/Walking_Left/Character1_Walking_Left_1.png") = .image_walking_Left_1
  (LoadImage "GlodImages/Character_Walking/Walking_Left/Character1_Walking_Left_2.png") = .image_walking_Left_2
  (LoadImage "GlodImages/Character_Walking/Walking_Left/Character1_Walking_Left_3.png") = .image_walking_Left_3
  (LoadImage "GlodImages/Character_Walking/Walking_Left/Character1_Walking_Left_4.png") = .image_walking_Left_4
  (LoadImage "GlodImages/Character_Walking/Walking_Left/Character1_Walking_Left_5.png") = .image_walking_Left_5
  (LoadImage "GlodImages/Character_Walking/Walking_Left/Character1_Walking_Left_6.png") = .image_walking_Left_6
  (LoadImage "GlodImages/Character_Walking/Walking_Left/Character1_Walking_Left_7.png") = .image_walking_Left_7
  [.image_walking_Left_1 .image_walking_Left_2 .image_walking_Left_3 .image_walking_Left_4 
   .image_walking_Left_5 .image_walking_Left_6 .image_walking_Left_7] >= .walking_Left_image_array
  
  (Count .walking_Left_image_array) (Math.Subtract 1) >= .walking_image_index_max
  0 >= .walking_image_index
  0.08 >= .Walking_Animation_Speed ;; Reduce number to increase animation speed


  true >= .CharacterIdle
  false >= .Character_Jump
  false >= .Character_Walking_Left
  false >= .Character_Walking_Right
  1 >= .Character_Direction
  
  0.0 >= .X
  620 >= .Y 
  (float2 .X .Y) >= .Character_Position)

(defshards Button_Inputs []
  (Inputs.KeyDown
   :Key "left"
   :Action (->
            (Msg "left")
            -1 > .Character_Direction
            true > .Character_Walking_Left
            false > .Character_Walking_Right
            false > .CharacterIdle
            false > .Character_Jump))

  (Inputs.KeyDown
   :Key "right"
   :Action (->
            (Msg "right")
            1 > .Character_Direction
            false > .Character_Walking_Left
            true > .Character_Walking_Right
            false > .CharacterIdle
            false > .Character_Jump))

  (Inputs.KeyDown
   :Key "up"
   :Action (->
            (Msg "up")
            false > .Character_Walking_Left
            false > .Character_Walking_Right
            false > .CharacterIdle
            true > .Character_Jump))

  (Inputs.KeyUp
   :Key "left"
   :Action (->
            (Msg "left")
            false > .Character_Walking_Left
            false > .Character_Walking_Right
            true > .CharacterIdle
            false > .Character_Jump))

  (Inputs.KeyUp
   :Key "right"
   :Action (->
            (Msg "right")
            false > .Character_Walking_Left
            false > .Character_Walking_Right
            true > .CharacterIdle
            false > .Character_Jump))

  (Inputs.KeyUp
   :Key "up"
   :Action (->
            (Msg "up")
            false > .Character_Walking_Left
            false > .Character_Walking_Right
            true > .CharacterIdle
            false > .Character_Jump)))

;; ----------- Idle_Animation ------------

(defloop Idle_Animation_Left
  .idle_image_index (Math.Add 1)
  > .idle_image_index
  (When :Predicate (IsMore .idle_image_index_max)
        :Action (-> 0 > .idle_image_index))
  (Pause .idle_animation_speed))

(defloop Walking_Animation
  .walking_image_index (Math.Add 1)
  > .walking_image_index
  (When :Predicate (IsMore .walking_image_index_max)
        :Action (-> 0 > .walking_image_index))
  (Pause .Walking_Animation_Speed))

(defloop main-wire
  (Setup
   (Innitialize_Character))

  (Step Walking_Animation)
  (Step Idle_Animation_Left)

  (GFX.MainWindow
   :Title "MainWindow" :Width 1920 :Height 1080
   :Contents (-> (Setup
                  (GFX.DrawQueue) >= .ui-draw-queue
                  (GFX.UIPass .ui-draw-queue) >> .render-steps)
                 .ui-draw-queue (GFX.ClearQueue)

                 (UI
                  .ui-draw-queue
                  (->
                   (UI.Area :Position (Float2 0 0)
                            :Anchor Anchor.Top
                            :Contents (->

                                         ;; ------------ Draw Character Idle --------------- 
                                       .CharacterIdle
                                       (If :Predicate (->  (Is true)
                                                           (And)
                                                           .Character_Walking_Left (Is false)
                                                           (And)
                                                           .Character_Walking_Right (Is false)
                                                           (And)
                                                           .Character_Jump (Is false)
                                                           .Character_Direction (Is 1))
                                           :Then (-> .idle_Right_image_array (Take .idle_image_index) (UI.Image :Scale (float2 0.2))))
                                       
                                       .CharacterIdle
                                       (If :Predicate (->  (Is true)
                                                           (And)
                                                           .Character_Walking_Left (Is false)
                                                           (And)
                                                           .Character_Walking_Right (Is false)
                                                           (And)
                                                           .Character_Jump (Is false)
                                                           .Character_Direction (Is -1))
                                           :Then (-> .idle_Left_image_array (Take .idle_image_index) (UI.Image :Scale (float2 0.2))))
                                       

                                         ;; ------------- Draw Character Walking ---------------- 
                                       .CharacterIdle
                                       (If :Predicate (->  (Is false)
                                                           (And)
                                                           .Character_Walking_Left (Is true)
                                                           (And)
                                                           .Character_Walking_Right (Is false)
                                                           (And)
                                                           .Character_Jump (Is false))
                                           :Then (-> .walking_Left_image_array (Take .walking_image_index) (UI.Image :Scale (float2 0.2))))


                                       .CharacterIdle
                                       (If :Predicate (->  (Is false)
                                                           (And)
                                                           .Character_Walking_Left (Is false)
                                                           (And)
                                                           .Character_Walking_Right (Is true)
                                                           (And)
                                                           .Character_Jump (Is false))
                                           :Then (-> .walking_Right_image_array (Take .walking_image_index) (UI.Image :Scale (float2 0.2))))

                                         ;; ------------- Draw Character Jumping ---------------- 
                                       .CharacterIdle
                                       (If :Predicate (->  (Is false)
                                                           (And)
                                                           .Character_Walking_Left (Is false)
                                                           (And)
                                                           .Character_Walking_Right (Is false)
                                                           (And)
                                                           .Character_Jump (Is true)
                                                           .Character_Direction (Is 1))
                                           :Then (-> .Character_Jumping_Right (UI.Image :Scale (float2 0.2))))
                                       
                                       .CharacterIdle
                                       (If :Predicate (->  (Is false)
                                                           (And)
                                                           .Character_Walking_Left (Is false)
                                                           (And)
                                                           .Character_Walking_Right (Is false)
                                                           (And)
                                                           .Character_Jump (Is true)
                                                           .Character_Direction (Is -1))
                                           :Then (-> .Character_Jumping_Left (UI.Image :Scale (float2 0.2))))
                                       
                                       ))))

                 (GFX.Render :Steps .render-steps)

                 (Button_Inputs))))
  

(defmesh main)
(schedule main main-wire)
(run main (/ 1.0 60))


