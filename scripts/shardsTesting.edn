(defshards initialize []
  (LoadImage "Images/coin.png") = .image
  (LoadImage "Images/egg.png") = .image2
  (LoadImage "Images/gem.png") = .image3
  (LoadImage "Images/item.png") = .image4
  (LoadImage "Images/sun.png") = .image5
  (LoadImage "Images/sword.png") = .image6
  (LoadImage "Images/moon.png") = .image7
  (LoadImage "Images/WhiteBackground.png") = .background_White
  [.image .image2 .image3 .image4 .image5 .image6 .image7] >= .imageArray1
  [.image .image2 .image3 .image4 .image5 .image6 .image7] >= .imageArray2
  0 >= .array1_imageToShow
  0 >= .array1_imageToShow2
  0 >= .RandomisedNumber
  0 >= .RandomisedNumber2
  0 >= .Score
  10 >= .Timer
  "GameOver" = .GameOverString
  true >= .ButtonLock
  false >= .GameOver)

(defshards ResetInt[]
  .array1_imageToShow
  (When :Predicate (IsMore .RandomisedNumber)
        :Action (->
                 0 >= .array1_imageToShow))
  )

(defshards ResetInt2[]
  .array1_imageToShow
  (When :Predicate (IsMore .RandomisedNumber2)
        :Action (->
                 0 >= .array1_imageToShow2)))

(defshards AddPoint[]
  .array1_imageToShow
  (When :Predicate (Is .array1_imageToShow2)
        :Action (->
                 .Score (Math.Add 1)
                 >= .Score
                 ))
  )

(defshards Countdown []
  .Timer
  (When :Predicate (IsMore 0)
        :Action (->
                 (Once
                  :Action (->
                           .Timer (Math.Subtract 1)
                           > .Timer)
                  :Every 1.0)))
  )

(defshards GameOverScreen []
  .Timer
  (When :Predicate (Is 0)
        :Action (->
                 true > .GameOver))
  )

(defshards RandomiseImage []
  (Count .imageArray1)
  > .RandomisedNumber
  (RandomInt :Max .RandomisedNumber)
  > .array1_imageToShow
  (ResetInt)
  .array1_imageToShow
  ;; (Log ":Array1")

  (Count .imageArray2)
  > .RandomisedNumber2
  (RandomInt :Max .RandomisedNumber)
  > .array1_imageToShow2
  (ResetInt2)
  ;; (Log ":Array2")
  )
(defshards ResetGame[]
  false > .GameOver
  15 > .Timer
  0 > .Score)

(defloop main-wire

  (Setup
   (initialize))
  (Countdown)
  .Timer
  (Log)
  (GameOverScreen)

  (GFX.MainWindow
   :Title "TestWindow" :Width 1920 :Height 1080
   :Contents (-> (Setup
                  (GFX.DrawQueue) >= .ui-draw-queue
                  (GFX.UIPass .ui-draw-queue) >> .render-steps)
                 .ui-draw-queue (GFX.ClearQueue)

                 .GameOver
                 (If :Predicate (Is false)
                     :Then (->
                            (UI
                             .ui-draw-queue
                             (->
                              (UI.Area
                               :Position (float2 0.0 0.0)
                               :Anchor Anchor.TopLeft
                               :Contents
                               (->
                                .background_White (UI.Image :Scale (float2 1))))

                              (UI.Area
                               :Position (float2 350.0 200.0)
                               :Anchor Anchor.TopLeft
                               :Contents
                               (->
                                .imageArray1 (Take .array1_imageToShow) (UI.Image :Scale (float2 0.4))))

                              (UI.Area
                               :Position (float2 -350.0 200.0)
                               :Anchor Anchor.TopRight
                               :Contents
                               (->
                                .imageArray1 (Take .array1_imageToShow2) (UI.Image :Scale (float2 0.4))))
                              
                              (UI.Window
                               :Title "Greetings" :Flags WindowFlags.NoCollapse
                              ;;  :Position (float2 100.0 100.0)
                              ;;  :Anchor Anchor.Top
                               :Contents
                               (->
                                .image6 (UI.Image :Scale (float2 0.4))))

                              (UI.Area
                               :Position (float2 0.0 0.0)
                               :Anchor Anchor.TopRight
                               :Contents
                               (->
                                .Score (ToString) (UI.Label)))

                              (UI.Area
                               :Position (float2 0.0 0.0)
                               :Anchor Anchor.TopLeft
                               :Contents
                               (->
                                .Timer (ToString) (UI.Label)))


                              (UI.Area
                               :Position (float2 0.0 0.0)
                               :Anchor Anchor.Bottom
                               :Contents
                               (->
                                (UI.Button
                                 :Label "Click me!"
                                 :Action (->
                                          (RandomiseImage)
                                          true >= .ButtonLock))

                                (UI.Button
                                 :Label "Yes/No"
                                 :Action (->
                                          .Timer
                                          (When :Predicate (IsMore 0)
                                                :Action (->
                                                         .array1_imageToShow
                                                         (When :Predicate (Is .array1_imageToShow2)
                                                               :Action (->
                                                                        (AddPoint)
                                                                        .Score
                                                                        (Log)
                                                                        (RandomiseImage)
                                                                        false >= .ButtonLock)))))))))))
                     :Else (->
                            (UI
                             .ui-draw-queue
                             (->
                              (UI.Area
                               :Position (float2 0.0 0.0)
                               :Anchor Anchor.Center
                               :Contents
                               (->
                                .GameOverString (UI.Label)
                                (UI.Button
                                 :Label "Click me!"
                                 :Action (->
                                          (ResetGame)))
                                ))
                              )))
                     )
                 

                 

                 (GFX.Render :Steps .render-steps))))

(defmesh root)
(schedule root main-wire)
(run root (/ 1.0 60))