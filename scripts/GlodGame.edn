(defshards Initialize []
  (LoadImage "GlodImages/Character1_Jumping.png") = .image_jumping
  (LoadImage "GlodImages/Character1.png") = .image
  (LoadImage "GlodImages/Character_Idle/Character1_Idle_1.png") = .image_idle_1
  (LoadImage "GlodImages/Character_Idle/Character1_Idle_2.png") = .image_idle_2
  (LoadImage "GlodImages/Character_Idle/Character1_Idle_3.png") = .image_idle_3
  (LoadImage "GlodImages/Character_Idle/Character1_Idle_4.png") = .image_idle_4
  (LoadImage "GlodImages/Character_Idle/Character1_Idle_5.png") = .image_idle_5
  (LoadImage "GlodImages/Character_Idle/Character1_Idle_6.png") = .image_idle_6
  (LoadImage "GlodImages/Character_Idle/Character1_Idle_7.png") = .image_idle_7
  [.image_idle_1 .image_idle_2 .image_idle_3 .image_idle_4 .image_idle_5 .image_idle_6 .image_idle_7] >= .idle_image_array
  (Count .idle_image_array) (Math.Subtract 1) >= .idle_image_index_max
  0 >= .idle_image_index
  (LoadImage "GlodImages/Character_Walking/Character1_Walking_1.png") = .image_walking_1
  (LoadImage "GlodImages/Character_Walking/Character1_Walking_2.png") = .image_walking_2
  (LoadImage "GlodImages/Character_Walking/Character1_Walking_3.png") = .image_walking_3
  (LoadImage "GlodImages/Character_Walking/Character1_Walking_4.png") = .image_walking_4
  (LoadImage "GlodImages/Character_Walking/Character1_Walking_5.png") = .image_walking_5
  (LoadImage "GlodImages/Character_Walking/Character1_Walking_6.png") = .image_walking_6
  (LoadImage "GlodImages/Character_Walking/Character1_Walking_7.png") = .image_walking_7
  [.image_walking_1 .image_walking_2 .image_walking_3 .image_walking_4 .image_walking_5 .image_walking_6 .image_walking_7] >= .walking_image_array
  (Count .walking_image_array) (Math.Subtract 1) >= .walking_image_index_max
  0 >= .walking_image_index
  0.0 >= .X
  0.0 >= .Y
  (Float2 .X .Y) >= .CharacterPosition
  (float2 0 0) >= .Character_Velocity_y
  (float2 0 0) >= .Character_Acceleration_y
  (float2 0 0) >= .Character_Velocity_x
  (float2 0 0) >= .Character_Acceleration_x
  true >= .CanJump
  false >= .isJumping
  false >= .isRunning
  true >= .isIdle)

(defloop Idle_Animation 
  .idle_image_index (Math.Add 1)
  > .idle_image_index
  (When :Predicate (IsMore .idle_image_index_max)
        :Action (
                 -> 0 > .idle_image_index))
  (Pause 0.08)
  )

(defloop Walking_Animation
  .walking_image_index (Math.Add 1)
  > .walking_image_index
  (When :Predicate (IsMore .walking_image_index_max)
        :Action (-> 0 > .walking_image_index))
  (Pause 0.08))

(defshards Jump[]

  (Inputs.KeyDown
   :Key "up"
   :Action (->
            .CanJump
            (When :Predicate (Is true)
                  :Action (->
                           false > .isRunning
                           false > .CanJump
                           true > .isJumping
                           false > .isIdle
                           (float2 0 -20) > .Character_Velocity_y
                           (float2 0 1) > .Character_Acceleration_y)))))

(defshards Run []
  (Inputs.KeyDown
   :Key "right"
   :Action (->
            true > .isRunning
            false > .isIdle
            ))
  
  (Inputs.KeyUp
   :Key "right"
   :Action (->
            true > .isIdle
            false > .isRunning)))

(defshards Gravity []
  .CharacterPosition
  (When :Predicate (IsMore (float2 0 0))
        :Action (->
                 (float2 0 0) > .Character_Acceleration_y
                 (float2 0 0) > .Character_Velocity_y
                 (float2 0 0) > .CharacterPosition
                 .CanJump (Log "CanJump:")
                 true > .CanJump
                 false > .isJumping
                 true > .isIdle))
  
  .CharacterPosition (Math.Add .Character_Velocity_y)
  > .CharacterPosition
  .Character_Velocity_y (Math.Add .Character_Acceleration_y)
  > .Character_Velocity_y
  )

(defloop main-wire
  (Setup
   (Initialize))
  .Character_Velocity_y (Log "Velocity:")
  .Character_Acceleration_y (Log "Acceleration")
  (Log "Character_ Position:")
  ;; .CharacterPosition (Math.Add .X)(Math.Add .Y)
  ;; > .CharacterPosition
  .CharacterPosition
  (Log "Character: Position")
  (GFX.MainWindow
   :Title "TestWindow" :Width 1920 :Height 1080
   :Contents (-> (Setup
                  (GFX.DrawQueue) >= .ui-draw-queue
                  (GFX.UIPass .ui-draw-queue) >> .render-steps)
                 .ui-draw-queue (GFX.ClearQueue)

                 (UI
                  .ui-draw-queue
                  (->
                   (UI.Area
                    :Position .CharacterPosition
                    :Anchor Anchor.Bottom
                    :Contents
                    (->
                     (Run)
                     .isJumping
                     (If :Predicate (Is true)
                         :Then (->
                                .image_jumping (UI.Image :Scale (float2 0.2))))
                     
                     .isRunning
                     (If :Predicate (Is true)
                         :Then(->
                               (Step Walking_Animation)
                               .walking_image_array (Take .walking_image_index) (UI.Image :Scale (float2 0.2))))
                     
                     .isIdle
                     (If :Predicate (Is true)
                         :Then(->
                               (Step Idle_Animation)
                               .idle_image_array (Take .idle_image_index) (UI.Image :Scale (float2 0.2))))
                     ))))

                 (Jump)
                 (Gravity)

                 (GFX.Render :Steps .render-steps))))

(defmesh main)
(schedule main main-wire)
(run main (/ 1.0 60))