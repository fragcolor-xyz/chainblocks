;; ----------------  Animation Protos ----------------

(defwire initialize-animation-array
  (GFX.Texture :Format TextureFormat.R8Unorm) (Push :Name .animation-array :Global true)
  (Clear .animation-array))

(defloop load-image-into-texture
  = .filename
  (LoadImage .filename) (GFX.Texture))

;; [provde array of filenames]
(defwire initialize-animation
  (StepMany load-image-into-texture)
  >= .animation-array

  0 >== .animation-index
  (Count :Name .animation-array)
  >== .animation-index-max)

(defwire initialise-animation-speed
  (ToFloat) >== .animation-speed)

(defloop animate-animation
  .animation-index (Math.Add 1)
  > .animation-index
  (When :Predicate (IsMoreEqual .animation-index-max)
        :Action (-> 0 > .animation-index))
  (Pause .animation-speed))

(defwire set-animation-position
  = .temp-position-array
  (Take 0) (ToFloat) > .x-position
  .temp-position-array
  (Take 1) (ToFloat) > .y-position
  .x-position
  (Log "X position: ")
  .y-position
  (Log "Y position: ")

  (float2 .x-position .y-position) >== .animation-position
  (Log "animation position: "))

;;[.animation-position .animation-array .animation-index .scale]
(defloop display-animation 
  (|(Take 0) >= .temp-animation-position)
  (|(Take 1) = .temp-animation-array)
  (|(Take 2) >= .temp-animation-index)
  (|(Take 3)(ToFloat) >= .temp-scale)

  (UI.Area :Position .temp-animation-position
           :Anchor Anchor.Top
           :Contents (->
                      .temp-animation-array (Take .temp-animation-index) (UI.Image :Scale (float2 .temp-scale)))))

;; --------------- Jumping Protos --------------
;;[velocity acceleration]
(defwire initialise-jump
  0.0 >== .character-y-velocity
  0.0 >== .character-y-acceleration
  true >== .can-jump)

;;[y-min y-max]
(defwire initialise-character-y-limits
  = .temp-ylimits-array
  (Take 0) (ToFloat) >== .y-min
  .temp-ylimits-array
  (Take 1) (ToFloat) >== .y-max)

;; [Xposition Yposition ]
(defloop character-gravity
  ;; (Log "Original XY")
  ;; >= .temp-position-array
  (| (Take 0) (ToFloat) > .x-position)
  ;;.temp-position-array
  (| (Take 1) (ToFloat) > .y-position)
  ;; (Log "Original Y")


  .y-position (Math.Add .character-y-velocity)
  > .y-position
  (Log "Y:Position ")

  .character-y-velocity (Math.Add .character-y-acceleration)
  > .character-y-velocity
  (Log "Y-Velocity")

  .y-position > (Max .y-min) (Min .y-max) > .y-position

  (float2 .x-position .y-position)
  (Log ".animationPosition: "))
;; > .animation-position

;; [Yposition ]
(defloop character-gravity-2
  
  >= .temp-y

  .temp-y (Math.Add .character-y-velocity)
  > .temp-y
  (Log "Y:Position ")

  .character-y-velocity (Math.Add .character-y-acceleration)
  > .character-y-velocity
  (Log "Y-Velocity")

  .temp-y > (Max .y-min) (Min .y-max) > .temp-y)
;; > .y

(defloop update-position
  (float2 .x-position .y-position)
  )

;;.yposition
(defloop character-on-ground
  (When :Predicate (IsMoreEqual 620.0)
        :Action (->
                 .can-jump
                 (When :Predicate (Is false)
                       :Action (->
                                true > .can-jump
                                ;; 0.0 > .character-y-velocity
                                ;; 0.0 > .character-y-acceleration
                                )))))

;;[character-y-velocity character-y-acceleration]
(defloop jump-button

  (Inputs.KeyDown
   :Key "up"
   :Action (->
            -50.0 > .character-y-velocity
            1.0 >  .character-y-acceleration
            false > .can-jump)))


(defloop main-animation-loop
  (Setup
   0.0 >== .x-position
   0.0 >== .y-position
   (Do initialize-animation-array)
   ["GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_1.png"
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_2.png"
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_3.png"
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_4.png"
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_5.png"
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_6.png"
    "GlodImages/Character_Idle/Idle_Left/Character1_Idle_Left_7.png"]
   (Do initialize-animation)
   (Count :Name .animation-array)
   0.04
   (Do initialise-animation-speed)
   [0 620]
   (Do set-animation-position)

   (Do initialise-jump)
   [-620.0 620.0]
   (Do initialise-character-y-limits))

  (Step animate-animation)

  .y-position
  (Step character-gravity-2)
  (ToFloat) > .y-position

  (Step update-position)
  (ToFloat2)> .animation-position

  ;; (Log "animation-position")
  ;; .character-y-velocity
  ;; (Log "y-velocity: ")
  ;; .character-y-acceleration
  ;; (Log "character-y-acceleration")
  ;; .y-position
  ;; (Log "y-position")


  .y-position
  (Step character-on-ground)



  (GFX.MainWindow
   :Title "MainWindow" :Width 1920 :Height 1080
   :Contents
   (-> (Setup
        (GFX.DrawQueue) >= .ui-draw-queue
        (GFX.UIPass .ui-draw-queue) >> .render-steps)
       .ui-draw-queue (GFX.ClearQueue)

       (UI
        .ui-draw-queue
        (->
         [.animation-position .animation-array .animation-index 0.2]
         (Step display-animation)))

       (Step jump-button)

       (GFX.Render :Steps .render-steps))))

(defmesh main)
(schedule main main-animation-loop)
(run main (/ 1.0 60))