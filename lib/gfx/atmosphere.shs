@include("cubemap-utils.shs" Once: true)
@define(atmosphere-wgsl @read("atmosphere.wgsl"))


@template(precompute-sky-fs [] {
  Shader.Literal(Type: ShaderLiteralType::Header Source: gfx-internal/atmosphere)
  Shader.ReadInput("worldNormal") | Math.Normalize >= ray-dir
  @f3(0.0) >= ray-start
  9999999999999.0 >= ray-length
  
  gfx-internal/lightDir >= light-dir
  gfx-internal/lightColor >= light-color
  
  Shader.Literal(["
  let _DrawPlanet = 0;
  if (_DrawPlanet == 1) {
    let planetIntersection = PlanetIntersection(" ray-start ", " ray-dir ");
    if (planetIntersection.x > 0.0) { " ray-length " = min(" ray-length ", planetIntersection.x); }
  }"])
  
  Shader.Literal("var transmittance : vec3<f32> = vec3<f32>(0.0);")
  Shader.Literal(["IntegrateScattering(" ray-start ", " ray-dir ", " ray-length ", " light-dir ", " light-color ", &transmittance)"] OutputDimension: 3)
  ToFloat4 | Math.Add(@f4(0 0 0 1))
  Shader.WriteOutput("color")
})

@template(sky-fs [] {
  Shader.ReadInput("worldNormal") >= world-normal
  Shader.SampleTextureCoord("sky")
  Shader.WriteOutput("color")
  
  1.0 | Shader.WriteOutput("depth")
})

@template(gfx-atmosphere/precompute-sky [] {
  Once({
    GFX.Texture(
      Format: TextureFormat::RGBA8UnormSrgb
      Resolution: @i2(1024)
      Dimension: TextureDimension::Cube
    ) = sky-cube-tex
  })
  
  light-direction | Math.Normalize = ldn
  @fbl/color-to-float4(light-color) | Math.Multiply(exposure) | ToFloat3 = lc
  [ldn lc] | Memoize({
    Log("Recomputing skybox")
    GFX.Feature(ComposeWith: {
        "gfx-internal/atmosphere": @atmosphere-wgsl
        "gfx-internal/lightDir": ldn
        "gfx-internal/lightColor": lc
      }
      Shaders: [
        {Stage: ProgrammableGraphicsStage::Fragment
         EntryPoint: {@precompute-sky-fs()}}]
    ) = filter-feature
    @gfx/filter-cubemap(filter-feature sky-cube-tex 0 {})
    sky-cube-tex | Log("the sky cube tex")
    {sky: sky-cube-tex}
  })
} Looped: true)

@template(setup-skybox-feature [] {
  GFX.Feature(Shaders: [
      {Stage: ProgrammableGraphicsStage::Vertex
       EntryPoint: {@gfx/sky-sphere-vs()}
       After: ["initScreenPosition"]
       Before: ["writePosition"]}
      {Stage: ProgrammableGraphicsStage::Fragment
       EntryPoint: {@sky-fs()}
       After: ["writeColor"]}]
    State: {FlipFrontFace: true DepthWrite: false DepthCompare: CompareFunction::LessEqual}
    ViewGenerators: {@gfx-atmosphere/precompute-sky()}
  )
})

@template(setup-skybox-pass [] {
  GFX.BuiltinFeature(Id: BuiltinFeatureId::Transform) >> sky-features
  @setup-skybox-feature() >> sky-features
  
  GFX.DrawablePass(
    Features: sky-features
    Queue: (@gfx/render-sky-sphere-queue({}))
  )
})